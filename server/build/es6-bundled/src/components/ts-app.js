define(["exports","meta","require"],function(_exports,meta,_require){/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/'use strict';Object.defineProperty(_exports,"__esModule",{value:!0});_exports.$documentWaitDefault=documentWait;_exports.$indexDefault=addLeadingZeros;_exports.$indexDefault$1=assign;_exports.$indexDefault$10=getUTCWeek;_exports.getWeekOfMonth=_exports.$indexDefault$100=getWeekOfMonth;_exports.getWeekYear=_exports.$indexDefault$101=getWeekYear;_exports.getWeeksInMonth=_exports.$indexDefault$102=getWeeksInMonth;_exports.getYear=_exports.$indexDefault$103=getYear;_exports.isAfter=_exports.$indexDefault$104=isAfter;_exports.isBefore=_exports.$indexDefault$105=isBefore;_exports.isDate=_exports.$indexDefault$106=isDate;_exports.isEqual=_exports.$indexDefault$107=isEqual;_exports.isFirstDayOfMonth=_exports.$indexDefault$108=isFirstDayOfMonth;_exports.isFriday=_exports.$indexDefault$109=isFriday;_exports.$indexDefault$11=getUTCWeekYear;_exports.isFuture=_exports.$indexDefault$110=isFuture;_exports.isLastDayOfMonth=_exports.$indexDefault$111=isLastDayOfMonth;_exports.isLeapYear=_exports.$indexDefault$112=isLeapYear;_exports.isMonday=_exports.$indexDefault$113=isMonday;_exports.isPast=_exports.$indexDefault$114=isPast;_exports.isSameDay=_exports.$indexDefault$115=isSameDay;_exports.isSameHour=_exports.$indexDefault$116=isSameHour;_exports.isSameISOWeek=_exports.$indexDefault$117=isSameISOWeek;_exports.isSameISOWeekYear=_exports.$indexDefault$118=isSameISOWeekYear;_exports.isSameMinute=_exports.$indexDefault$119=isSameMinute;_exports.$indexDefault$12=setUTCDay;_exports.isSameMonth=_exports.$indexDefault$120=isSameMonth;_exports.isSameQuarter=_exports.$indexDefault$121=isSameQuarter;_exports.isSameSecond=_exports.$indexDefault$122=isSameSecond;_exports.isSameWeek=_exports.$indexDefault$123=isSameWeek;_exports.isSameYear=_exports.$indexDefault$124=isSameYear;_exports.isSaturday=_exports.$indexDefault$125=isSaturday;_exports.isSunday=_exports.$indexDefault$126=isSunday;_exports.isThisHour=_exports.$indexDefault$127=isThisHour;_exports.isThisISOWeek=_exports.$indexDefault$128=isThisISOWeek;_exports.isThisMinute=_exports.$indexDefault$129=isThisMinute;_exports.$indexDefault$13=setUTCISODay;_exports.isThisMonth=_exports.$indexDefault$130=isThisMonth;_exports.isThisQuarter=_exports.$indexDefault$131=isThisQuarter;_exports.isThisSecond=_exports.$indexDefault$132=isThisSecond;_exports.isThisWeek=_exports.$indexDefault$133=isThisWeek;_exports.isThisYear=_exports.$indexDefault$134=isThisYear;_exports.isThursday=_exports.$indexDefault$135=isThursday;_exports.isToday=_exports.$indexDefault$136=isToday;_exports.isTomorrow=_exports.$indexDefault$137=isTomorrow;_exports.isTuesday=_exports.$indexDefault$138=isTuesday;_exports.isValid$1=_exports.$indexDefault$139=isValid$1;_exports.$indexDefault$14=setUTCISOWeek;_exports.isWednesday=_exports.$indexDefault$140=isWednesday;_exports.isWeekend=_exports.$indexDefault$141=isWeekend;_exports.isWithinInterval=_exports.$indexDefault$142=isWithinInterval;_exports.isYesterday=_exports.$indexDefault$143=isYesterday;_exports.lastDayOfDecade=_exports.$indexDefault$144=lastDayOfDecade;_exports.lastDayOfISOWeek=_exports.$indexDefault$145=lastDayOfISOWeek;_exports.lastDayOfISOWeekYear=_exports.$indexDefault$146=lastDayOfISOWeekYear;_exports.lastDayOfMonth=_exports.$indexDefault$147=lastDayOfMonth;_exports.lastDayOfQuarter=_exports.$indexDefault$148=lastDayOfQuarter;_exports.lastDayOfWeek=_exports.$indexDefault$149=lastDayOfWeek;_exports.$indexDefault$15=setUTCWeek;_exports.lastDayOfYear=_exports.$indexDefault$150=lastDayOfYear;_exports.lightFormat=_exports.$indexDefault$151=lightFormat;_exports.$indexDefault$152=buildFormatLongFn;_exports.$indexDefault$153=buildLocalizeFn;_exports.$indexDefault$154=buildMatchFn;_exports.$indexDefault$155=buildMatchPatternFn;_exports.$indexDefault$156=formatDistance;_exports.$indexDefault$158=formatRelative;_exports.$indexDefault$16=startOfUTCISOWeek;_exports.max=_exports.$indexDefault$162=max;_exports.min=_exports.$indexDefault$163=min;_exports.parse$1=_exports.$indexDefault$165=parse$1;_exports.parseISO=_exports.$indexDefault$166=parseISO;_exports.roundToNearestMinutes=_exports.$indexDefault$167=roundToNearestMinutes;_exports.setDate=_exports.$indexDefault$168=setDate;_exports.setDay=_exports.$indexDefault$169=setDay;_exports.$indexDefault$17=startOfUTCISOWeekYear;_exports.setDayOfYear=_exports.$indexDefault$170=setDayOfYear;_exports.setHours=_exports.$indexDefault$171=setHours;_exports.setISODay=_exports.$indexDefault$172=setISODay;_exports.setISOWeek=_exports.$indexDefault$173=setISOWeek;_exports.setISOWeekYear=_exports.$indexDefault$174=setISOWeekYear;_exports.setMilliseconds=_exports.$indexDefault$175=setMilliseconds;_exports.setMinutes=_exports.$indexDefault$176=setMinutes;_exports.setMonth=_exports.$indexDefault$177=setMonth;_exports.setQuarter=_exports.$indexDefault$178=setQuarter;_exports.setSeconds=_exports.$indexDefault$179=setSeconds;_exports.$indexDefault$18=startOfUTCWeek;_exports.setWeek=_exports.$indexDefault$180=setWeek;_exports.setWeekYear=_exports.$indexDefault$181=setWeekYear;_exports.setYear=_exports.$indexDefault$182=setYear;_exports.startOfDay=_exports.$indexDefault$183=startOfDay;_exports.startOfDecade=_exports.$indexDefault$184=startOfDecade;_exports.startOfHour=_exports.$indexDefault$185=startOfHour;_exports.startOfISOWeek=_exports.$indexDefault$186=startOfISOWeek;_exports.startOfISOWeekYear=_exports.$indexDefault$187=startOfISOWeekYear;_exports.startOfMinute=_exports.$indexDefault$188=startOfMinute;_exports.startOfMonth=_exports.$indexDefault$189=startOfMonth;_exports.$indexDefault$19=startOfUTCWeekYear;_exports.startOfQuarter=_exports.$indexDefault$190=startOfQuarter;_exports.startOfSecond=_exports.$indexDefault$191=startOfSecond;_exports.startOfToday=_exports.$indexDefault$192=startOfToday;_exports.startOfTomorrow=_exports.$indexDefault$193=startOfTomorrow;_exports.startOfWeek=_exports.$indexDefault$194=startOfWeek;_exports.startOfWeekYear=_exports.$indexDefault$195=startOfWeekYear;_exports.startOfYear=_exports.$indexDefault$196=startOfYear;_exports.startOfYesterday=_exports.$indexDefault$197=startOfYesterday;_exports.subDays=_exports.$indexDefault$198=subDays;_exports.subHours=_exports.$indexDefault$199=subHours;_exports.$indexDefault$2=cloneObject;_exports.$indexDefault$20=toInteger;_exports.subISOWeekYears=_exports.$indexDefault$200=subISOWeekYears;_exports.subMilliseconds=_exports.$indexDefault$201=subMilliseconds;_exports.subMinutes=_exports.$indexDefault$202=subMinutes;_exports.subMonths=_exports.$indexDefault$203=subMonths;_exports.subQuarters=_exports.$indexDefault$204=subQuarters;_exports.subSeconds=_exports.$indexDefault$205=subSeconds;_exports.subWeeks=_exports.$indexDefault$206=subWeeks;_exports.subYears=_exports.$indexDefault$207=subYears;_exports.toDate=_exports.$indexDefault$208=toDate;_exports.addBusinessDays=_exports.$indexDefault$21=addBusinessDays;_exports.addDays=_exports.$indexDefault$22=addDays;_exports.addHours=_exports.$indexDefault$23=addHours;_exports.addISOWeekYears=_exports.$indexDefault$24=addISOWeekYears;_exports.addMilliseconds=_exports.$indexDefault$25=addMilliseconds;_exports.addMinutes=_exports.$indexDefault$26=addMinutes;_exports.addMonths=_exports.$indexDefault$27=addMonths;_exports.addQuarters=_exports.$indexDefault$28=addQuarters;_exports.addSeconds=_exports.$indexDefault$29=addSeconds;_exports.addWeeks=_exports.$indexDefault$30=addWeeks;_exports.addYears=_exports.$indexDefault$31=addYears;_exports.areIntervalsOverlapping=_exports.$indexDefault$32=areIntervalsOverlapping;_exports.closestIndexTo=_exports.$indexDefault$33=closestIndexTo;_exports.closestTo=_exports.$indexDefault$34=closestTo;_exports.compareAsc=_exports.$indexDefault$35=compareAsc;_exports.compareDesc=_exports.$indexDefault$36=compareDesc;_exports.differenceInBusinessDays=_exports.$indexDefault$37=differenceInBusinessDays;_exports.differenceInCalendarDays=_exports.$indexDefault$38=differenceInCalendarDays;_exports.differenceInCalendarISOWeekYears=_exports.$indexDefault$39=differenceInCalendarISOWeekYears;_exports.differenceInCalendarISOWeeks=_exports.$indexDefault$40=differenceInCalendarISOWeeks;_exports.differenceInCalendarMonths=_exports.$indexDefault$41=differenceInCalendarMonths;_exports.differenceInCalendarQuarters=_exports.$indexDefault$42=differenceInCalendarQuarters;_exports.differenceInCalendarWeeks=_exports.$indexDefault$43=differenceInCalendarWeeks;_exports.differenceInCalendarYears=_exports.$indexDefault$44=differenceInCalendarYears;_exports.differenceInDays=_exports.$indexDefault$45=differenceInDays;_exports.differenceInHours=_exports.$indexDefault$46=differenceInHours;_exports.differenceInISOWeekYears=_exports.$indexDefault$47=differenceInISOWeekYears;_exports.differenceInMilliseconds=_exports.$indexDefault$48=differenceInMilliseconds;_exports.differenceInMinutes=_exports.$indexDefault$49=differenceInMinutes;_exports.differenceInMonths=_exports.$indexDefault$50=differenceInMonths;_exports.differenceInQuarters=_exports.$indexDefault$51=differenceInQuarters;_exports.differenceInSeconds=_exports.$indexDefault$52=differenceInSeconds;_exports.differenceInWeeks=_exports.$indexDefault$53=differenceInWeeks;_exports.differenceInYears=_exports.$indexDefault$54=differenceInYears;_exports.eachDayOfInterval=_exports.$indexDefault$55=eachDayOfInterval;_exports.eachWeekOfInterval=_exports.$indexDefault$56=eachWeekOfInterval;_exports.eachWeekendOfInterval=_exports.$indexDefault$57=eachWeekendOfInterval;_exports.eachWeekendOfMonth=_exports.$indexDefault$58=eachWeekendOfMonth;_exports.eachWeekendOfYear=_exports.$indexDefault$59=eachWeekendOfYear;_exports.$indexDefault$6=getTimezoneOffsetInMilliseconds;_exports.endOfDay=_exports.$indexDefault$60=endOfDay;_exports.endOfDecade=_exports.$indexDefault$61=endOfDecade;_exports.endOfHour=_exports.$indexDefault$62=endOfHour;_exports.endOfISOWeek=_exports.$indexDefault$63=endOfISOWeek;_exports.endOfISOWeekYear=_exports.$indexDefault$64=endOfISOWeekYear;_exports.endOfMinute=_exports.$indexDefault$65=endOfMinute;_exports.endOfMonth=_exports.$indexDefault$66=endOfMonth;_exports.endOfQuarter=_exports.$indexDefault$67=endOfQuarter;_exports.endOfSecond=_exports.$indexDefault$68=endOfSecond;_exports.endOfToday=_exports.$indexDefault$69=endOfToday;_exports.$indexDefault$7=getUTCDayOfYear;_exports.endOfTomorrow=_exports.$indexDefault$70=endOfTomorrow;_exports.endOfWeek=_exports.$indexDefault$71=endOfWeek;_exports.endOfYear=_exports.$indexDefault$72=endOfYear;_exports.endOfYesterday=_exports.$indexDefault$73=endOfYesterday;_exports.format=_exports.$indexDefault$74=format;_exports.formatDistance=_exports.$indexDefault$75=formatDistance$1;_exports.formatDistanceStrict=_exports.$indexDefault$76=formatDistanceStrict;_exports.formatDistanceToNow=_exports.$indexDefault$77=formatDistanceToNow;_exports.formatRelative=_exports.$indexDefault$78=formatRelative$1;_exports.fromUnixTime=_exports.$indexDefault$79=fromUnixTime;_exports.$indexDefault$8=getUTCISOWeek;_exports.getDate=_exports.$indexDefault$80=getDate;_exports.getDay=_exports.$indexDefault$81=getDay;_exports.getDayOfYear=_exports.$indexDefault$82=getDayOfYear;_exports.getDaysInMonth=_exports.$indexDefault$83=getDaysInMonth;_exports.getDaysInYear=_exports.$indexDefault$84=getDaysInYear;_exports.getDecade=_exports.$indexDefault$85=getDecade;_exports.getHours=_exports.$indexDefault$86=getHours;_exports.getISODay=_exports.$indexDefault$87=getISODay;_exports.getISOWeek=_exports.$indexDefault$88=getISOWeek;_exports.getISOWeekYear=_exports.$indexDefault$89=getISOWeekYear;_exports.$indexDefault$9=getUTCISOWeekYear;_exports.getISOWeeksInYear=_exports.$indexDefault$90=getISOWeeksInYear;_exports.getMilliseconds=_exports.$indexDefault$91=getMilliseconds;_exports.getMinutes=_exports.$indexDefault$92=getMinutes;_exports.getMonth=_exports.$indexDefault$93=getMonth;_exports.getOverlappingDaysInIntervals=_exports.$indexDefault$94=getOverlappingDaysInIntervals;_exports.getQuarter=_exports.$indexDefault$95=getQuarter;_exports.getSeconds=_exports.$indexDefault$96=getSeconds;_exports.getTime=_exports.$indexDefault$97=getTime;_exports.getUnixTime=_exports.$indexDefault$98=getUnixTime;_exports.getWeek=_exports.$indexDefault$99=getWeek;_exports.$ponyfillDefault=symbolObservablePonyfill;_exports.addListener=addListener;_exports.afterNextRender=afterNextRender;_exports.applyCss=applyCss;_exports.applyMiddleware=applyMiddleware;_exports.applyStyle=applyStyle;_exports.applyStylePlaceHolder=applyStylePlaceHolder;_exports.beforeNextRender=beforeNextRender;_exports.bindActionCreators=bindActionCreators;_exports.calculateSplices=calculateSplices;_exports.camelToDashCase=camelToDashCase;_exports.combineReducers=combineReducers;_exports.compose=compose;_exports.createScopeStyle=createScopeStyle;_exports.createSelectorCreator=createSelectorCreator;_exports.createStore=createStore;_exports.createStructuredSelector=createStructuredSelector;_exports.cssFromModule=cssFromModule;_exports.cssFromModuleImports=cssFromModuleImports;_exports.cssFromModules=cssFromModules;_exports.cssFromTemplate=cssFromTemplate;_exports.dashToCamelCase=dashToCamelCase;_exports.deepTargetFind=deepTargetFind;_exports.defaultMemoize=defaultMemoize;_exports.detectMixin=detectMixin;_exports.dumpRegistrations=dumpRegistrations;_exports.elementHasBuiltCss=elementHasBuiltCss;_exports.elementsAreInvalid=elementsAreInvalid;_exports.findMatchingParen=findMatchingParen;_exports.flush$2=flush;_exports.forEachRule=forEachRule;_exports.gatherStyleText=gatherStyleText;_exports.get=get;_exports.getBuildComment=getBuildComment;_exports.getComputedStyleValue=getComputedStyleValue;_exports.getCssBuild=getCssBuild;_exports.getIsExtends=getIsExtends;_exports.hideElementsGlobally=hideElementsGlobally;_exports.incrementInstanceCount=incrementInstanceCount;_exports.insertNodeIntoTemplate=insertNodeIntoTemplate;_exports.invalidate=invalidate;_exports.invalidateTemplate=invalidateTemplate;_exports.isAncestor=isAncestor;_exports.isDescendant=isDescendant;_exports.isKeyframesSelector=isKeyframesSelector;_exports.isOptimalCssBuild=isOptimalCssBuild;_exports.isPath=isPath;_exports.isProtectedDayOfYearToken=isProtectedDayOfYearToken;_exports.isProtectedWeekYearToken=isProtectedWeekYearToken;_exports.isTargetedBuild=isTargetedBuild;_exports.isUnscopedStyle=isUnscopedStyle;_exports.isValid=isValid;_exports.isValidating=isValidating;_exports.matches=matches;_exports.mixinBehaviors=mixinBehaviors;_exports.modelForElement=modelForElement;_exports.normalize=normalize;_exports.parse=parse;_exports.pathFromUrl=pathFromUrl;_exports.prevent=prevent;_exports.processUnscopedStyle=processUnscopedStyle;_exports.processVariableAndFallback=processVariableAndFallback;_exports.property$1=_exports.property=property;_exports.query$1=_exports.query=query;_exports.queryAll$1=_exports.queryAll=queryAll;_exports.register=register$1;_exports.register$1=register;_exports.removeCustomPropAssignment=removeCustomPropAssignment;_exports.removeListener=removeListener;_exports.removeNodesFromTemplate=removeNodesFromTemplate;_exports.resetMouseCanceller=resetMouseCanceller;_exports.resolveCss=resolveCss;_exports.resolveUrl=resolveUrl;_exports.root=root;_exports.rulesForStyle=rulesForStyle;_exports.scopeSubtree=scopeSubtree;_exports.set=set;_exports.setElementClassRaw=setElementClassRaw;_exports.setMetaTag=setMetaTag;_exports.setTouchAction=setTouchAction;_exports.split=split;_exports.splitSelectorList=splitSelectorList;_exports.startValidating=startValidating;_exports.startValidatingTemplate=startValidatingTemplate;_exports.stringify=stringify;_exports.stylesFromModule=stylesFromModule;_exports.stylesFromModuleImports=stylesFromModuleImports;_exports.stylesFromModules=stylesFromModules;_exports.stylesFromTemplate=stylesFromTemplate;_exports.templateFactory$1=_exports.templateFactory=templateFactory;_exports.templateIsValid=templateIsValid;_exports.templateIsValidating=templateIsValidating;_exports.templatize=templatize;_exports.throwProtectedError=throwProtectedError;_exports.toCssText=toCssText;_exports.translate=translate;_exports.updateNativeProperties=updateNativeProperties;_exports.$index$149=_exports.$index$148=_exports.$index$147=_exports.$index$146=_exports.$index$145=_exports.$index$144=_exports.$index$143=_exports.$index$142=_exports.$index$141=_exports.$index$140=_exports.$index$14=_exports.$index$139=_exports.$index$138=_exports.$index$137=_exports.$index$136=_exports.$index$135=_exports.$index$134=_exports.$index$133=_exports.$index$132=_exports.$index$131=_exports.$index$130=_exports.$index$13=_exports.$index$129=_exports.$index$128=_exports.$index$127=_exports.$index$126=_exports.$index$125=_exports.$index$124=_exports.$index$123=_exports.$index$122=_exports.$index$121=_exports.$index$120=_exports.$index$12=_exports.$index$119=_exports.$index$118=_exports.$index$117=_exports.$index$116=_exports.$index$115=_exports.$index$114=_exports.$index$113=_exports.$index$112=_exports.$index$111=_exports.$index$110=_exports.$index$11=_exports.$index$109=_exports.$index$108=_exports.$index$107=_exports.$index$106=_exports.$index$105=_exports.$index$104=_exports.$index$103=_exports.$index$102=_exports.$index$101=_exports.$index$100=_exports.$index$10=_exports.$index$1=_exports.$index=_exports.$htmlTag=_exports.$hideTemplateControls=_exports.$helpers=_exports.$gestures=_exports.$gestureEventListeners=_exports.$flush=_exports.$flattenedNodesObserver=_exports.$elementMixin=_exports.$domRepeat=_exports.$domModule=_exports.$domIf=_exports.$domBind=_exports.$dom=_exports.$documentWait=_exports.$directive=_exports.$dirMixin=_exports.$defaultTemplateProcessor=_exports.$decorators=_exports.$debounce=_exports.$customStyleInterfaceDefault=_exports.$customStyleInterface$1=_exports.$customStyle=_exports.$cssTag=_exports.$cssParse=_exports.$connectMixin=_exports.$config=_exports.$commonUtils=_exports.$commonRegex=_exports.$class=_exports.$caseMap=_exports.$async=_exports.$articles$1=_exports.$articles=_exports.$arraySplice=_exports.$arraySelector=_exports.$applyShimUtils=_exports.$applyShimDefault=_exports.$applyShim$1=_exports.$appScrollEffectsBehavior=_exports.$appLayoutBehavior=_exports.$appDefault=_exports.$app$1=_exports.$app=void 0;_exports.$index$46=_exports.$index$45=_exports.$index$44=_exports.$index$43=_exports.$index$42=_exports.$index$41=_exports.$index$40=_exports.$index$4=_exports.$index$39=_exports.$index$38=_exports.$index$37=_exports.$index$36=_exports.$index$35=_exports.$index$34=_exports.$index$33=_exports.$index$32=_exports.$index$31=_exports.$index$30=_exports.$index$3=_exports.$index$29=_exports.$index$28=_exports.$index$27=_exports.$index$26=_exports.$index$25=_exports.$index$24=_exports.$index$23=_exports.$index$22=_exports.$index$214=_exports.$index$213=_exports.$index$212=_exports.$index$211=_exports.$index$210=_exports.$index$21=_exports.$index$209=_exports.$index$208=_exports.$index$207=_exports.$index$206=_exports.$index$205=_exports.$index$204=_exports.$index$203=_exports.$index$202=_exports.$index$201=_exports.$index$200=_exports.$index$20=_exports.$index$2=_exports.$index$199=_exports.$index$198=_exports.$index$197=_exports.$index$196=_exports.$index$195=_exports.$index$194=_exports.$index$193=_exports.$index$192=_exports.$index$191=_exports.$index$190=_exports.$index$19=_exports.$index$189=_exports.$index$188=_exports.$index$187=_exports.$index$186=_exports.$index$185=_exports.$index$184=_exports.$index$183=_exports.$index$182=_exports.$index$181=_exports.$index$180=_exports.$index$18=_exports.$index$179=_exports.$index$178=_exports.$index$177=_exports.$index$176=_exports.$index$175=_exports.$index$174=_exports.$index$173=_exports.$index$172=_exports.$index$171=_exports.$index$170=_exports.$index$17=_exports.$index$169=_exports.$index$168=_exports.$index$167=_exports.$index$166=_exports.$index$165=_exports.$index$164=_exports.$index$163=_exports.$index$162=_exports.$index$161=_exports.$index$160=_exports.$index$16=_exports.$index$159=_exports.$index$158=_exports.$index$157=_exports.$index$156=_exports.$index$155=_exports.$index$154=_exports.$index$153=_exports.$index$152=_exports.$index$151=_exports.$index$150=_exports.$index$15=void 0;_exports.$router=_exports.$resolveUrl=_exports.$repeat=_exports.$renderStatus=_exports.$render=_exports.$redux=_exports.$propertyEffects=_exports.$propertyAccessors=_exports.$propertiesMixin=_exports.$propertiesChanged=_exports.$ponyfill=_exports.$polymerLegacy=_exports.$polymerFn=_exports.$polymerElement=_exports.$polymerDom=_exports.$path=_exports.$parts=_exports.$part=_exports.$pageViewElement=_exports.$network=_exports.$mutableDataBehavior=_exports.$mutableData=_exports.$modifyTemplate=_exports.$mixin=_exports.$metadata=_exports.$mediaQuery=_exports.$litHtml=_exports.$litElement=_exports.$legacyElementMixin=_exports.$lazyReducerEnhancer=_exports.$ironScrollTargetBehavior=_exports.$ironResizableBehavior=_exports.$indexDefault$5=_exports.$indexDefault$4=_exports.$indexDefault$3=_exports.$indexDefault$210=_exports.$indexDefault$209=_exports.$indexDefault$164=_exports.$indexDefault$161=_exports.$indexDefault$160=_exports.$indexDefault$159=_exports.$indexDefault$157=_exports.$index$99=_exports.$index$98=_exports.$index$97=_exports.$index$96=_exports.$index$95=_exports.$index$94=_exports.$index$93=_exports.$index$92=_exports.$index$91=_exports.$index$90=_exports.$index$9=_exports.$index$89=_exports.$index$88=_exports.$index$87=_exports.$index$86=_exports.$index$85=_exports.$index$84=_exports.$index$83=_exports.$index$82=_exports.$index$81=_exports.$index$80=_exports.$index$8=_exports.$index$79=_exports.$index$78=_exports.$index$77=_exports.$index$76=_exports.$index$75=_exports.$index$74=_exports.$index$73=_exports.$index$72=_exports.$index$71=_exports.$index$70=_exports.$index$7=_exports.$index$69=_exports.$index$68=_exports.$index$67=_exports.$index$66=_exports.$index$65=_exports.$index$64=_exports.$index$63=_exports.$index$62=_exports.$index$61=_exports.$index$60=_exports.$index$6=_exports.$index$59=_exports.$index$58=_exports.$index$57=_exports.$index$56=_exports.$index$55=_exports.$index$54=_exports.$index$53=_exports.$index$52=_exports.$index$51=_exports.$index$50=_exports.$index$5=_exports.$index$49=_exports.$index$48=_exports.$index$47=void 0;_exports.PolymerElement=_exports.Polymer$1=_exports.Polymer=_exports.PageViewElement=_exports.OptionalMutableDataBehavior=_exports.OptionalMutableData=_exports.OpensInNewTabIcon=_exports.OPEN_SNACKBAR=_exports.NodePart$1=_exports.NodePart=_exports.MutableDataBehavior=_exports.MutableData=_exports.MIXIN_MATCH=_exports.MEDIA_MATCH=_exports.LitElement=_exports.Linkedin=_exports.LegacyElementMixin=_exports.IronScrollTargetBehavior=_exports.IronResizableBehavior=_exports.IS_VAR=_exports.HP_HOST=_exports.HOST_SUFFIX=_exports.HOST_PREFIX=_exports.GooglePlus=_exports.GestureEventListeners=_exports.FlattenedNodesObserver=_exports.Facebook=_exports.FAIL_ARTICLES=_exports.EventPart$1=_exports.EventPart=_exports.EventApi=_exports.ElementWithBackground=_exports.ElementMixin=_exports.DomRepeat=_exports.DomModule=_exports.DomIf=_exports.DomBind=_exports.DomApi=_exports.DirMixin=_exports.DefaultTemplateProcessor$1=_exports.DefaultTemplateProcessor=_exports.Debouncer=_exports.CustomStyleProvider=_exports.CustomStyleInterfaceInterface=_exports.CustomStyle=_exports.Class=_exports.CheckMarkIcon=_exports.Calendar=_exports.CSSResult$1=_exports.CSSResult=_exports.CLOSE_SNACKBAR=_exports.CLOSE_MODAL=_exports.CLEAR_ANNOUNCER_LABEL=_exports.CDN_HOST_URL=_exports.BooleanAttributePart$1=_exports.BooleanAttributePart=_exports.Base=_exports.BRACKETED=_exports.AttributePart$1=_exports.AttributePart=_exports.AttributeCommitter$1=_exports.AttributeCommitter=_exports.ArrowDown=_exports.ArraySelectorMixin=_exports.ArraySelector=_exports.AppScrollEffectsBehavior=_exports.AppLayoutBehavior=_exports.ANIMATION_MATCH=_exports.$wrap=_exports.$updatingElement=_exports.$unscopedStyleHandler=_exports.$unsafeHtml=_exports.$tsStyleTypography=_exports.$tsStyleTheme=_exports.$tsStyleTable=_exports.$tsStyleShared=_exports.$tsStyleLayout=_exports.$tsStyleHomepage=_exports.$tsStyleGrid=_exports.$tsStyleElevation=_exports.$tsStyleCard=_exports.$tsStyleButton=_exports.$tsIcons=_exports.$templatizerBehavior=_exports.$templatize=_exports.$templateStamp=_exports.$templateResult=_exports.$templateMapDefault=_exports.$templateMap=_exports.$templateInstance=_exports.$templateFactory=_exports.$template=_exports.$telemetry=_exports.$styleUtil=_exports.$styleSettings=_exports.$styleGather=_exports.$store=_exports.$shadyRender=_exports.$settings=_exports.$scopeSubtree=void 0;_exports.installMediaQueryWatcher=_exports.idlePeriod=_exports.htmlLiteral=_exports.html$3=_exports.html$2=_exports.html$1=_exports.html$5=_exports.html$4=_exports.html=_exports.gestures=_exports.flushDebouncers=_exports.flush$1=_exports.flush=_exports.findOriginalTarget=_exports.fetchArticles=_exports.eventOptions$1=_exports.eventOptions=_exports.dom=_exports.disableRuntime=_exports.directive$1=_exports.directive=_exports.defaultTemplateProcessor$1=_exports.defaultTemplateProcessor=_exports.defaultConverter$1=_exports.defaultConverter=_exports.dedupingMixin=_exports.customElement$1=_exports.customElement=_exports.cssBuild=_exports.css$1=_exports.css=_exports.createSelector=_exports.createMarker$1=_exports.createMarker=_exports.connect=_exports.cancelSyntheticClickEvents=_exports.boundAttributeSuffix=_exports.backIcon=_exports.articles=_exports.announceLabel=_exports.animationFrame=_exports.allowTemplateFromDomModule=_exports.addToCartIcon=_exports.enqueueDebouncer$1=_exports.enqueueDebouncer=_exports.addDebouncer=_exports.add=_exports._scrollTimer=_exports._scrollEffects=_exports.__DO_NOT_USE__ActionTypes=_exports.WP_REST_PATH=_exports.WP_REST_API_HOST=_exports.VAR_CONSUMED=_exports.VAR_ASSIGN=_exports.UpdatingElement$1=_exports.UpdatingElement=_exports.UPDATE_SUBTITLE=_exports.UPDATE_PAGE=_exports.UPDATE_OFFLINE=_exports.UPDATE_DRAWER_STATE=_exports.Twitter=_exports.TsTypographyStyle=_exports.TsTheme=_exports.TsTableStyles=_exports.TsLayoutStyle=_exports.TsHomePageStyle=_exports.TsGridStyle=_exports.TsElevationStyle=_exports.TsCard=_exports.TsButtonStyle=_exports.Templatizer=_exports.TemplateStamp=_exports.TemplateResult$3=_exports.TemplateResult$2=_exports.TemplateResult$1=_exports.TemplateResult=_exports.TemplateInstanceBase=_exports.TemplateInstance$1=_exports.TemplateInstance=_exports.Template$1=_exports.Template=_exports.SubTitleIcon=_exports.StyleNode=_exports.SharedStyles=_exports.Share=_exports.SearchIcon=_exports.SVGTemplateResult$2=_exports.SVGTemplateResult$1=_exports.SVGTemplateResult=_exports.SET_ANNOUNCER_LABEL=_exports.REQUEST_ARTICLES=_exports.RECEIVE_ARTICLES=_exports.PropertyPart$1=_exports.PropertyPart=_exports.PropertyEffects=_exports.PropertyCommitter$1=_exports.PropertyCommitter=_exports.PropertyAccessors=_exports.PropertiesMixin=_exports.PropertiesChanged=void 0;_exports.wrap=_exports.version$1=_exports.version=_exports.useShadow=_exports.useNativeCustomElements=_exports.useNativeCSSProperties=_exports.updateSubTitle=_exports.updateStyles=_exports.updateOffline=_exports.updateMetadata=_exports.updateLocationURL=_exports.updateLayout=_exports.updateDrawerState=_exports.unsafeHTML=_exports.unsafeCSS$1=_exports.unsafeCSS=_exports.types=_exports.timeOut=_exports.templateCaches$1=_exports.templateCaches=_exports.syncInitialRender=_exports.svg$2=_exports.svg$1=_exports.svg=_exports.supportsAdoptingStyleSheets$1=_exports.supportsAdoptingStyleSheets=_exports.strictTemplatePolicy=_exports.store=_exports.showSnackbar=_exports.setSyncInitialRender=_exports.setStrictTemplatePolicy=_exports.setSanitizeDOMValue=_exports.setRootPath=_exports.setPassiveTouchGestures=_exports.setLegacyOptimizations=_exports.setCancelSyntheticClickEvents=_exports.setAllowTemplateFromDomModule=_exports.scrollTimingFunction=_exports.scroll=_exports.scopingAttribute=_exports.sanitizeDOMValue=_exports.rootPath=_exports.repeat=_exports.reparentNodes$1=_exports.reparentNodes=_exports.render$1=_exports.render$2=_exports.render=_exports.removeNodes$1=_exports.removeNodes=_exports.removeFromCartIcon=_exports.remove=_exports.registrations=_exports.registerEffect=_exports.refreshPage=_exports.recognizers=_exports.queryAllRoot=_exports.plusIcon=_exports.passiveTouchGestures=_exports.parts$1=_exports.parts=_exports.nothing$1=_exports.nothing=_exports.notEqual$1=_exports.notEqual=_exports.nodeMarker=_exports.noChange$1=_exports.noChange=_exports.navigate=_exports.nativeShadow=_exports.nativeCssVariables=_exports.minusIcon=_exports.minTime$1=_exports.minTime=_exports.microTask=_exports.menuIcon=_exports.maxTime$1=_exports.maxTime=_exports.matchesSelector=_exports.markerRegex=_exports.marker=_exports.magnifyIcon=_exports.legacyOptimizations=_exports.lazyReducerEnhancer=_exports.lastAttributeNameRegex=_exports.itemsSelector=_exports.itemListSelector=_exports.isTemplatePartActive$1=_exports.isTemplatePartActive=_exports.isPrimitive$1=_exports.isPrimitive=_exports.isIterable$1=_exports.isIterable=_exports.isDirective$1=_exports.isDirective=_exports.isDeep=_exports.isCEPolyfill=_exports.instanceCount=_exports.installRouter=_exports.installOfflineWatcher=void 0;_exports.wrap$1=void 0;meta=babelHelpers.interopRequireWildcard(meta);_require=babelHelpers.interopRequireWildcard(_require);function _ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable});keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1,source;i<arguments.length;i++){source=null!=arguments[i]?arguments[i]:{};if(i%2){_ownKeys(source,!0).forEach(function(key){babelHelpers.defineProperty(target,key,source[key])})}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source))}else{_ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}}return target}const nativeShadow=!(window.ShadyDOM&&window.ShadyDOM.inUse);_exports.nativeShadow=nativeShadow;let nativeCssVariables_;/**
                          * @param {(ShadyCSSOptions | ShadyCSSInterface)=} settings
                          */function calcCssVariables(settings){if(settings&&settings.shimcssproperties){nativeCssVariables_=!1}else{// chrome 49 has semi-working css vars, check if box-shadow works
// safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782
// However, shim css custom properties are only supported with ShadyDOM enabled,
// so fall back on native if we do not detect ShadyDOM
// Edge 15: custom properties used in ::before and ::after will also be used in the parent element
// https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12414257/
nativeCssVariables_=nativeShadow||!!(!navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/)&&window.CSS&&CSS.supports&&CSS.supports("box-shadow","0 0 0 var(--foo)"))}}/** @type {string | undefined} */let cssBuild;_exports.cssBuild=cssBuild;if(window.ShadyCSS&&window.ShadyCSS.cssBuild!==void 0){_exports.cssBuild=cssBuild=window.ShadyCSS.cssBuild}/** @type {boolean} */const disableRuntime=!!(window.ShadyCSS&&window.ShadyCSS.disableRuntime);_exports.disableRuntime=disableRuntime;if(window.ShadyCSS&&window.ShadyCSS.nativeCss!==void 0){nativeCssVariables_=window.ShadyCSS.nativeCss}else if(window.ShadyCSS){calcCssVariables(window.ShadyCSS);// reset window variable to let ShadyCSS API take its place
window.ShadyCSS=void 0}else{calcCssVariables(window.WebComponents&&window.WebComponents.flags)}// Hack for type error under new type inference which doesn't like that
// nativeCssVariables is updated in a function and assigns the type
// `function(): ?` instead of `boolean`.
const nativeCssVariables=/** @type {boolean} */nativeCssVariables_;_exports.nativeCssVariables=nativeCssVariables;var styleSettings={nativeShadow:nativeShadow,get cssBuild(){return cssBuild},disableRuntime:disableRuntime,nativeCssVariables:nativeCssVariables};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */ /*
      Extremely simple css parser. Intended to be not more than what we need
      and definitely not necessarily correct =).
      */_exports.$styleSettings=styleSettings;"use strict";/** @unrestricted */class StyleNode{constructor(){/** @type {number} */this.start=0;/** @type {number} */this.end=0;/** @type {StyleNode} */this.previous=null;/** @type {StyleNode} */this.parent=null;/** @type {Array<StyleNode>} */this.rules=null;/** @type {string} */this.parsedCssText="";/** @type {string} */this.cssText="";/** @type {boolean} */this.atRule=!1;/** @type {number} */this.type=0;/** @type {string} */this.keyframesName="";/** @type {string} */this.selector="";/** @type {string} */this.parsedSelector=""}}/**
   * @param {string} text
   * @return {StyleNode}
   */_exports.StyleNode=StyleNode;function parse(text){text=clean(text);return parseCss(lex(text),text)}// remove stuff we don't care about that may hinder parsing
/**
 * @param {string} cssText
 * @return {string}
 */function clean(cssText){return cssText.replace(RX.comments,"").replace(RX.port,"")}// super simple {...} lexer that returns a node tree
/**
 * @param {string} text
 * @return {StyleNode}
 */function lex(text){let root=new StyleNode;root.start=0;root.end=text.length;let n=root;for(let i=0,l=text.length;i<l;i++){if(text[i]===OPEN_BRACE){if(!n.rules){n.rules=[]}let p=n,previous=p.rules[p.rules.length-1]||null;n=new StyleNode;n.start=i+1;n.parent=p;n.previous=previous;p.rules.push(n)}else if(text[i]===CLOSE_BRACE){n.end=i+1;n=n.parent||root}}return root}// add selectors/cssText to node tree
/**
 * @param {StyleNode} node
 * @param {string} text
 * @return {StyleNode}
 */function parseCss(node,text){let t=text.substring(node.start,node.end-1);node.parsedCssText=node.cssText=t.trim();if(node.parent){let ss=node.previous?node.previous.end:node.parent.start;t=text.substring(ss,node.start-1);t=_expandUnicodeEscapes(t);t=t.replace(RX.multipleSpaces," ");// TODO(sorvell): ad hoc; make selector include only after last ;
// helps with mixin syntax
t=t.substring(t.lastIndexOf(";")+1);let s=node.parsedSelector=node.selector=t.trim();node.atRule=0===s.indexOf(AT_START);// note, support a subset of rule types...
if(node.atRule){if(0===s.indexOf(MEDIA_START)){node.type=types.MEDIA_RULE}else if(s.match(RX.keyframesRule)){node.type=types.KEYFRAMES_RULE;node.keyframesName=node.selector.split(RX.multipleSpaces).pop()}}else{if(0===s.indexOf(VAR_START)){node.type=types.MIXIN_RULE}else{node.type=types.STYLE_RULE}}}let r$=node.rules;if(r$){for(let i=0,l=r$.length,r;i<l&&(r=r$[i]);i++){parseCss(r,text)}}return node}/**
   * conversion of sort unicode escapes with spaces like `\33 ` (and longer) into
   * expanded form that doesn't require trailing space `\000033`
   * @param {string} s
   * @return {string}
   */function _expandUnicodeEscapes(s){return s.replace(/\\([0-9a-f]{1,6})\s/gi,function(){let code=arguments[1],repeat=6-code.length;while(repeat--){code="0"+code}return"\\"+code})}/**
   * stringify parsed css.
   * @param {StyleNode} node
   * @param {boolean=} preserveProperties
   * @param {string=} text
   * @return {string}
   */function stringify(node,preserveProperties,text=""){// calc rule cssText
let cssText="";if(node.cssText||node.rules){let r$=node.rules;if(r$&&!_hasMixinRules(r$)){for(let i=0,l=r$.length,r;i<l&&(r=r$[i]);i++){cssText=stringify(r,preserveProperties,cssText)}}else{cssText=preserveProperties?node.cssText:removeCustomProps(node.cssText);cssText=cssText.trim();if(cssText){cssText="  "+cssText+"\n"}}}// emit rule if there is cssText
if(cssText){if(node.selector){text+=node.selector+" "+OPEN_BRACE+"\n"}text+=cssText;if(node.selector){text+=CLOSE_BRACE+"\n\n"}}return text}/**
   * @param {Array<StyleNode>} rules
   * @return {boolean}
   */function _hasMixinRules(rules){let r=rules[0];return!!r&&!!r.selector&&0===r.selector.indexOf(VAR_START)}/**
   * @param {string} cssText
   * @return {string}
   */function removeCustomProps(cssText){cssText=removeCustomPropAssignment(cssText);return removeCustomPropApply(cssText)}/**
   * @param {string} cssText
   * @return {string}
   */function removeCustomPropAssignment(cssText){return cssText.replace(RX.customProp,"").replace(RX.mixinProp,"")}/**
   * @param {string} cssText
   * @return {string}
   */function removeCustomPropApply(cssText){return cssText.replace(RX.mixinApply,"").replace(RX.varApply,"")}/** @enum {number} */const types={STYLE_RULE:1,KEYFRAMES_RULE:7,MEDIA_RULE:4,MIXIN_RULE:1e3};_exports.types=types;const OPEN_BRACE="{",CLOSE_BRACE="}",RX={comments:/\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim,port:/@import[^;]*;/gim,customProp:/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim,mixinProp:/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim,mixinApply:/@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim,varApply:/[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim,keyframesRule:/^@[^\s]*keyframes/,multipleSpaces:/\s+/g},VAR_START="--",MEDIA_START="@media",AT_START="@";var cssParse={StyleNode:StyleNode,parse:parse,stringify:stringify,removeCustomPropAssignment:removeCustomPropAssignment,types:types};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$cssParse=cssParse;const VAR_ASSIGN=/(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};{])+)|\{([^}]*)\}(?:(?=[;\s}])|$))/gi;_exports.VAR_ASSIGN=VAR_ASSIGN;const MIXIN_MATCH=/(?:^|\W+)@apply\s*\(?([^);\n]*)\)?/gi;_exports.MIXIN_MATCH=MIXIN_MATCH;const VAR_CONSUMED=/(--[\w-]+)\s*([:,;)]|$)/gi;_exports.VAR_CONSUMED=VAR_CONSUMED;const ANIMATION_MATCH=/(animation\s*:)|(animation-name\s*:)/;_exports.ANIMATION_MATCH=ANIMATION_MATCH;const MEDIA_MATCH=/@media\s(.*)/;_exports.MEDIA_MATCH=MEDIA_MATCH;const IS_VAR=/^--/;_exports.IS_VAR=IS_VAR;const BRACKETED=/\{[^}]*\}/g;_exports.BRACKETED=BRACKETED;const HOST_PREFIX="(?:^|[^.#[:])";_exports.HOST_PREFIX=HOST_PREFIX;const HOST_SUFFIX="($|[.:[\\s>+~])";_exports.HOST_SUFFIX=HOST_SUFFIX;var commonRegex={VAR_ASSIGN:VAR_ASSIGN,MIXIN_MATCH:MIXIN_MATCH,VAR_CONSUMED:VAR_CONSUMED,ANIMATION_MATCH:ANIMATION_MATCH,MEDIA_MATCH:MEDIA_MATCH,IS_VAR:IS_VAR,BRACKETED:BRACKETED,HOST_PREFIX:HOST_PREFIX,HOST_SUFFIX:HOST_SUFFIX};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$commonRegex=commonRegex;"use strict";/** @type {!Set<string>} */const styleTextSet=new Set,scopingAttribute="shady-unscoped";_exports.scopingAttribute=scopingAttribute;/**
                                                   * Add a specifically-marked style to the document directly, and only one copy of that style.
                                                   *
                                                   * @param {!HTMLStyleElement} style
                                                   * @return {undefined}
                                                   */function processUnscopedStyle(style){const text=style.textContent;if(!styleTextSet.has(text)){styleTextSet.add(text);const newStyle=style.cloneNode(!0);document.head.appendChild(newStyle)}}/**
   * Check if a style is supposed to be unscoped
   * @param {!HTMLStyleElement} style
   * @return {boolean} true if the style has the unscoping attribute
   */function isUnscopedStyle(style){return style.hasAttribute(scopingAttribute)}var unscopedStyleHandler={scopingAttribute:scopingAttribute,processUnscopedStyle:processUnscopedStyle,isUnscopedStyle:isUnscopedStyle};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$unscopedStyleHandler=unscopedStyleHandler;"use strict";function toCssText(rules,callback){if(!rules){return""}if("string"===typeof rules){rules=parse(rules)}if(callback){forEachRule(rules,callback)}return stringify(rules,nativeCssVariables)}/**
   * @param {HTMLStyleElement} style
   * @return {StyleNode}
   */function rulesForStyle(style){if(!style.__cssRules&&style.textContent){style.__cssRules=parse(style.textContent)}return style.__cssRules||null}// Tests if a rule is a keyframes selector, which looks almost exactly
// like a normal selector but is not (it has nothing to do with scoping
// for example).
/**
 * @param {StyleNode} rule
 * @return {boolean}
 */function isKeyframesSelector(rule){return!!rule.parent&&rule.parent.type===types.KEYFRAMES_RULE}/**
   * @param {StyleNode} node
   * @param {Function=} styleRuleCallback
   * @param {Function=} keyframesRuleCallback
   * @param {boolean=} onlyActiveRules
   */function forEachRule(node,styleRuleCallback,keyframesRuleCallback,onlyActiveRules){if(!node){return}let skipRules=!1,type=node.type;if(onlyActiveRules){if(type===types.MEDIA_RULE){let matchMedia=node.selector.match(MEDIA_MATCH);if(matchMedia){// if rule is a non matching @media rule, skip subrules
if(!window.matchMedia(matchMedia[1]).matches){skipRules=!0}}}}if(type===types.STYLE_RULE){styleRuleCallback(node)}else if(keyframesRuleCallback&&type===types.KEYFRAMES_RULE){keyframesRuleCallback(node)}else if(type===types.MIXIN_RULE){skipRules=!0}let r$=node.rules;if(r$&&!skipRules){for(let i=0,l=r$.length,r;i<l&&(r=r$[i]);i++){forEachRule(r,styleRuleCallback,keyframesRuleCallback,onlyActiveRules)}}}// add a string of cssText to the document.
/**
 * @param {string} cssText
 * @param {string} moniker
 * @param {Node} target
 * @param {Node} contextNode
 * @return {HTMLStyleElement}
 */function applyCss(cssText,moniker,target,contextNode){let style=createScopeStyle(cssText,moniker);applyStyle(style,target,contextNode);return style}/**
   * @param {string} cssText
   * @param {string} moniker
   * @return {HTMLStyleElement}
   */function createScopeStyle(cssText,moniker){let style=/** @type {HTMLStyleElement} */document.createElement("style");if(moniker){style.setAttribute("scope",moniker)}style.textContent=cssText;return style}/**
   * Track the position of the last added style for placing placeholders
   * @type {Node}
   */let lastHeadApplyNode=null;// insert a comment node as a styling position placeholder.
/**
 * @param {string} moniker
 * @return {!Comment}
 */function applyStylePlaceHolder(moniker){let placeHolder=document.createComment(" Shady DOM styles for "+moniker+" "),after=lastHeadApplyNode?lastHeadApplyNode.nextSibling:null,scope=document.head;scope.insertBefore(placeHolder,after||scope.firstChild);lastHeadApplyNode=placeHolder;return placeHolder}/**
   * @param {HTMLStyleElement} style
   * @param {?Node} target
   * @param {?Node} contextNode
   */function applyStyle(style,target,contextNode){target=target||document.head;let after=contextNode&&contextNode.nextSibling||target.firstChild;target.insertBefore(style,after);if(!lastHeadApplyNode){lastHeadApplyNode=style}else{// only update lastHeadApplyNode if the new style is inserted after the old lastHeadApplyNode
let position=style.compareDocumentPosition(lastHeadApplyNode);if(position===Node.DOCUMENT_POSITION_PRECEDING){lastHeadApplyNode=style}}}/**
   * @param {string} buildType
   * @return {boolean}
   */function isTargetedBuild(buildType){return nativeShadow?"shadow"===buildType:"shady"===buildType}/**
   * Walk from text[start] matching parens and
   * returns position of the outer end paren
   * @param {string} text
   * @param {number} start
   * @return {number}
   */function findMatchingParen(text,start){let level=0;for(let i=start,l=text.length;i<l;i++){if("("===text[i]){level++}else if(")"===text[i]){if(0===--level){return i}}}return-1}/**
   * @param {string} str
   * @param {function(string, string, string, string)} callback
   */function processVariableAndFallback(str,callback){// find 'var('
let start=str.indexOf("var(");if(-1===start){// no var?, everything is prefix
return callback(str,"","","")}//${prefix}var(${inner})${suffix}
let end=findMatchingParen(str,start+3),inner=str.substring(start+4,end),prefix=str.substring(0,start),suffix=processVariableAndFallback(str.substring(end+1),callback),comma=inner.indexOf(",");// value and fallback args should be trimmed to match in property lookup
if(-1===comma){// variable, no fallback
return callback(prefix,inner.trim(),"",suffix)}// var(${value},${fallback})
let value=inner.substring(0,comma).trim(),fallback=inner.substring(comma+1).trim();return callback(prefix,value,fallback,suffix)}/**
   * @param {Element} element
   * @param {string} value
   */function setElementClassRaw(element,value){// use native setAttribute provided by ShadyDOM when setAttribute is patched
if(nativeShadow){element.setAttribute("class",value)}else{window.ShadyDOM.nativeMethods.setAttribute.call(element,"class",value)}}/**
   * @type {function(*):*}
   */const wrap=window.ShadyDOM&&window.ShadyDOM.wrap||(node=>node);/**
                                                                                         * @param {Element | {is: string, extends: string}} element
                                                                                         * @return {{is: string, typeExtension: string}}
                                                                                         */_exports.wrap$1=wrap;function getIsExtends(element){let localName=element.localName,is="",typeExtension="";/*
                          NOTE: technically, this can be wrong for certain svg elements
                          with `-` in the name like `<font-face>`
                          */if(localName){if(-1<localName.indexOf("-")){is=localName}else{typeExtension=localName;is=element.getAttribute&&element.getAttribute("is")||""}}else{is=/** @type {?} */element.is;typeExtension=/** @type {?} */element.extends}return{is,typeExtension}}/**
   * @param {Element|DocumentFragment} element
   * @return {string}
   */function gatherStyleText(element){/** @type {!Array<string>} */const styleTextParts=[],styles=/** @type {!NodeList<!HTMLStyleElement>} */element.querySelectorAll("style");for(let i=0;i<styles.length;i++){const style=styles[i];if(isUnscopedStyle(style)){if(!nativeShadow){processUnscopedStyle(style);style.parentNode.removeChild(style)}}else{styleTextParts.push(style.textContent);style.parentNode.removeChild(style)}}return styleTextParts.join("").trim()}/**
   * Split a selector separated by commas into an array in a smart way
   * @param {string} selector
   * @return {!Array<string>}
   */function splitSelectorList(selector){const parts=[];let part="";for(let i=0;0<=i&&i<selector.length;i++){// A selector with parentheses will be one complete part
if("("===selector[i]){// find the matching paren
const end=findMatchingParen(selector,i);// push the paren block into the part
part+=selector.slice(i,end+1);// move the index to after the paren block
i=end}else if(","===selector[i]){parts.push(part);part=""}else{part+=selector[i]}}// catch any pieces after the last comma
if(part){parts.push(part)}return parts}const CSS_BUILD_ATTR="css-build";/**
                                     * Return the polymer-css-build "build type" applied to this element
                                     *
                                     * @param {!HTMLElement} element
                                     * @return {string} Can be "", "shady", or "shadow"
                                     */function getCssBuild(element){if(cssBuild!==void 0){return(/** @type {string} */cssBuild)}if(element.__cssBuild===void 0){// try attribute first, as it is the common case
const attrValue=element.getAttribute(CSS_BUILD_ATTR);if(attrValue){element.__cssBuild=attrValue}else{const buildComment=getBuildComment(element);if(""!==buildComment){// remove build comment so it is not needlessly copied into every element instance
removeBuildComment(element)}element.__cssBuild=buildComment}}return element.__cssBuild||""}/**
   * Check if the given element, either a <template> or <style>, has been processed
   * by polymer-css-build.
   *
   * If so, then we can make a number of optimizations:
   * - polymer-css-build will decompose mixins into individual CSS Custom Properties,
   * so the ApplyShim can be skipped entirely.
   * - Under native ShadowDOM, the style text can just be copied into each instance
   * without modification
   * - If the build is "shady" and ShadyDOM is in use, the styling does not need
   * scoping beyond the shimming of CSS Custom Properties
   *
   * @param {!HTMLElement} element
   * @return {boolean}
   */function elementHasBuiltCss(element){return""!==getCssBuild(element)}/**
   * For templates made with tagged template literals, polymer-css-build will
   * insert a comment of the form `<!--css-build:shadow-->`
   *
   * @param {!HTMLElement} element
   * @return {string}
   */function getBuildComment(element){const buildComment="template"===element.localName?/** @type {!HTMLTemplateElement} */element.content.firstChild:element.firstChild;if(buildComment instanceof Comment){const commentParts=buildComment.textContent.trim().split(":");if(commentParts[0]===CSS_BUILD_ATTR){return commentParts[1]}}return""}/**
   * Check if the css build status is optimal, and do no unneeded work.
   *
   * @param {string=} cssBuild CSS build status
   * @return {boolean} css build is optimal or not
   */function isOptimalCssBuild(cssBuild=""){// CSS custom property shim always requires work
if(""===cssBuild||!nativeCssVariables){return!1}return nativeShadow?"shadow"===cssBuild:"shady"===cssBuild}/**
   * @param {!HTMLElement} element
   */function removeBuildComment(element){const buildComment="template"===element.localName?/** @type {!HTMLTemplateElement} */element.content.firstChild:element.firstChild;buildComment.parentNode.removeChild(buildComment)}var styleUtil={toCssText:toCssText,rulesForStyle:rulesForStyle,isKeyframesSelector:isKeyframesSelector,forEachRule:forEachRule,applyCss:applyCss,createScopeStyle:createScopeStyle,applyStylePlaceHolder:applyStylePlaceHolder,applyStyle:applyStyle,isTargetedBuild:isTargetedBuild,findMatchingParen:findMatchingParen,processVariableAndFallback:processVariableAndFallback,setElementClassRaw:setElementClassRaw,wrap:wrap,getIsExtends:getIsExtends,gatherStyleText:gatherStyleText,splitSelectorList:splitSelectorList,getCssBuild:getCssBuild,elementHasBuiltCss:elementHasBuiltCss,getBuildComment:getBuildComment,isOptimalCssBuild:isOptimalCssBuild};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$styleUtil=styleUtil;"use strict";function updateNativeProperties(element,properties){// remove previous properties
for(let p in properties){// NOTE: for bc with shim, don't apply null values.
if(null===p){element.style.removeProperty(p)}else{element.style.setProperty(p,properties[p])}}}/**
   * @param {Element} element
   * @param {string} property
   * @return {string}
   */function getComputedStyleValue(element,property){/**
   * @const {string}
   */const value=window.getComputedStyle(element).getPropertyValue(property);if(!value){return""}else{return value.trim()}}/**
   * return true if `cssText` contains a mixin definition or consumption
   * @param {string} cssText
   * @return {boolean}
   */function detectMixin(cssText){const has=MIXIN_MATCH.test(cssText)||VAR_ASSIGN.test(cssText);// reset state of the regexes
MIXIN_MATCH.lastIndex=0;VAR_ASSIGN.lastIndex=0;return has}var commonUtils={updateNativeProperties:updateNativeProperties,getComputedStyleValue:getComputedStyleValue,detectMixin:detectMixin};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */ /*
       * The apply shim simulates the behavior of `@apply` proposed at
       * https://tabatkins.github.io/specs/css-apply-rule/.
       * The approach is to convert a property like this:
       *
       *    --foo: {color: red; background: blue;}
       *
       * to this:
       *
       *    --foo_-_color: red;
       *    --foo_-_background: blue;
       *
       * Then where `@apply --foo` is used, that is converted to:
       *
       *    color: var(--foo_-_color);
       *    background: var(--foo_-_background);
       *
       * This approach generally works but there are some issues and limitations.
       * Consider, for example, that somewhere *between* where `--foo` is set and used,
       * another element sets it to:
       *
       *    --foo: { border: 2px solid red; }
       *
       * We must now ensure that the color and background from the previous setting
       * do not apply. This is accomplished by changing the property set to this:
       *
       *    --foo_-_border: 2px solid red;
       *    --foo_-_color: initial;
       *    --foo_-_background: initial;
       *
       * This works but introduces one new issue.
       * Consider this setup at the point where the `@apply` is used:
       *
       *    background: orange;
       *    `@apply` --foo;
       *
       * In this case the background will be unset (initial) rather than the desired
       * `orange`. We address this by altering the property set to use a fallback
       * value like this:
       *
       *    color: var(--foo_-_color);
       *    background: var(--foo_-_background, orange);
       *    border: var(--foo_-_border);
       *
       * Note that the default is retained in the property set and the `background` is
       * the desired `orange`. This leads us to a limitation.
       *
       * Limitation 1:
      
       * Only properties in the rule where the `@apply`
       * is used are considered as default values.
       * If another rule matches the element and sets `background` with
       * less specificity than the rule in which `@apply` appears,
       * the `background` will not be set.
       *
       * Limitation 2:
       *
       * When using Polymer's `updateStyles` api, new properties may not be set for
       * `@apply` properties.
      
      */_exports.$commonUtils=commonUtils;"use strict";const APPLY_NAME_CLEAN=/;\s*/m,INITIAL_INHERIT=/^\s*(initial)|(inherit)\s*$/,IMPORTANT=/\s*!important/,MIXIN_VAR_SEP="_-_";/**
                              * @typedef {!Object<string, string>}
                              */let PropertyEntry,DependantsEntry,MixinMapEntry;// eslint-disable-line no-unused-vars
/**
 * @typedef {!Object<string, boolean>}
 */ // eslint-disable-line no-unused-vars
// map of mixin to property names
// --foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}
class MixinMap{constructor(){/** @type {!Object<string, !MixinMapEntry>} */this._map={}}/**
     * @param {string} name
     * @param {!PropertyEntry} props
     */set(name,props){name=name.trim();this._map[name]={properties:props,dependants:{}}}/**
     * @param {string} name
     * @return {MixinMapEntry}
     */get(name){name=name.trim();return this._map[name]||null}}/**
   * Callback for when an element is marked invalid
   * @type {?function(string)}
   */let invalidCallback=null;/** @unrestricted */class ApplyShim{constructor(){/** @type {?string} */this._currentElement=null;/** @type {HTMLMetaElement} */this._measureElement=null;this._map=new MixinMap}/**
     * return true if `cssText` contains a mixin definition or consumption
     * @param {string} cssText
     * @return {boolean}
     */detectMixin(cssText){return detectMixin(cssText)}/**
     * Gather styles into one style for easier processing
     * @param {!HTMLTemplateElement} template
     * @return {HTMLStyleElement}
     */gatherStyles(template){const styleText=gatherStyleText(template.content);if(styleText){const style=/** @type {!HTMLStyleElement} */document.createElement("style");style.textContent=styleText;template.content.insertBefore(style,template.content.firstChild);return style}return null}/**
     * @param {!HTMLTemplateElement} template
     * @param {string} elementName
     * @return {StyleNode}
     */transformTemplate(template,elementName){if(template._gatheredStyle===void 0){template._gatheredStyle=this.gatherStyles(template)}/** @type {HTMLStyleElement} */const style=template._gatheredStyle;return style?this.transformStyle(style,elementName):null}/**
     * @param {!HTMLStyleElement} style
     * @param {string} elementName
     * @return {StyleNode}
     */transformStyle(style,elementName=""){let ast=rulesForStyle(style);this.transformRules(ast,elementName);style.textContent=toCssText(ast);return ast}/**
     * @param {!HTMLStyleElement} style
     * @return {StyleNode}
     */transformCustomStyle(style){let ast=rulesForStyle(style);forEachRule(ast,rule=>{if(":root"===rule.selector){rule.selector="html"}this.transformRule(rule)});style.textContent=toCssText(ast);return ast}/**
     * @param {StyleNode} rules
     * @param {string} elementName
     */transformRules(rules,elementName){this._currentElement=elementName;forEachRule(rules,r=>{this.transformRule(r)});this._currentElement=null}/**
     * @param {!StyleNode} rule
     */transformRule(rule){rule.cssText=this.transformCssText(rule.parsedCssText,rule);// :root was only used for variable assignment in property shim,
// but generates invalid selectors with real properties.
// replace with `:host > *`, which serves the same effect
if(":root"===rule.selector){rule.selector=":host > *"}}/**
     * @param {string} cssText
     * @param {!StyleNode} rule
     * @return {string}
     */transformCssText(cssText,rule){// produce variables
cssText=cssText.replace(VAR_ASSIGN,(matchText,propertyName,valueProperty,valueMixin)=>this._produceCssProperties(matchText,propertyName,valueProperty,valueMixin,rule));// consume mixins
return this._consumeCssProperties(cssText,rule)}/**
     * @param {string} property
     * @return {string}
     */_getInitialValueForProperty(property){if(!this._measureElement){this._measureElement=/** @type {HTMLMetaElement} */document.createElement("meta");this._measureElement.setAttribute("apply-shim-measure","");this._measureElement.style.all="initial";document.head.appendChild(this._measureElement)}return window.getComputedStyle(this._measureElement).getPropertyValue(property)}/**
     * Walk over all rules before this rule to find fallbacks for mixins
     *
     * @param {!StyleNode} startRule
     * @return {!Object}
     */_fallbacksFromPreviousRules(startRule){// find the "top" rule
let topRule=startRule;while(topRule.parent){topRule=topRule.parent}const fallbacks={};let seenStartRule=!1;forEachRule(topRule,r=>{// stop when we hit the input rule
seenStartRule=seenStartRule||r===startRule;if(seenStartRule){return}// NOTE: Only matching selectors are "safe" for this fallback processing
// It would be prohibitive to run `matchesSelector()` on each selector,
// so we cheat and only check if the same selector string is used, which
// guarantees things like specificity matching
if(r.selector===startRule.selector){Object.assign(fallbacks,this._cssTextToMap(r.parsedCssText))}});return fallbacks}/**
     * replace mixin consumption with variable consumption
     * @param {string} text
     * @param {!StyleNode=} rule
     * @return {string}
     */_consumeCssProperties(text,rule){/** @type {Array} */let m=null;// loop over text until all mixins with defintions have been applied
while(m=MIXIN_MATCH.exec(text)){let matchText=m[0],mixinName=m[1],idx=m.index,applyPos=idx+matchText.indexOf("@apply"),afterApplyPos=idx+matchText.length,textBeforeApply=text.slice(0,applyPos),textAfterApply=text.slice(afterApplyPos),defaults=rule?this._fallbacksFromPreviousRules(rule):{};Object.assign(defaults,this._cssTextToMap(textBeforeApply));let replacement=this._atApplyToCssProperties(mixinName,defaults);// use regex match position to replace mixin, keep linear processing time
text=`${textBeforeApply}${replacement}${textAfterApply}`;// move regex search to _after_ replacement
MIXIN_MATCH.lastIndex=idx+replacement.length}return text}/**
     * produce variable consumption at the site of mixin consumption
     * `@apply` --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))
     * Example:
     *  border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)
     *
     * @param {string} mixinName
     * @param {Object} fallbacks
     * @return {string}
     */_atApplyToCssProperties(mixinName,fallbacks){mixinName=mixinName.replace(APPLY_NAME_CLEAN,"");let vars=[],mixinEntry=this._map.get(mixinName);// if we depend on a mixin before it is created
// make a sentinel entry in the map to add this element as a dependency for when it is defined.
if(!mixinEntry){this._map.set(mixinName,{});mixinEntry=this._map.get(mixinName)}if(mixinEntry){if(this._currentElement){mixinEntry.dependants[this._currentElement]=!0}let p,parts,f;const properties=mixinEntry.properties;for(p in properties){f=fallbacks&&fallbacks[p];parts=[p,": var(",mixinName,MIXIN_VAR_SEP,p];if(f){parts.push(",",f.replace(IMPORTANT,""))}parts.push(")");if(IMPORTANT.test(properties[p])){parts.push(" !important")}vars.push(parts.join(""))}}return vars.join("; ")}/**
     * @param {string} property
     * @param {string} value
     * @return {string}
     */_replaceInitialOrInherit(property,value){let match=INITIAL_INHERIT.exec(value);if(match){if(match[1]){// initial
// replace `initial` with the concrete initial value for this property
value=this._getInitialValueForProperty(property)}else{// inherit
// with this purposfully illegal value, the variable will be invalid at
// compute time (https://www.w3.org/TR/css-variables/#invalid-at-computed-value-time)
// and for inheriting values, will behave similarly
// we cannot support the same behavior for non inheriting values like 'border'
value="apply-shim-inherit"}}return value}/**
     * "parse" a mixin definition into a map of properties and values
     * cssTextToMap('border: 2px solid black') -> ('border', '2px solid black')
     * @param {string} text
     * @param {boolean=} replaceInitialOrInherit
     * @return {!Object<string, string>}
     */_cssTextToMap(text,replaceInitialOrInherit=!1){let props=text.split(";"),property,value,out={};for(let i=0,p,sp;i<props.length;i++){p=props[i];if(p){sp=p.split(":");// ignore lines that aren't definitions like @media
if(1<sp.length){property=sp[0].trim();// some properties may have ':' in the value, like data urls
value=sp.slice(1).join(":");if(replaceInitialOrInherit){value=this._replaceInitialOrInherit(property,value)}out[property]=value}}}return out}/**
     * @param {MixinMapEntry} mixinEntry
     */_invalidateMixinEntry(mixinEntry){if(!invalidCallback){return}for(let elementName in mixinEntry.dependants){if(elementName!==this._currentElement){invalidCallback(elementName)}}}/**
     * @param {string} matchText
     * @param {string} propertyName
     * @param {?string} valueProperty
     * @param {?string} valueMixin
     * @param {!StyleNode} rule
     * @return {string}
     */_produceCssProperties(matchText,propertyName,valueProperty,valueMixin,rule){// handle case where property value is a mixin
if(valueProperty){// form: --mixin2: var(--mixin1), where --mixin1 is in the map
processVariableAndFallback(valueProperty,(prefix,value)=>{if(value&&this._map.get(value)){valueMixin=`@apply ${value};`}})}if(!valueMixin){return matchText}let mixinAsProperties=this._consumeCssProperties(""+valueMixin,rule),prefix=matchText.slice(0,matchText.indexOf("--")),mixinValues=this._cssTextToMap(mixinAsProperties,!0),combinedProps=mixinValues,mixinEntry=this._map.get(propertyName),oldProps=mixinEntry&&mixinEntry.properties;if(oldProps){// NOTE: since we use mixin, the map of properties is updated here
// and this is what we want.
combinedProps=Object.assign(Object.create(oldProps),mixinValues)}else{this._map.set(propertyName,combinedProps)}let out=[],p,v,needToInvalidate=!1;for(p in combinedProps){v=mixinValues[p];// if property not defined by current mixin, set initial
if(v===void 0){v="initial"}if(oldProps&&!(p in oldProps)){needToInvalidate=!0}out.push(`${propertyName}${MIXIN_VAR_SEP}${p}: ${v}`)}if(needToInvalidate){this._invalidateMixinEntry(mixinEntry)}if(mixinEntry){mixinEntry.properties=combinedProps}// because the mixinMap is global, the mixin might conflict with
// a different scope's simple variable definition:
// Example:
// some style somewhere:
// --mixin1:{ ... }
// --mixin2: var(--mixin1);
// some other element:
// --mixin1: 10px solid red;
// --foo: var(--mixin1);
// In this case, we leave the original variable definition in place.
if(valueProperty){prefix=`${matchText};${prefix}`}return`${prefix}${out.join("; ")};`}}/* exports */ /* eslint-disable no-self-assign */_exports.$applyShimDefault=ApplyShim;ApplyShim.prototype.detectMixin=ApplyShim.prototype.detectMixin;ApplyShim.prototype.transformStyle=ApplyShim.prototype.transformStyle;ApplyShim.prototype.transformCustomStyle=ApplyShim.prototype.transformCustomStyle;ApplyShim.prototype.transformRules=ApplyShim.prototype.transformRules;ApplyShim.prototype.transformRule=ApplyShim.prototype.transformRule;ApplyShim.prototype.transformTemplate=ApplyShim.prototype.transformTemplate;ApplyShim.prototype._separator=MIXIN_VAR_SEP;/* eslint-enable no-self-assign */Object.defineProperty(ApplyShim.prototype,"invalidCallback",{/** @return {?function(string)} */get(){return invalidCallback},/** @param {?function(string)} cb */set(cb){invalidCallback=cb}});var applyShim={default:ApplyShim};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$applyShim$1=applyShim;"use strict";/**
               * @const {!Object<string, !HTMLTemplateElement>}
               */const templateMap={};_exports.$templateMapDefault=templateMap;var templateMap$1={default:templateMap};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$templateMap=templateMap$1;"use strict";/*
               * Utilities for handling invalidating apply-shim mixins for a given template.
               *
               * The invalidation strategy involves keeping track of the "current" version of a template's mixins, and updating that count when a mixin is invalidated.
               * The template
               */ /** @const {string} */const CURRENT_VERSION="_applyShimCurrentVersion",NEXT_VERSION="_applyShimNextVersion",VALIDATING_VERSION="_applyShimValidatingVersion",promise=Promise.resolve();/** @const {string} */ /**
                                    * @param {string} elementName
                                    */function invalidate(elementName){let template=templateMap[elementName];if(template){invalidateTemplate(template)}}/**
   * This function can be called multiple times to mark a template invalid
   * and signal that the style inside must be regenerated.
   *
   * Use `startValidatingTemplate` to begin an asynchronous validation cycle.
   * During that cycle, call `templateIsValidating` to see if the template must
   * be revalidated
   * @param {HTMLTemplateElement} template
   */function invalidateTemplate(template){// default the current version to 0
template[CURRENT_VERSION]=template[CURRENT_VERSION]||0;// ensure the "validating for" flag exists
template[VALIDATING_VERSION]=template[VALIDATING_VERSION]||0;// increment the next version
template[NEXT_VERSION]=(template[NEXT_VERSION]||0)+1}/**
   * @param {string} elementName
   * @return {boolean}
   */function isValid(elementName){let template=templateMap[elementName];if(template){return templateIsValid(template)}return!0}/**
   * @param {HTMLTemplateElement} template
   * @return {boolean}
   */function templateIsValid(template){return template[CURRENT_VERSION]===template[NEXT_VERSION]}/**
   * @param {string} elementName
   * @return {boolean}
   */function isValidating(elementName){let template=templateMap[elementName];if(template){return templateIsValidating(template)}return!1}/**
   * Returns true if the template is currently invalid and `startValidating` has been called since the last invalidation.
   * If false, the template must be validated.
   * @param {HTMLTemplateElement} template
   * @return {boolean}
   */function templateIsValidating(template){return!templateIsValid(template)&&template[VALIDATING_VERSION]===template[NEXT_VERSION]}/**
   * the template is marked as `validating` for one microtask so that all instances
   * found in the tree crawl of `applyStyle` will update themselves,
   * but the template will only be updated once.
   * @param {string} elementName
  */function startValidating(elementName){let template=templateMap[elementName];startValidatingTemplate(template)}/**
   * Begin an asynchronous invalidation cycle.
   * This should be called after every validation of a template
   *
   * After one microtask, the template will be marked as valid until the next call to `invalidateTemplate`
   * @param {HTMLTemplateElement} template
   */function startValidatingTemplate(template){// remember that the current "next version" is the reason for this validation cycle
template[VALIDATING_VERSION]=template[NEXT_VERSION];// however, there only needs to be one async task to clear the counters
if(!template._validating){template._validating=!0;promise.then(function(){// sync the current version to let future invalidations cause a refresh cycle
template[CURRENT_VERSION]=template[NEXT_VERSION];template._validating=!1})}}/**
   * @return {boolean}
   */function elementsAreInvalid(){for(let elementName in templateMap){let template=templateMap[elementName];if(!templateIsValid(template)){return!0}}return!1}var applyShimUtils={invalidate:invalidate,invalidateTemplate:invalidateTemplate,isValid:isValid,templateIsValid:templateIsValid,isValidating:isValidating,templateIsValidating:templateIsValidating,startValidating:startValidating,startValidatingTemplate:startValidatingTemplate,elementsAreInvalid:elementsAreInvalid};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$applyShimUtils=applyShimUtils;"use strict";/** @type {Promise<void>} */let readyPromise=null,whenReady=window.HTMLImports&&window.HTMLImports.whenReady||null,resolveFn;/** @type {?function(?function())} */ /**
                * @param {?function()} callback
                */function documentWait(callback){requestAnimationFrame(function(){if(whenReady){whenReady(callback)}else{if(!readyPromise){readyPromise=new Promise(resolve=>{resolveFn=resolve});if("complete"===document.readyState){resolveFn()}else{document.addEventListener("readystatechange",()=>{if("complete"===document.readyState){resolveFn()}})}}readyPromise.then(function(){callback&&callback()})}})}var documentWait$1={default:documentWait};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$documentWait=documentWait$1;"use strict";let CustomStyleProvider;_exports.CustomStyleProvider=CustomStyleProvider;const SEEN_MARKER="__seenByShadyCSS",CACHED_STYLE="__shadyCSSCachedStyle";/** @type {?function(!HTMLStyleElement)} */let transformFn=null,validateFn=null;/** @type {?function()} */ /**
                       This interface is provided to add document-level <style> elements to ShadyCSS for processing.
                       These styles must be processed by ShadyCSS to simulate ShadowRoot upper-bound encapsulation from outside styles
                       In addition, these styles may also need to be processed for @apply rules and CSS Custom Properties
                       
                       To add document-level styles to ShadyCSS, one can call `ShadyCSS.addDocumentStyle(styleElement)` or `ShadyCSS.addDocumentStyle({getStyle: () => styleElement})`
                       
                       In addition, if the process used to discover document-level styles can be synchronously flushed, one should set `ShadyCSS.documentStyleFlush`.
                       This function will be called when calculating styles.
                       
                       An example usage of the document-level styling api can be found in `examples/document-style-lib.js`
                       
                       @unrestricted
                       */class CustomStyleInterface{constructor(){/** @type {!Array<!CustomStyleProvider>} */this.customStyles=[];this.enqueued=!1;// NOTE(dfreedm): use quotes here to prevent closure inlining to `function(){}`;
documentWait(()=>{if(window.ShadyCSS.flushCustomStyles){window.ShadyCSS.flushCustomStyles()}})}/**
     * Queue a validation for new custom styles to batch style recalculations
     */enqueueDocumentValidation(){if(this.enqueued||!validateFn){return}this.enqueued=!0;documentWait(validateFn)}/**
     * @param {!HTMLStyleElement} style
     */addCustomStyle(style){if(!style[SEEN_MARKER]){style[SEEN_MARKER]=!0;this.customStyles.push(style);this.enqueueDocumentValidation()}}/**
     * @param {!CustomStyleProvider} customStyle
     * @return {HTMLStyleElement}
     */getStyleForCustomStyle(customStyle){if(customStyle[CACHED_STYLE]){return customStyle[CACHED_STYLE]}let style;if(customStyle.getStyle){style=customStyle.getStyle()}else{style=customStyle}return style}/**
     * @return {!Array<!CustomStyleProvider>}
     */processStyles(){const cs=this.customStyles;for(let i=0;i<cs.length;i++){const customStyle=cs[i];if(customStyle[CACHED_STYLE]){continue}const style=this.getStyleForCustomStyle(customStyle);if(style){// HTMLImports polyfill may have cloned the style into the main document,
// which is referenced with __appliedElement.
const styleToTransform=/** @type {!HTMLStyleElement} */style.__appliedElement||style;if(transformFn){transformFn(styleToTransform)}customStyle[CACHED_STYLE]=styleToTransform}}return cs}}/* eslint-disable no-self-assign */_exports.$customStyleInterfaceDefault=CustomStyleInterface;CustomStyleInterface.prototype.addCustomStyle=CustomStyleInterface.prototype.addCustomStyle;CustomStyleInterface.prototype.getStyleForCustomStyle=CustomStyleInterface.prototype.getStyleForCustomStyle;CustomStyleInterface.prototype.processStyles=CustomStyleInterface.prototype.processStyles;/* eslint-enable no-self-assign */Object.defineProperties(CustomStyleInterface.prototype,{transformCallback:{/** @return {?function(!HTMLStyleElement)} */get(){return transformFn},/** @param {?function(!HTMLStyleElement)} fn */set(fn){transformFn=fn}},validateCallback:{/** @return {?function()} */get(){return validateFn},/**
     * @param {?function()} fn
     * @this {CustomStyleInterface}
     */set(fn){let needsEnqueue=!1;if(!validateFn){needsEnqueue=!0}validateFn=fn;if(needsEnqueue){this.enqueueDocumentValidation()}}}});/** @typedef {{
     * customStyles: !Array<!CustomStyleProvider>,
     * addCustomStyle: function(!CustomStyleProvider),
     * getStyleForCustomStyle: function(!CustomStyleProvider): HTMLStyleElement,
     * findStyles: function(),
     * transformCallback: ?function(!HTMLStyleElement),
     * validateCallback: ?function()
     * }}
     */const CustomStyleInterfaceInterface={};_exports.CustomStyleInterfaceInterface=CustomStyleInterfaceInterface;var customStyleInterface={CustomStyleProvider:CustomStyleProvider,default:CustomStyleInterface,CustomStyleInterfaceInterface:CustomStyleInterfaceInterface};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$customStyleInterface$1=customStyleInterface;"use strict";const applyShim$1=new ApplyShim;class ApplyShimInterface{constructor(){/** @type {?CustomStyleInterfaceInterface} */this.customStyleInterface=null;applyShim$1.invalidCallback=invalidate}ensure(){if(this.customStyleInterface){return}if(window.ShadyCSS.CustomStyleInterface){this.customStyleInterface=/** @type {!CustomStyleInterfaceInterface} */window.ShadyCSS.CustomStyleInterface;this.customStyleInterface.transformCallback=style=>{applyShim$1.transformCustomStyle(style)};this.customStyleInterface.validateCallback=()=>{requestAnimationFrame(()=>{if(this.customStyleInterface.enqueued){this.flushCustomStyles()}})}}}/**
     * @param {!HTMLTemplateElement} template
     * @param {string} elementName
     */prepareTemplate(template,elementName){this.ensure();if(elementHasBuiltCss(template)){return}templateMap[elementName]=template;let ast=applyShim$1.transformTemplate(template,elementName);// save original style ast to use for revalidating instances
template._styleAst=ast}flushCustomStyles(){this.ensure();if(!this.customStyleInterface){return}let styles=this.customStyleInterface.processStyles();if(!this.customStyleInterface.enqueued){return}for(let i=0;i<styles.length;i++){let cs=styles[i],style=this.customStyleInterface.getStyleForCustomStyle(cs);if(style){applyShim$1.transformCustomStyle(style)}}this.customStyleInterface.enqueued=!1}/**
     * @param {HTMLElement} element
     * @param {Object=} properties
     */styleSubtree(element,properties){this.ensure();if(properties){updateNativeProperties(element,properties)}if(element.shadowRoot){this.styleElement(element);let shadowChildren=/** @type {!ParentNode} */element.shadowRoot.children||element.shadowRoot.childNodes;for(let i=0;i<shadowChildren.length;i++){this.styleSubtree(/** @type {HTMLElement} */shadowChildren[i])}}else{let children=element.children||element.childNodes;for(let i=0;i<children.length;i++){this.styleSubtree(/** @type {HTMLElement} */children[i])}}}/**
     * @param {HTMLElement} element
     */styleElement(element){this.ensure();let{is}=getIsExtends(element),template=templateMap[is];if(template&&elementHasBuiltCss(template)){return}if(template&&!templateIsValid(template)){// only revalidate template once
if(!templateIsValidating(template)){this.prepareTemplate(template,is);startValidatingTemplate(template)}// update this element instance
let root=element.shadowRoot;if(root){let style=/** @type {HTMLStyleElement} */root.querySelector("style");if(style){// reuse the template's style ast, it has all the original css text
style.__cssRules=template._styleAst;style.textContent=toCssText(template._styleAst)}}}}/**
     * @param {Object=} properties
     */styleDocument(properties){this.ensure();this.styleSubtree(document.body,properties)}}if(!window.ShadyCSS||!window.ShadyCSS.ScopingShim){const applyShimInterface=new ApplyShimInterface;let CustomStyleInterface=window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface;/** @suppress {duplicate} */_exports.$customStyleInterfaceDefault=CustomStyleInterface;window.ShadyCSS={/**
     * @param {!HTMLTemplateElement} template
     * @param {string} elementName
     * @param {string=} elementExtends
     */prepareTemplate(template,elementName,elementExtends){// eslint-disable-line no-unused-vars
applyShimInterface.flushCustomStyles();applyShimInterface.prepareTemplate(template,elementName)},/**
     * @param {!HTMLTemplateElement} template
     * @param {string} elementName
     * @param {string=} elementExtends
     */prepareTemplateStyles(template,elementName,elementExtends){window.ShadyCSS.prepareTemplate(template,elementName,elementExtends)},/**
     * @param {!HTMLTemplateElement} template
     * @param {string} elementName
     */prepareTemplateDom(template,elementName){},// eslint-disable-line no-unused-vars
/**
     * @param {!HTMLElement} element
     * @param {Object=} properties
     */styleSubtree(element,properties){applyShimInterface.flushCustomStyles();applyShimInterface.styleSubtree(element,properties)},/**
     * @param {!HTMLElement} element
     */styleElement(element){applyShimInterface.flushCustomStyles();applyShimInterface.styleElement(element)},/**
     * @param {Object=} properties
     */styleDocument(properties){applyShimInterface.flushCustomStyles();applyShimInterface.styleDocument(properties)},/**
     * @param {Element} element
     * @param {string} property
     * @return {string}
     */getComputedStyleValue(element,property){return getComputedStyleValue(element,property)},flushCustomStyles(){applyShimInterface.flushCustomStyles()},nativeCss:nativeCssVariables,nativeShadow:nativeShadow,cssBuild:cssBuild,disableRuntime:disableRuntime};if(CustomStyleInterface){window.ShadyCSS.CustomStyleInterface=CustomStyleInterface}}window.ShadyCSS.ApplyShim=applyShim$1;/**
                                         @license
                                         Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
                                         This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
                                         The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
                                         The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
                                         Code distributed by Google as part of the polymer project is also
                                         subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
                                         */ /* eslint-disable no-unused-vars */ /**
                                                                                 * When using Closure Compiler, JSCompiler_renameProperty(property, object) is replaced by the munged name for object[property]
                                                                                 * We cannot alias this function, so we have to use a small shim that has the same behavior when not compiling.
                                                                                 *
                                                                                 * @param {string} prop Property name
                                                                                 * @param {?Object} obj Reference object
                                                                                 * @return {string} Potentially renamed property name
                                                                                 */window.JSCompiler_renameProperty=function(prop,obj){return prop};/* eslint-enable */let CSS_URL_RX=/(url\()([^)]*)(\))/g,ABS_URL=/(^\/[^\/])|(^#)|(^[\w-\d]*:)/,workingURL,resolveDoc;/**
                 * Resolves the given URL against the provided `baseUri'.
                 *
                 * Note that this function performs no resolution for URLs that start
                 * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose
                 * URL resolution, use `window.URL`.
                 *
                 * @param {string} url Input URL to resolve
                 * @param {?string=} baseURI Base URI to resolve the URL against
                 * @return {string} resolved URL
                 */function resolveUrl(url,baseURI){if(url&&ABS_URL.test(url)){return url}if("//"===url){return url}// Lazy feature detection.
if(workingURL===void 0){workingURL=!1;try{const u=new URL("b","http://a");u.pathname="c%20d";workingURL="http://a/c%20d"===u.href}catch(e){// silently fail
}}if(!baseURI){baseURI=document.baseURI||window.location.href}if(workingURL){try{return new URL(url,baseURI).href}catch(e){// Bad url or baseURI structure. Do not attempt to resolve.
return url}}// Fallback to creating an anchor into a disconnected document.
if(!resolveDoc){resolveDoc=document.implementation.createHTMLDocument("temp");resolveDoc.base=resolveDoc.createElement("base");resolveDoc.head.appendChild(resolveDoc.base);resolveDoc.anchor=resolveDoc.createElement("a");resolveDoc.body.appendChild(resolveDoc.anchor)}resolveDoc.base.href=baseURI;resolveDoc.anchor.href=url;return resolveDoc.anchor.href||url}/**
   * Resolves any relative URL's in the given CSS text against the provided
   * `ownerDocument`'s `baseURI`.
   *
   * @param {string} cssText CSS text to process
   * @param {string} baseURI Base URI to resolve the URL against
   * @return {string} Processed CSS text with resolved URL's
   */function resolveCss(cssText,baseURI){return cssText.replace(CSS_URL_RX,function(m,pre,url,post){return pre+"'"+resolveUrl(url.replace(/["']/g,""),baseURI)+"'"+post})}/**
   * Returns a path from a given `url`. The path includes the trailing
   * `/` from the url.
   *
   * @param {string} url Input URL to transform
   * @return {string} resolved path
   */function pathFromUrl(url){return url.substring(0,url.lastIndexOf("/")+1)}var resolveUrl$1={resolveUrl:resolveUrl,resolveCss:resolveCss,pathFromUrl:pathFromUrl};_exports.$resolveUrl=resolveUrl$1;const useShadow=!window.ShadyDOM;_exports.useShadow=useShadow;const useNativeCSSProperties=!!(!window.ShadyCSS||window.ShadyCSS.nativeCss);_exports.useNativeCSSProperties=useNativeCSSProperties;const useNativeCustomElements=!window.customElements.polyfillWrapFlushCallback;/**
                                                                                          * Globally settable property that is automatically assigned to
                                                                                          * `ElementMixin` instances, useful for binding in templates to
                                                                                          * make URL's relative to an application's root.  Defaults to the main
                                                                                          * document URL, but can be overridden by users.  It may be useful to set
                                                                                          * `rootPath` to provide a stable application mount path when
                                                                                          * using client side routing.
                                                                                          */_exports.useNativeCustomElements=useNativeCustomElements;let rootPath=pathFromUrl(document.baseURI||window.location.href);/**
                                                                              * Sets the global rootPath property used by `ElementMixin` and
                                                                              * available via `rootPath`.
                                                                              *
                                                                              * @param {string} path The new root path
                                                                              * @return {void}
                                                                              */_exports.rootPath=rootPath;const setRootPath=function(path){_exports.rootPath=rootPath=path};/**
    * A global callback used to sanitize any value before inserting it into the DOM.
    * The callback signature is:
    *
    *  function sanitizeDOMValue(value, name, type, node) { ... }
    *
    * Where:
    *
    * `value` is the value to sanitize.
    * `name` is the name of an attribute or property (for example, href).
    * `type` indicates where the value is being inserted: one of property, attribute, or text.
    * `node` is the node where the value is being inserted.
    *
    * @type {(function(*,string,string,Node):*)|undefined}
    */_exports.setRootPath=setRootPath;let sanitizeDOMValue=window.Polymer&&window.Polymer.sanitizeDOMValue||void 0;/**
                                                                                               * Sets the global sanitizeDOMValue available via this module's exported
                                                                                               * `sanitizeDOMValue` variable.
                                                                                               *
                                                                                               * @param {(function(*,string,string,Node):*)|undefined} newSanitizeDOMValue the global sanitizeDOMValue callback
                                                                                               * @return {void}
                                                                                               */_exports.sanitizeDOMValue=sanitizeDOMValue;const setSanitizeDOMValue=function(newSanitizeDOMValue){_exports.sanitizeDOMValue=sanitizeDOMValue=newSanitizeDOMValue};/**
    * Globally settable property to make Polymer Gestures use passive TouchEvent listeners when recognizing gestures.
    * When set to `true`, gestures made from touch will not be able to prevent scrolling, allowing for smoother
    * scrolling performance.
    * Defaults to `false` for backwards compatibility.
    */_exports.setSanitizeDOMValue=setSanitizeDOMValue;let passiveTouchGestures=!1;/**
                                          * Sets `passiveTouchGestures` globally for all elements using Polymer Gestures.
                                          *
                                          * @param {boolean} usePassive enable or disable passive touch gestures globally
                                          * @return {void}
                                          */_exports.passiveTouchGestures=passiveTouchGestures;const setPassiveTouchGestures=function(usePassive){_exports.passiveTouchGestures=passiveTouchGestures=usePassive};/**
    * Setting to ensure Polymer template evaluation only occurs based on tempates
    * defined in trusted script.  When true, `<dom-module>` re-registration is
    * disallowed, `<dom-bind>` is disabled, and `<dom-if>`/`<dom-repeat>`
    * templates will only evaluate in the context of a trusted element template.
    */_exports.setPassiveTouchGestures=setPassiveTouchGestures;let strictTemplatePolicy=!1;/**
                                          * Sets `strictTemplatePolicy` globally for all elements
                                          *
                                          * @param {boolean} useStrictPolicy enable or disable strict template policy
                                          *   globally
                                          * @return {void}
                                          */_exports.strictTemplatePolicy=strictTemplatePolicy;const setStrictTemplatePolicy=function(useStrictPolicy){_exports.strictTemplatePolicy=strictTemplatePolicy=useStrictPolicy};/**
    * Setting to enable dom-module lookup from Polymer.Element.  By default,
    * templates must be defined in script using the `static get template()`
    * getter and the `html` tag function.  To enable legacy loading of templates
    * via dom-module, set this flag to true.
    */_exports.setStrictTemplatePolicy=setStrictTemplatePolicy;let allowTemplateFromDomModule=!1;/**
                                                * Sets `lookupTemplateFromDomModule` globally for all elements
                                                *
                                                * @param {boolean} allowDomModule enable or disable template lookup
                                                *   globally
                                                * @return {void}
                                                */_exports.allowTemplateFromDomModule=allowTemplateFromDomModule;const setAllowTemplateFromDomModule=function(allowDomModule){_exports.allowTemplateFromDomModule=allowTemplateFromDomModule=allowDomModule};/**
    * Setting to skip processing style includes and re-writing urls in css styles.
    * Normally "included" styles are pulled into the element and all urls in styles
    * are re-written to be relative to the containing script url.
    * If no includes or relative urls are used in styles, these steps can be
    * skipped as an optimization.
    */_exports.setAllowTemplateFromDomModule=setAllowTemplateFromDomModule;let legacyOptimizations=!1;/**
                                         * Sets `legacyOptimizations` globally for all elements to enable optimizations
                                         * when only legacy based elements are used.
                                         *
                                         * @param {boolean} useLegacyOptimizations enable or disable legacy optimizations
                                         * includes and url rewriting
                                         * @return {void}
                                         */_exports.legacyOptimizations=legacyOptimizations;const setLegacyOptimizations=function(useLegacyOptimizations){_exports.legacyOptimizations=legacyOptimizations=useLegacyOptimizations};/**
    * Setting to perform initial rendering synchronously when running under ShadyDOM.
    * This matches the behavior of Polymer 1.
    */_exports.setLegacyOptimizations=setLegacyOptimizations;let syncInitialRender=!1;/**
                                       * Sets `syncInitialRender` globally for all elements to enable synchronous
                                       * initial rendering.
                                       *
                                       * @param {boolean} useSyncInitialRender enable or disable synchronous initial
                                       * rendering globally.
                                       * @return {void}
                                       */_exports.syncInitialRender=syncInitialRender;const setSyncInitialRender=function(useSyncInitialRender){_exports.syncInitialRender=syncInitialRender=useSyncInitialRender};/**
    * Setting to cancel synthetic click events fired by older mobile browsers. Modern browsers
    * no longer fire synthetic click events, and the cancellation behavior can interfere
    * when programmatically clicking on elements.
    */_exports.setSyncInitialRender=setSyncInitialRender;let cancelSyntheticClickEvents=!0;/**
                                               * Sets `setCancelSyntheticEvents` globally for all elements to cancel synthetic click events.
                                               *
                                               * @param {boolean} useCancelSyntheticClickEvents enable or disable cancelling synthetic
                                               * events
                                               * @return {void}
                                               */_exports.cancelSyntheticClickEvents=cancelSyntheticClickEvents;const setCancelSyntheticClickEvents=function(useCancelSyntheticClickEvents){_exports.cancelSyntheticClickEvents=cancelSyntheticClickEvents=useCancelSyntheticClickEvents};_exports.setCancelSyntheticClickEvents=setCancelSyntheticClickEvents;var settings={useShadow:useShadow,useNativeCSSProperties:useNativeCSSProperties,useNativeCustomElements:useNativeCustomElements,get rootPath(){return rootPath},setRootPath:setRootPath,get sanitizeDOMValue(){return sanitizeDOMValue},setSanitizeDOMValue:setSanitizeDOMValue,get passiveTouchGestures(){return passiveTouchGestures},setPassiveTouchGestures:setPassiveTouchGestures,get strictTemplatePolicy(){return strictTemplatePolicy},setStrictTemplatePolicy:setStrictTemplatePolicy,get allowTemplateFromDomModule(){return allowTemplateFromDomModule},setAllowTemplateFromDomModule:setAllowTemplateFromDomModule,get legacyOptimizations(){return legacyOptimizations},setLegacyOptimizations:setLegacyOptimizations,get syncInitialRender(){return syncInitialRender},setSyncInitialRender:setSyncInitialRender,get cancelSyntheticClickEvents(){return cancelSyntheticClickEvents},setCancelSyntheticClickEvents:setCancelSyntheticClickEvents};_exports.$settings=settings;let dedupeId=0;/**
                   * @constructor
                   * @extends {Function}
                   * @private
                   */function MixinFunction(){}/** @type {(WeakMap | undefined)} */MixinFunction.prototype.__mixinApplications;/** @type {(Object | undefined)} */MixinFunction.prototype.__mixinSet;/* eslint-disable valid-jsdoc */ /**
                                                                      * Wraps an ES6 class expression mixin such that the mixin is only applied
                                                                      * if it has not already been applied its base argument. Also memoizes mixin
                                                                      * applications.
                                                                      *
                                                                      * @template T
                                                                      * @param {T} mixin ES6 class expression mixin to wrap
                                                                      * @return {T}
                                                                      * @suppress {invalidCasts}
                                                                      */const dedupingMixin=function(mixin){let mixinApplications=/** @type {!MixinFunction} */mixin.__mixinApplications;if(!mixinApplications){mixinApplications=new WeakMap;/** @type {!MixinFunction} */mixin.__mixinApplications=mixinApplications}// maintain a unique id for each mixin
let mixinDedupeId=dedupeId++;function dedupingMixin(base){let baseSet=/** @type {!MixinFunction} */base.__mixinSet;if(baseSet&&baseSet[mixinDedupeId]){return base}let map=mixinApplications,extended=map.get(base);if(!extended){extended=/** @type {!Function} */mixin(base);map.set(base,extended)}// copy inherited mixin set from the extended class, or the base class
// NOTE: we avoid use of Set here because some browser (IE11)
// cannot extend a base Set via the constructor.
let mixinSet=Object.create(/** @type {!MixinFunction} */extended.__mixinSet||baseSet||null);mixinSet[mixinDedupeId]=!0;/** @type {!MixinFunction} */extended.__mixinSet=mixinSet;return extended}return dedupingMixin};/* eslint-enable valid-jsdoc */_exports.dedupingMixin=dedupingMixin;var mixin={dedupingMixin:dedupingMixin};_exports.$mixin=mixin;let modules={},lcModules={};/**
                     * Sets a dom-module into the global registry by id.
                     *
                     * @param {string} id dom-module id
                     * @param {DomModule} module dom-module instance
                     * @return {void}
                     */function setModule(id,module){// store id separate from lowercased id so that
// in all cases mixedCase id will stored distinctly
// and lowercase version is a fallback
modules[id]=lcModules[id.toLowerCase()]=module}/**
   * Retrieves a dom-module from the global registry by id.
   *
   * @param {string} id dom-module id
   * @return {DomModule!} dom-module instance
   */function findModule(id){return modules[id]||lcModules[id.toLowerCase()]}function styleOutsideTemplateCheck(inst){if(inst.querySelector("style")){console.warn("dom-module %s has style outside template",inst.id)}}/**
   * The `dom-module` element registers the dom it contains to the name given
   * by the module's id attribute. It provides a unified database of dom
   * accessible via its static `import` API.
   *
   * A key use case of `dom-module` is for providing custom element `<template>`s
   * via HTML imports that are parsed by the native HTML parser, that can be
   * relocated during a bundling pass and still looked up by `id`.
   *
   * Example:
   *
   *     <dom-module id="foo">
   *       <img src="stuff.png">
   *     </dom-module>
   *
   * Then in code in some other location that cannot access the dom-module above
   *
   *     let img = customElements.get('dom-module').import('foo', 'img');
   *
   * @customElement
   * @extends HTMLElement
   * @summary Custom element that provides a registry of relocatable DOM content
   *   by `id` that is agnostic to bundling.
   * @unrestricted
   */class DomModule extends HTMLElement{/** @override */static get observedAttributes(){return["id"]}/**
     * Retrieves the element specified by the css `selector` in the module
     * registered by `id`. For example, this.import('foo', 'img');
     * @param {string} id The id of the dom-module in which to search.
     * @param {string=} selector The css selector by which to find the element.
     * @return {Element} Returns the element which matches `selector` in the
     * module registered at the specified `id`.
     *
     * @export
     * @nocollapse Referred to indirectly in style-gather.js
     */static import(id,selector){if(id){let m=findModule(id);if(m&&selector){return m.querySelector(selector)}return m}return null}/* eslint-disable no-unused-vars */ /**
                                         * @param {string} name Name of attribute.
                                         * @param {?string} old Old value of attribute.
                                         * @param {?string} value Current value of attribute.
                                         * @param {?string} namespace Attribute namespace.
                                         * @return {void}
                                         * @override
                                         */attributeChangedCallback(name,old,value,namespace){if(old!==value){this.register()}}/* eslint-enable no-unused-args */ /**
                                        * The absolute URL of the original location of this `dom-module`.
                                        *
                                        * This value will differ from this element's `ownerDocument` in the
                                        * following ways:
                                        * - Takes into account any `assetpath` attribute added during bundling
                                        *   to indicate the original location relative to the bundled location
                                        * - Uses the HTMLImports polyfill's `importForElement` API to ensure
                                        *   the path is relative to the import document's location since
                                        *   `ownerDocument` is not currently polyfilled
                                        */get assetpath(){// Don't override existing assetpath.
if(!this.__assetpath){// note: assetpath set via an attribute must be relative to this
// element's location; accomodate polyfilled HTMLImports
const owner=window.HTMLImports&&HTMLImports.importForElement?HTMLImports.importForElement(this)||document:this.ownerDocument,url=resolveUrl(this.getAttribute("assetpath")||"",owner.baseURI);this.__assetpath=pathFromUrl(url)}return this.__assetpath}/**
     * Registers the dom-module at a given id. This method should only be called
     * when a dom-module is imperatively created. For
     * example, `document.createElement('dom-module').register('foo')`.
     * @param {string=} id The id at which to register the dom-module.
     * @return {void}
     */register(id){id=id||this.id;if(id){// Under strictTemplatePolicy, reject and null out any re-registered
// dom-module since it is ambiguous whether first-in or last-in is trusted
if(strictTemplatePolicy&&findModule(id)!==void 0){setModule(id,null);throw new Error(`strictTemplatePolicy: dom-module ${id} re-registered`)}this.id=id;setModule(id,this);styleOutsideTemplateCheck(this)}}}_exports.DomModule=DomModule;DomModule.prototype.modules=modules;customElements.define("dom-module",DomModule);var domModule={DomModule:DomModule};_exports.$domModule=domModule;const MODULE_STYLE_LINK_SELECTOR="link[rel=import][type~=css]",INCLUDE_ATTR="include",SHADY_UNSCOPED_ATTR="shady-unscoped";/**
                                               * @param {string} moduleId .
                                               * @return {?DomModule} .
                                               */function importModule(moduleId){return(/** @type {?DomModule} */DomModule.import(moduleId))}function styleForImport(importDoc){// NOTE: polyfill affordance.
// under the HTMLImports polyfill, there will be no 'body',
// but the import pseudo-doc can be used directly.
let container=importDoc.body?importDoc.body:importDoc;const importCss=resolveCss(container.textContent,importDoc.baseURI),style=document.createElement("style");style.textContent=importCss;return style}/** @typedef {{assetpath: string}} */let templateWithAssetPath;// eslint-disable-line no-unused-vars
/**
 * Returns a list of <style> elements in a space-separated list of `dom-module`s.
 *
 * @function
 * @param {string} moduleIds List of dom-module id's within which to
 * search for css.
 * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements
 */function stylesFromModules(moduleIds){const modules=moduleIds.trim().split(/\s+/),styles=[];for(let i=0;i<modules.length;i++){styles.push(...stylesFromModule(modules[i]))}return styles}/**
   * Returns a list of <style> elements in a given `dom-module`.
   * Styles in a `dom-module` can come either from `<style>`s within the
   * first `<template>`, or else from one or more
   * `<link rel="import" type="css">` links outside the template.
   *
   * @param {string} moduleId dom-module id to gather styles from
   * @return {!Array<!HTMLStyleElement>} Array of contained styles.
   */function stylesFromModule(moduleId){const m=importModule(moduleId);if(!m){console.warn("Could not find style data in module named",moduleId);return[]}if(m._styles===void 0){const styles=[..._stylesFromModuleImports(m)],template=/** @type {?HTMLTemplateElement} */m.querySelector("template");// module imports: <link rel="import" type="css">
if(template){styles.push(...stylesFromTemplate(template,/** @type {templateWithAssetPath} */m.assetpath))}m._styles=styles}return m._styles}/**
   * Returns the `<style>` elements within a given template.
   *
   * @param {!HTMLTemplateElement} template Template to gather styles from
   * @param {string=} baseURI baseURI for style content
   * @return {!Array<!HTMLStyleElement>} Array of styles
   */function stylesFromTemplate(template,baseURI){if(!template._styles){const styles=[],e$=template.content.querySelectorAll("style");// if element is a template, get content from its .content
for(let i=0;i<e$.length;i++){let e=e$[i],include=e.getAttribute(INCLUDE_ATTR);// support style sharing by allowing styles to "include"
// other dom-modules that contain styling
if(include){styles.push(...stylesFromModules(include).filter(function(item,index,self){return self.indexOf(item)===index}))}if(baseURI){e.textContent=resolveCss(e.textContent,/** @type {string} */baseURI)}styles.push(e)}template._styles=styles}return template._styles}/**
   * Returns a list of <style> elements  from stylesheets loaded via `<link rel="import" type="css">` links within the specified `dom-module`.
   *
   * @param {string} moduleId Id of `dom-module` to gather CSS from
   * @return {!Array<!HTMLStyleElement>} Array of contained styles.
   */function stylesFromModuleImports(moduleId){let m=importModule(moduleId);return m?_stylesFromModuleImports(m):[]}/**
   * @param {!HTMLElement} module dom-module element that could contain `<link rel="import" type="css">` styles
   * @return {!Array<!HTMLStyleElement>} Array of contained styles
   */function _stylesFromModuleImports(module){const styles=[],p$=module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);for(let i=0,p;i<p$.length;i++){p=p$[i];if(p.import){const importDoc=p.import,unscoped=p.hasAttribute(SHADY_UNSCOPED_ATTR);if(unscoped&&!importDoc._unscopedStyle){const style=styleForImport(importDoc);style.setAttribute(SHADY_UNSCOPED_ATTR,"");importDoc._unscopedStyle=style}else if(!importDoc._style){importDoc._style=styleForImport(importDoc)}styles.push(unscoped?importDoc._unscopedStyle:importDoc._style)}}return styles}/**
   *
   * Returns CSS text of styles in a space-separated list of `dom-module`s.
   * Note: This method is deprecated, use `stylesFromModules` instead.
   *
   * @deprecated
   * @param {string} moduleIds List of dom-module id's within which to
   * search for css.
   * @return {string} Concatenated CSS content from specified `dom-module`s
   */function cssFromModules(moduleIds){let modules=moduleIds.trim().split(/\s+/),cssText="";for(let i=0;i<modules.length;i++){cssText+=cssFromModule(modules[i])}return cssText}/**
   * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`
   * can come either from `<style>`s within the first `<template>`, or else
   * from one or more `<link rel="import" type="css">` links outside the
   * template.
   *
   * Any `<styles>` processed are removed from their original location.
   * Note: This method is deprecated, use `styleFromModule` instead.
   *
   * @deprecated
   * @param {string} moduleId dom-module id to gather styles from
   * @return {string} Concatenated CSS content from specified `dom-module`
   */function cssFromModule(moduleId){let m=importModule(moduleId);if(m&&m._cssText===void 0){// module imports: <link rel="import" type="css">
let cssText=_cssFromModuleImports(m),t=/** @type {?HTMLTemplateElement} */m.querySelector("template");// include css from the first template in the module
if(t){cssText+=cssFromTemplate(t,/** @type {templateWithAssetPath} */m.assetpath)}m._cssText=cssText||null}if(!m){console.warn("Could not find style data in module named",moduleId)}return m&&m._cssText||""}/**
   * Returns CSS text of `<styles>` within a given template.
   *
   * Any `<styles>` processed are removed from their original location.
   * Note: This method is deprecated, use `styleFromTemplate` instead.
   *
   * @deprecated
   * @param {!HTMLTemplateElement} template Template to gather styles from
   * @param {string} baseURI Base URI to resolve the URL against
   * @return {string} Concatenated CSS content from specified template
   */function cssFromTemplate(template,baseURI){let cssText="";const e$=stylesFromTemplate(template,baseURI);// if element is a template, get content from its .content
for(let i=0,e;i<e$.length;i++){e=e$[i];if(e.parentNode){e.parentNode.removeChild(e)}cssText+=e.textContent}return cssText}/**
   * Returns CSS text from stylesheets loaded via `<link rel="import" type="css">`
   * links within the specified `dom-module`.
   *
   * Note: This method is deprecated, use `stylesFromModuleImports` instead.
   *
   * @deprecated
   *
   * @param {string} moduleId Id of `dom-module` to gather CSS from
   * @return {string} Concatenated CSS content from links in specified `dom-module`
   */function cssFromModuleImports(moduleId){let m=importModule(moduleId);return m?_cssFromModuleImports(m):""}/**
   * @deprecated
   * @param {!HTMLElement} module dom-module element that could contain `<link rel="import" type="css">` styles
   * @return {string} Concatenated CSS content from links in the dom-module
   */function _cssFromModuleImports(module){let cssText="",styles=_stylesFromModuleImports(module);for(let i=0;i<styles.length;i++){cssText+=styles[i].textContent}return cssText}var styleGather={stylesFromModules:stylesFromModules,stylesFromModule:stylesFromModule,stylesFromTemplate:stylesFromTemplate,stylesFromModuleImports:stylesFromModuleImports,cssFromModules:cssFromModules,cssFromModule:cssFromModule,cssFromTemplate:cssFromTemplate,cssFromModuleImports:cssFromModuleImports};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */ /* eslint-disable valid-jsdoc */ /**
                                        * Node wrapper to ensure ShadowDOM safe operation regardless of polyfill
                                        * presence or mode. Note that with the introduction of `ShadyDOM.noPatch`,
                                        * a node wrapper must be used to access ShadowDOM API.
                                        * This is similar to using `Polymer.dom` but relies exclusively
                                        * on the presence of the ShadyDOM polyfill rather than requiring the loading
                                        * of legacy (Polymer.dom) API.
                                        * @type {function(Node):Node}
                                        */_exports.$styleGather=styleGather;const wrap$1=window.ShadyDOM&&window.ShadyDOM.noPatch&&window.ShadyDOM.wrap?window.ShadyDOM.wrap:window.ShadyDOM?n=>ShadyDOM.patch(n):n=>n;_exports.wrap=wrap$1;var wrap$2={wrap:wrap$1};_exports.$wrap=wrap$2;function isPath(path){return 0<=path.indexOf(".")}/**
   * Returns the root property name for the given path.
   *
   * Example:
   *
   * ```
   * root('foo.bar.baz') // 'foo'
   * root('foo')         // 'foo'
   * ```
   *
   * @param {string} path Path string
   * @return {string} Root property name
   */function root(path){let dotIndex=path.indexOf(".");if(-1===dotIndex){return path}return path.slice(0,dotIndex)}/**
   * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not
   * Returns true if the given path is an ancestor of the base path.
   *
   * Example:
   *
   * ```
   * isAncestor('foo.bar', 'foo')         // true
   * isAncestor('foo.bar', 'foo.bar')     // false
   * isAncestor('foo.bar', 'foo.bar.baz') // false
   * ```
   *
   * @param {string} base Path string to test against.
   * @param {string} path Path string to test.
   * @return {boolean} True if `path` is an ancestor of `base`.
   */function isAncestor(base,path){//     base.startsWith(path + '.');
return 0===base.indexOf(path+".")}/**
   * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant
   *
   * Example:
   *
   * ```
   * isDescendant('foo.bar', 'foo.bar.baz') // true
   * isDescendant('foo.bar', 'foo.bar')     // false
   * isDescendant('foo.bar', 'foo')         // false
   * ```
   *
   * @param {string} base Path string to test against.
   * @param {string} path Path string to test.
   * @return {boolean} True if `path` is a descendant of `base`.
   */function isDescendant(base,path){//     path.startsWith(base + '.');
return 0===path.indexOf(base+".")}/**
   * Replaces a previous base path with a new base path, preserving the
   * remainder of the path.
   *
   * User must ensure `path` has a prefix of `base`.
   *
   * Example:
   *
   * ```
   * translate('foo.bar', 'zot', 'foo.bar.baz') // 'zot.baz'
   * ```
   *
   * @param {string} base Current base string to remove
   * @param {string} newBase New base string to replace with
   * @param {string} path Path to translate
   * @return {string} Translated string
   */function translate(base,newBase,path){return newBase+path.slice(base.length)}/**
   * @param {string} base Path string to test against
   * @param {string} path Path string to test
   * @return {boolean} True if `path` is equal to `base`
   */function matches(base,path){return base===path||isAncestor(base,path)||isDescendant(base,path)}/**
   * Converts array-based paths to flattened path.  String-based paths
   * are returned as-is.
   *
   * Example:
   *
   * ```
   * normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'
   * normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'
   * ```
   *
   * @param {string | !Array<string|number>} path Input path
   * @return {string} Flattened path
   */function normalize(path){if(Array.isArray(path)){let parts=[];for(let i=0,args;i<path.length;i++){args=path[i].toString().split(".");for(let j=0;j<args.length;j++){parts.push(args[j])}}return parts.join(".")}else{return path}}/**
   * Splits a path into an array of property names. Accepts either arrays
   * of path parts or strings.
   *
   * Example:
   *
   * ```
   * split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']
   * split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']
   * ```
   *
   * @param {string | !Array<string|number>} path Input path
   * @return {!Array<string>} Array of path parts
   * @suppress {checkTypes}
   */function split(path){if(Array.isArray(path)){return normalize(path).split(".")}return path.toString().split(".")}/**
   * Reads a value from a path.  If any sub-property in the path is `undefined`,
   * this method returns `undefined` (will never throw.
   *
   * @param {Object} root Object from which to dereference path from
   * @param {string | !Array<string|number>} path Path to read
   * @param {Object=} info If an object is provided to `info`, the normalized
   *  (flattened) path will be set to `info.path`.
   * @return {*} Value at path, or `undefined` if the path could not be
   *  fully dereferenced.
   */function get(root,path,info){let prop=root,parts=split(path);// Loop over path parts[0..n-1] and dereference
for(let i=0;i<parts.length;i++){if(!prop){return}let part=parts[i];prop=prop[part]}if(info){info.path=parts.join(".")}return prop}/**
   * Sets a value to a path.  If any sub-property in the path is `undefined`,
   * this method will no-op.
   *
   * @param {Object} root Object from which to dereference path from
   * @param {string | !Array<string|number>} path Path to set
   * @param {*} value Value to set to path
   * @return {string | undefined} The normalized version of the input path
   */function set(root,path,value){let prop=root,parts=split(path),last=parts[parts.length-1];if(1<parts.length){// Loop over path parts[0..n-2] and dereference
for(let i=0,part;i<parts.length-1;i++){part=parts[i];prop=prop[part];if(!prop){return}}// Set value to object at end of path
prop[last]=value}else{// Simple property set
prop[path]=value}return parts.join(".")}/**
   * Returns true if the given string is a structured data path (has dots).
   *
   * This function is deprecated.  Use `isPath` instead.
   *
   * Example:
   *
   * ```
   * isDeep('foo.bar.baz') // true
   * isDeep('foo')         // false
   * ```
   *
   * @deprecated
   * @param {string} path Path string
   * @return {boolean} True if the string contained one or more dots
   */const isDeep=isPath;_exports.isDeep=isDeep;var path={isPath:isPath,root:root,isAncestor:isAncestor,isDescendant:isDescendant,translate:translate,matches:matches,normalize:normalize,split:split,get:get,set:set,isDeep:isDeep};_exports.$path=path;const caseMap={},DASH_TO_CAMEL=/-[a-z]/g,CAMEL_TO_DASH=/([A-Z])/g;/**
                                   * @fileoverview Module with utilities for converting between "dash-case" and
                                   * "camelCase" identifiers.
                                   */ /**
                                       * Converts "dash-case" identifier (e.g. `foo-bar-baz`) to "camelCase"
                                       * (e.g. `fooBarBaz`).
                                       *
                                       * @param {string} dash Dash-case identifier
                                       * @return {string} Camel-case representation of the identifier
                                       */function dashToCamelCase(dash){return caseMap[dash]||(caseMap[dash]=0>dash.indexOf("-")?dash:dash.replace(DASH_TO_CAMEL,m=>m[1].toUpperCase()))}/**
   * Converts "camelCase" identifier (e.g. `fooBarBaz`) to "dash-case"
   * (e.g. `foo-bar-baz`).
   *
   * @param {string} camel Camel-case identifier
   * @return {string} Dash-case representation of the identifier
   */function camelToDashCase(camel){return caseMap[camel]||(caseMap[camel]=camel.replace(CAMEL_TO_DASH,"-$1").toLowerCase())}var caseMap$1={dashToCamelCase:dashToCamelCase,camelToDashCase:camelToDashCase};_exports.$caseMap=caseMap$1;let microtaskCurrHandle=0,microtaskLastHandle=0,microtaskCallbacks=[],microtaskNodeContent=0,microtaskNode=document.createTextNode("");new window.MutationObserver(microtaskFlush).observe(microtaskNode,{characterData:!0});function microtaskFlush(){const len=microtaskCallbacks.length;for(let i=0,cb;i<len;i++){cb=microtaskCallbacks[i];if(cb){try{cb()}catch(e){setTimeout(()=>{throw e})}}}microtaskCallbacks.splice(0,len);microtaskLastHandle+=len}/**
   * Async interface wrapper around `setTimeout`.
   *
   * @namespace
   * @summary Async interface wrapper around `setTimeout`.
   */const timeOut={/**
   * Returns a sub-module with the async interface providing the provided
   * delay.
   *
   * @memberof timeOut
   * @param {number=} delay Time to wait before calling callbacks in ms
   * @return {!AsyncInterface} An async timeout interface
   */after(delay){return{run(fn){return window.setTimeout(fn,delay)},cancel(handle){window.clearTimeout(handle)}}},/**
   * Enqueues a function called in the next task.
   *
   * @memberof timeOut
   * @param {!Function} fn Callback to run
   * @param {number=} delay Delay in milliseconds
   * @return {number} Handle used for canceling task
   */run(fn,delay){return window.setTimeout(fn,delay)},/**
   * Cancels a previously enqueued `timeOut` callback.
   *
   * @memberof timeOut
   * @param {number} handle Handle returned from `run` of callback to cancel
   * @return {void}
   */cancel(handle){window.clearTimeout(handle)}};_exports.timeOut=timeOut;const animationFrame={/**
   * Enqueues a function called at `requestAnimationFrame` timing.
   *
   * @memberof animationFrame
   * @param {function(number):void} fn Callback to run
   * @return {number} Handle used for canceling task
   */run(fn){return window.requestAnimationFrame(fn)},/**
   * Cancels a previously enqueued `animationFrame` callback.
   *
   * @memberof animationFrame
   * @param {number} handle Handle returned from `run` of callback to cancel
   * @return {void}
   */cancel(handle){window.cancelAnimationFrame(handle)}};_exports.animationFrame=animationFrame;const idlePeriod={/**
   * Enqueues a function called at `requestIdleCallback` timing.
   *
   * @memberof idlePeriod
   * @param {function(!IdleDeadline):void} fn Callback to run
   * @return {number} Handle used for canceling task
   */run(fn){return window.requestIdleCallback?window.requestIdleCallback(fn):window.setTimeout(fn,16)},/**
   * Cancels a previously enqueued `idlePeriod` callback.
   *
   * @memberof idlePeriod
   * @param {number} handle Handle returned from `run` of callback to cancel
   * @return {void}
   */cancel(handle){window.cancelIdleCallback?window.cancelIdleCallback(handle):window.clearTimeout(handle)}};_exports.idlePeriod=idlePeriod;const microTask={/**
   * Enqueues a function called at microtask timing.
   *
   * @memberof microTask
   * @param {!Function=} callback Callback to run
   * @return {number} Handle used for canceling task
   */run(callback){microtaskNode.textContent=microtaskNodeContent++;microtaskCallbacks.push(callback);return microtaskCurrHandle++},/**
   * Cancels a previously enqueued `microTask` callback.
   *
   * @memberof microTask
   * @param {number} handle Handle returned from `run` of callback to cancel
   * @return {void}
   */cancel(handle){const idx=handle-microtaskLastHandle;if(0<=idx){if(!microtaskCallbacks[idx]){throw new Error("invalid async handle: "+handle)}microtaskCallbacks[idx]=null}}};_exports.microTask=microTask;var async={timeOut:timeOut,animationFrame:animationFrame,idlePeriod:idlePeriod,microTask:microTask};_exports.$async=async;const microtask=microTask,PropertiesChanged=dedupingMixin(/**
                                                 * @template T
                                                 * @param {function(new:T)} superClass Class to apply mixin to.
                                                 * @return {function(new:T)} superClass with mixin applied.
                                                 */superClass=>{/**
   * @polymer
   * @mixinClass
   * @implements {Polymer_PropertiesChanged}
   * @unrestricted
   */class PropertiesChanged extends superClass{/**
     * Creates property accessors for the given property names.
     * @param {!Object} props Object whose keys are names of accessors.
     * @return {void}
     * @protected
     * @nocollapse
     */static createProperties(props){const proto=this.prototype;for(let prop in props){// don't stomp an existing accessor
if(!(prop in proto)){proto._createPropertyAccessor(prop)}}}/**
       * Returns an attribute name that corresponds to the given property.
       * The attribute name is the lowercased property name. Override to
       * customize this mapping.
       * @param {string} property Property to convert
       * @return {string} Attribute name corresponding to the given property.
       *
       * @protected
       * @nocollapse
       */static attributeNameForProperty(property){return property.toLowerCase()}/**
       * Override point to provide a type to which to deserialize a value to
       * a given property.
       * @param {string} name Name of property
       *
       * @protected
       * @nocollapse
       */static typeForProperty(name){}//eslint-disable-line no-unused-vars
/**
     * Creates a setter/getter pair for the named property with its own
     * local storage.  The getter returns the value in the local storage,
     * and the setter calls `_setProperty`, which updates the local storage
     * for the property and enqueues a `_propertiesChanged` callback.
     *
     * This method may be called on a prototype or an instance.  Calling
     * this method may overwrite a property value that already exists on
     * the prototype/instance by creating the accessor.
     *
     * @param {string} property Name of the property
     * @param {boolean=} readOnly When true, no setter is created; the
     *   protected `_setProperty` function must be used to set the property
     * @return {void}
     * @protected
     * @override
     */_createPropertyAccessor(property,readOnly){this._addPropertyToAttributeMap(property);if(!this.hasOwnProperty("__dataHasAccessor")){this.__dataHasAccessor=Object.assign({},this.__dataHasAccessor)}if(!this.__dataHasAccessor[property]){this.__dataHasAccessor[property]=!0;this._definePropertyAccessor(property,readOnly)}}/**
       * Adds the given `property` to a map matching attribute names
       * to property names, using `attributeNameForProperty`. This map is
       * used when deserializing attribute values to properties.
       *
       * @param {string} property Name of the property
       * @override
       */_addPropertyToAttributeMap(property){if(!this.hasOwnProperty("__dataAttributes")){this.__dataAttributes=Object.assign({},this.__dataAttributes)}if(!this.__dataAttributes[property]){const attr=this.constructor.attributeNameForProperty(property);this.__dataAttributes[attr]=property}}/**
       * Defines a property accessor for the given property.
       * @param {string} property Name of the property
       * @param {boolean=} readOnly When true, no setter is created
       * @return {void}
       * @override
       */_definePropertyAccessor(property,readOnly){Object.defineProperty(this,property,{/* eslint-disable valid-jsdoc */ /** @this {PropertiesChanged} */get(){return this._getProperty(property)},/** @this {PropertiesChanged} */set:readOnly?function(){}:function(value){this._setProperty(property,value)}/* eslint-enable */})}constructor(){super();/** @type {boolean} */this.__dataEnabled=!1;this.__dataReady=!1;this.__dataInvalid=!1;this.__data={};this.__dataPending=null;this.__dataOld=null;this.__dataInstanceProps=null;this.__serializing=!1;this._initializeProperties()}/**
       * Lifecycle callback called when properties are enabled via
       * `_enableProperties`.
       *
       * Users may override this function to implement behavior that is
       * dependent on the element having its property data initialized, e.g.
       * from defaults (initialized from `constructor`, `_initializeProperties`),
       * `attributeChangedCallback`, or values propagated from host e.g. via
       * bindings.  `super.ready()` must be called to ensure the data system
       * becomes enabled.
       *
       * @return {void}
       * @public
       * @override
       */ready(){this.__dataReady=!0;this._flushProperties()}/**
       * Initializes the local storage for property accessors.
       *
       * Provided as an override point for performing any setup work prior
       * to initializing the property accessor system.
       *
       * @return {void}
       * @protected
       * @override
       */_initializeProperties(){// Capture instance properties; these will be set into accessors
// during first flush. Don't set them here, since we want
// these to overwrite defaults/constructor assignments
for(let p in this.__dataHasAccessor){if(this.hasOwnProperty(p)){this.__dataInstanceProps=this.__dataInstanceProps||{};this.__dataInstanceProps[p]=this[p];delete this[p]}}}/**
       * Called at ready time with bag of instance properties that overwrote
       * accessors when the element upgraded.
       *
       * The default implementation sets these properties back into the
       * setter at ready time.  This method is provided as an override
       * point for customizing or providing more efficient initialization.
       *
       * @param {Object} props Bag of property values that were overwritten
       *   when creating property accessors.
       * @return {void}
       * @protected
       * @override
       */_initializeInstanceProperties(props){Object.assign(this,props)}/**
       * Updates the local storage for a property (via `_setPendingProperty`)
       * and enqueues a `_proeprtiesChanged` callback.
       *
       * @param {string} property Name of the property
       * @param {*} value Value to set
       * @return {void}
       * @protected
       * @override
       */_setProperty(property,value){if(this._setPendingProperty(property,value)){this._invalidateProperties()}}/**
       * Returns the value for the given property.
       * @param {string} property Name of property
       * @return {*} Value for the given property
       * @protected
       * @override
       */_getProperty(property){return this.__data[property]}/* eslint-disable no-unused-vars */ /**
                                           * Updates the local storage for a property, records the previous value,
                                           * and adds it to the set of "pending changes" that will be passed to the
                                           * `_propertiesChanged` callback.  This method does not enqueue the
                                           * `_propertiesChanged` callback.
                                           *
                                           * @param {string} property Name of the property
                                           * @param {*} value Value to set
                                           * @param {boolean=} ext Not used here; affordance for closure
                                           * @return {boolean} Returns true if the property changed
                                           * @protected
                                           * @override
                                           */_setPendingProperty(property,value,ext){let old=this.__data[property],changed=this._shouldPropertyChange(property,value,old);if(changed){if(!this.__dataPending){this.__dataPending={};this.__dataOld={}}// Ensure old is captured from the last turn
if(this.__dataOld&&!(property in this.__dataOld)){this.__dataOld[property]=old}this.__data[property]=value;this.__dataPending[property]=value}return changed}/* eslint-enable */ /**
                           * Marks the properties as invalid, and enqueues an async
                           * `_propertiesChanged` callback.
                           *
                           * @return {void}
                           * @protected
                           * @override
                           */_invalidateProperties(){if(!this.__dataInvalid&&this.__dataReady){this.__dataInvalid=!0;microtask.run(()=>{if(this.__dataInvalid){this.__dataInvalid=!1;this._flushProperties()}})}}/**
       * Call to enable property accessor processing. Before this method is
       * called accessor values will be set but side effects are
       * queued. When called, any pending side effects occur immediately.
       * For elements, generally `connectedCallback` is a normal spot to do so.
       * It is safe to call this method multiple times as it only turns on
       * property accessors once.
       *
       * @return {void}
       * @protected
       * @override
       */_enableProperties(){if(!this.__dataEnabled){this.__dataEnabled=!0;if(this.__dataInstanceProps){this._initializeInstanceProperties(this.__dataInstanceProps);this.__dataInstanceProps=null}this.ready()}}/**
       * Calls the `_propertiesChanged` callback with the current set of
       * pending changes (and old values recorded when pending changes were
       * set), and resets the pending set of changes. Generally, this method
       * should not be called in user code.
       *
       * @return {void}
       * @protected
       * @override
       */_flushProperties(){const props=this.__data,changedProps=this.__dataPending,old=this.__dataOld;if(this._shouldPropertiesChange(props,changedProps,old)){this.__dataPending=null;this.__dataOld=null;this._propertiesChanged(props,changedProps,old)}}/**
       * Called in `_flushProperties` to determine if `_propertiesChanged`
       * should be called. The default implementation returns true if
       * properties are pending. Override to customize when
       * `_propertiesChanged` is called.
       * @param {!Object} currentProps Bag of all current accessor values
       * @param {?Object} changedProps Bag of properties changed since the last
       *   call to `_propertiesChanged`
       * @param {?Object} oldProps Bag of previous values for each property
       *   in `changedProps`
       * @return {boolean} true if changedProps is truthy
       * @override
       */_shouldPropertiesChange(currentProps,changedProps,oldProps){// eslint-disable-line no-unused-vars
return!!changedProps}/**
       * Callback called when any properties with accessors created via
       * `_createPropertyAccessor` have been set.
       *
       * @param {!Object} currentProps Bag of all current accessor values
       * @param {?Object} changedProps Bag of properties changed since the last
       *   call to `_propertiesChanged`
       * @param {?Object} oldProps Bag of previous values for each property
       *   in `changedProps`
       * @return {void}
       * @protected
       * @override
       */_propertiesChanged(currentProps,changedProps,oldProps){}// eslint-disable-line no-unused-vars
/**
     * Method called to determine whether a property value should be
     * considered as a change and cause the `_propertiesChanged` callback
     * to be enqueued.
     *
     * The default implementation returns `true` if a strict equality
     * check fails. The method always returns false for `NaN`.
     *
     * Override this method to e.g. provide stricter checking for
     * Objects/Arrays when using immutable patterns.
     *
     * @param {string} property Property name
     * @param {*} value New property value
     * @param {*} old Previous property value
     * @return {boolean} Whether the property should be considered a change
     *   and enqueue a `_proeprtiesChanged` callback
     * @protected
     * @override
     */_shouldPropertyChange(property,value,old){return(// Strict equality check
old!==value&&(// This ensures (old==NaN, value==NaN) always returns false
old===old||value===value))}/**
       * Implements native Custom Elements `attributeChangedCallback` to
       * set an attribute value to a property via `_attributeToProperty`.
       *
       * @param {string} name Name of attribute that changed
       * @param {?string} old Old attribute value
       * @param {?string} value New attribute value
       * @param {?string} namespace Attribute namespace.
       * @return {void}
       * @suppress {missingProperties} Super may or may not implement the callback
       * @override
       */attributeChangedCallback(name,old,value,namespace){if(old!==value){this._attributeToProperty(name,value)}if(super.attributeChangedCallback){super.attributeChangedCallback(name,old,value,namespace)}}/**
       * Deserializes an attribute to its associated property.
       *
       * This method calls the `_deserializeValue` method to convert the string to
       * a typed value.
       *
       * @param {string} attribute Name of attribute to deserialize.
       * @param {?string} value of the attribute.
       * @param {*=} type type to deserialize to, defaults to the value
       * returned from `typeForProperty`
       * @return {void}
       * @override
       */_attributeToProperty(attribute,value,type){if(!this.__serializing){const map=this.__dataAttributes,property=map&&map[attribute]||attribute;this[property]=this._deserializeValue(value,type||this.constructor.typeForProperty(property))}}/**
       * Serializes a property to its associated attribute.
       *
       * @suppress {invalidCasts} Closure can't figure out `this` is an element.
       *
       * @param {string} property Property name to reflect.
       * @param {string=} attribute Attribute name to reflect to.
       * @param {*=} value Property value to refect.
       * @return {void}
       * @override
       */_propertyToAttribute(property,attribute,value){this.__serializing=!0;value=3>arguments.length?this[property]:value;this._valueToNodeAttribute(/** @type {!HTMLElement} */this,value,attribute||this.constructor.attributeNameForProperty(property));this.__serializing=!1}/**
       * Sets a typed value to an HTML attribute on a node.
       *
       * This method calls the `_serializeValue` method to convert the typed
       * value to a string.  If the `_serializeValue` method returns `undefined`,
       * the attribute will be removed (this is the default for boolean
       * type `false`).
       *
       * @param {Element} node Element to set attribute to.
       * @param {*} value Value to serialize.
       * @param {string} attribute Attribute name to serialize to.
       * @return {void}
       * @override
       */_valueToNodeAttribute(node,value,attribute){const str=this._serializeValue(value);if("class"===attribute||"name"===attribute||"slot"===attribute){node=/** @type {?Element} */wrap$1(node)}if(str===void 0){node.removeAttribute(attribute)}else{node.setAttribute(attribute,str)}}/**
       * Converts a typed JavaScript value to a string.
       *
       * This method is called when setting JS property values to
       * HTML attributes.  Users may override this method to provide
       * serialization for custom types.
       *
       * @param {*} value Property value to serialize.
       * @return {string | undefined} String serialized from the provided
       * property  value.
       * @override
       */_serializeValue(value){switch(typeof value){case"boolean":return value?"":void 0;default:return null!=value?value.toString():void 0;}}/**
       * Converts a string to a typed JavaScript value.
       *
       * This method is called when reading HTML attribute values to
       * JS properties.  Users may override this method to provide
       * deserialization for custom `type`s. Types for `Boolean`, `String`,
       * and `Number` convert attributes to the expected types.
       *
       * @param {?string} value Value to deserialize.
       * @param {*=} type Type to deserialize the string to.
       * @return {*} Typed value deserialized from the provided string.
       * @override
       */_deserializeValue(value,type){switch(type){case Boolean:return null!==value;case Number:return+value;default:return value;}}}return PropertiesChanged});/**
                              * Element class mixin that provides basic meta-programming for creating one
                              * or more property accessors (getter/setter pair) that enqueue an async
                              * (batched) `_propertiesChanged` callback.
                              *
                              * For basic usage of this mixin, call `MyClass.createProperties(props)`
                              * once at class definition time to create property accessors for properties
                              * named in props, implement `_propertiesChanged` to react as desired to
                              * property changes, and implement `static get observedAttributes()` and
                              * include lowercase versions of any property names that should be set from
                              * attributes. Last, call `this._enableProperties()` in the element's
                              * `connectedCallback` to enable the accessors.
                              *
                              * @mixinFunction
                              * @polymer
                              * @summary Element class mixin for reacting to property changes from
                              *   generated property accessors.
                              * @template T
                              * @param {function(new:T)} superClass Class to apply mixin to.
                              * @return {function(new:T)} superClass with mixin applied.
                              */_exports.PropertiesChanged=PropertiesChanged;var propertiesChanged={PropertiesChanged:PropertiesChanged};// that won't have their values "saved" by `saveAccessorValue`, since
// reading from an HTMLElement accessor from the context of a prototype throws
_exports.$propertiesChanged=propertiesChanged;const nativeProperties={};let proto=HTMLElement.prototype;while(proto){let props=Object.getOwnPropertyNames(proto);for(let i=0;i<props.length;i++){nativeProperties[props[i]]=!0}proto=Object.getPrototypeOf(proto)}/**
   * Used to save the value of a property that will be overridden with
   * an accessor. If the `model` is a prototype, the values will be saved
   * in `__dataProto`, and it's up to the user (or downstream mixin) to
   * decide how/when to set these values back into the accessors.
   * If `model` is already an instance (it has a `__data` property), then
   * the value will be set as a pending property, meaning the user should
   * call `_invalidateProperties` or `_flushProperties` to take effect
   *
   * @param {Object} model Prototype or instance
   * @param {string} property Name of property
   * @return {void}
   * @private
   */function saveAccessorValue(model,property){// Don't read/store value for any native properties since they could throw
if(!nativeProperties[property]){let value=model[property];if(value!==void 0){if(model.__data){// Adding accessor to instance; update the property
// It is the user's responsibility to call _flushProperties
model._setPendingProperty(property,value)}else{// Adding accessor to proto; save proto's value for instance-time use
if(!model.__dataProto){model.__dataProto={}}else if(!model.hasOwnProperty(JSCompiler_renameProperty("__dataProto",model))){model.__dataProto=Object.create(model.__dataProto)}model.__dataProto[property]=value}}}}/**
   * Element class mixin that provides basic meta-programming for creating one
   * or more property accessors (getter/setter pair) that enqueue an async
   * (batched) `_propertiesChanged` callback.
   *
   * For basic usage of this mixin:
   *
   * -   Declare attributes to observe via the standard `static get
   *     observedAttributes()`. Use `dash-case` attribute names to represent
   *     `camelCase` property names.
   * -   Implement the `_propertiesChanged` callback on the class.
   * -   Call `MyClass.createPropertiesForAttributes()` **once** on the class to
   *     generate property accessors for each observed attribute. This must be
   *     called before the first instance is created, for example, by calling it
   *     before calling `customElements.define`. It can also be called lazily from
   *     the element's `constructor`, as long as it's guarded so that the call is
   *     only made once, when the first instance is created.
   * -   Call `this._enableProperties()` in the element's `connectedCallback` to
   *     enable the accessors.
   *
   * Any `observedAttributes` will automatically be
   * deserialized via `attributeChangedCallback` and set to the associated
   * property using `dash-case`-to-`camelCase` convention.
   *
   * @mixinFunction
   * @polymer
   * @appliesMixin PropertiesChanged
   * @summary Element class mixin for reacting to property changes from
   *   generated property accessors.
   * @template T
   * @param {function(new:T)} superClass Class to apply mixin to.
   * @return {function(new:T)} superClass with mixin applied.
   */const PropertyAccessors=dedupingMixin(superClass=>{/**
   * @constructor
   * @implements {Polymer_PropertiesChanged}
   * @unrestricted
   * @private
   */const base=PropertiesChanged(superClass);/**
                                                  * @polymer
                                                  * @mixinClass
                                                  * @implements {Polymer_PropertyAccessors}
                                                  * @extends {base}
                                                  * @unrestricted
                                                  */class PropertyAccessors extends base{/**
     * Generates property accessors for all attributes in the standard
     * static `observedAttributes` array.
     *
     * Attribute names are mapped to property names using the `dash-case` to
     * `camelCase` convention
     *
     * @return {void}
     * @nocollapse
     */static createPropertiesForAttributes(){let a$=/** @type {?} */this.observedAttributes;for(let i=0;i<a$.length;i++){this.prototype._createPropertyAccessor(dashToCamelCase(a$[i]))}}/**
       * Returns an attribute name that corresponds to the given property.
       * By default, converts camel to dash case, e.g. `fooBar` to `foo-bar`.
       * @param {string} property Property to convert
       * @return {string} Attribute name corresponding to the given property.
       *
       * @protected
       * @nocollapse
       */static attributeNameForProperty(property){return camelToDashCase(property)}/**
       * Overrides PropertiesChanged implementation to initialize values for
       * accessors created for values that already existed on the element
       * prototype.
       *
       * @return {void}
       * @protected
       * @override
       */_initializeProperties(){if(this.__dataProto){this._initializeProtoProperties(this.__dataProto);this.__dataProto=null}super._initializeProperties()}/**
       * Called at instance time with bag of properties that were overwritten
       * by accessors on the prototype when accessors were created.
       *
       * The default implementation sets these properties back into the
       * setter at instance time.  This method is provided as an override
       * point for customizing or providing more efficient initialization.
       *
       * @param {Object} props Bag of property values that were overwritten
       *   when creating property accessors.
       * @return {void}
       * @protected
       * @override
       */_initializeProtoProperties(props){for(let p in props){this._setProperty(p,props[p])}}/**
       * Ensures the element has the given attribute. If it does not,
       * assigns the given value to the attribute.
       *
       * @suppress {invalidCasts} Closure can't figure out `this` is infact an
       *     element
       *
       * @param {string} attribute Name of attribute to ensure is set.
       * @param {string} value of the attribute.
       * @return {void}
       * @override
       */_ensureAttribute(attribute,value){const el=/** @type {!HTMLElement} */this;if(!el.hasAttribute(attribute)){this._valueToNodeAttribute(el,value,attribute)}}/**
       * Overrides PropertiesChanged implemention to serialize objects as JSON.
       *
       * @param {*} value Property value to serialize.
       * @return {string | undefined} String serialized from the provided property
       *     value.
       * @override
       */_serializeValue(value){/* eslint-disable no-fallthrough */switch(typeof value){case"object":if(value instanceof Date){return value.toString()}else if(value){try{return JSON.stringify(value)}catch(x){return""}}default:return super._serializeValue(value);}}/**
       * Converts a string to a typed JavaScript value.
       *
       * This method is called by Polymer when reading HTML attribute values to
       * JS properties.  Users may override this method on Polymer element
       * prototypes to provide deserialization for custom `type`s.  Note,
       * the `type` argument is the value of the `type` field provided in the
       * `properties` configuration object for a given property, and is
       * by convention the constructor for the type to deserialize.
       *
       *
       * @param {?string} value Attribute value to deserialize.
       * @param {*=} type Type to deserialize the string to.
       * @return {*} Typed value deserialized from the provided string.
       * @override
       */_deserializeValue(value,type){/**
       * @type {*}
       */let outValue;switch(type){case Object:try{outValue=JSON.parse(/** @type {string} */value)}catch(x){// allow non-JSON literals like Strings and Numbers
outValue=value}break;case Array:try{outValue=JSON.parse(/** @type {string} */value)}catch(x){outValue=null;console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`)}break;case Date:outValue=isNaN(value)?value+"":+value;outValue=new Date(outValue);break;default:outValue=super._deserializeValue(value,type);break;}return outValue}/* eslint-enable no-fallthrough */ /**
                                          * Overrides PropertiesChanged implementation to save existing prototype
                                          * property value so that it can be reset.
                                          * @param {string} property Name of the property
                                          * @param {boolean=} readOnly When true, no setter is created
                                          *
                                          * When calling on a prototype, any overwritten values are saved in
                                          * `__dataProto`, and it is up to the subclasser to decide how/when
                                          * to set those properties back into the accessor.  When calling on an
                                          * instance, the overwritten value is set via `_setPendingProperty`,
                                          * and the user should call `_invalidateProperties` or `_flushProperties`
                                          * for the values to take effect.
                                          * @protected
                                          * @return {void}
                                          * @override
                                          */_definePropertyAccessor(property,readOnly){saveAccessorValue(this,property);super._definePropertyAccessor(property,readOnly)}/**
       * Returns true if this library created an accessor for the given property.
       *
       * @param {string} property Property name
       * @return {boolean} True if an accessor was created
       * @override
       */_hasAccessor(property){return this.__dataHasAccessor&&this.__dataHasAccessor[property]}/**
       * Returns true if the specified property has a pending change.
       *
       * @param {string} prop Property name
       * @return {boolean} True if property has a pending change
       * @protected
       * @override
       */_isPropertyPending(prop){return!!(this.__dataPending&&prop in this.__dataPending)}}return PropertyAccessors});_exports.PropertyAccessors=PropertyAccessors;var propertyAccessors={PropertyAccessors:PropertyAccessors};// This is a clear layering violation and gives favored-nation status to
// dom-if and dom-repeat templates.  This is a conceit we're choosing to keep
// a.) to ease 1.x backwards-compatibility due to loss of `is`, and
// b.) to maintain if/repeat capability in parser-constrained elements
//     (e.g. table, select) in lieu of native CE type extensions without
//     massive new invention in this space (e.g. directive system)
_exports.$propertyAccessors=propertyAccessors;const templateExtensions={"dom-if":!0,"dom-repeat":!0};function wrapTemplateExtension(node){let is=node.getAttribute("is");if(is&&templateExtensions[is]){let t=node;t.removeAttribute("is");node=t.ownerDocument.createElement(is);t.parentNode.replaceChild(node,t);node.appendChild(t);while(t.attributes.length){node.setAttribute(t.attributes[0].name,t.attributes[0].value);t.removeAttribute(t.attributes[0].name)}}return node}function findTemplateNode(root,nodeInfo){// recursively ascend tree until we hit root
let parent=nodeInfo.parentInfo&&findTemplateNode(root,nodeInfo.parentInfo);// unwind the stack, returning the indexed node at each level
if(parent){// note: marginally faster than indexing via childNodes
// (http://jsperf.com/childnodes-lookup)
for(let n=parent.firstChild,i=0;n;n=n.nextSibling){if(nodeInfo.parentIndex===i++){return n}}}else{return root}}// construct `$` map (from id annotations)
function applyIdToMap(inst,map,node,nodeInfo){if(nodeInfo.id){map[nodeInfo.id]=node}}// install event listeners (from event annotations)
function applyEventListener(inst,node,nodeInfo){if(nodeInfo.events&&nodeInfo.events.length){for(let j=0,e$=nodeInfo.events,e;j<e$.length&&(e=e$[j]);j++){inst._addMethodEventListenerToNode(node,e.name,e.value,inst)}}}// push configuration references at configure time
function applyTemplateContent(inst,node,nodeInfo){if(nodeInfo.templateInfo){node._templateInfo=nodeInfo.templateInfo}}function createNodeEventHandler(context,eventName,methodName){// Instances can optionally have a _methodHost which allows redirecting where
// to find methods. Currently used by `templatize`.
context=context._methodHost||context;let handler=function(e){if(context[methodName]){context[methodName](e,e.detail)}else{console.warn("listener method `"+methodName+"` not defined")}};return handler}/**
   * Element mixin that provides basic template parsing and stamping, including
   * the following template-related features for stamped templates:
   *
   * - Declarative event listeners (`on-eventname="listener"`)
   * - Map of node id's to stamped node instances (`this.$.id`)
   * - Nested template content caching/removal and re-installation (performance
   *   optimization)
   *
   * @mixinFunction
   * @polymer
   * @summary Element class mixin that provides basic template parsing and stamping
   * @template T
   * @param {function(new:T)} superClass Class to apply mixin to.
   * @return {function(new:T)} superClass with mixin applied.
   */const TemplateStamp=dedupingMixin(/**
                                             * @template T
                                             * @param {function(new:T)} superClass Class to apply mixin to.
                                             * @return {function(new:T)} superClass with mixin applied.
                                             */superClass=>{/**
   * @polymer
   * @mixinClass
   * @implements {Polymer_TemplateStamp}
   */class TemplateStamp extends superClass{/**
     * Scans a template to produce template metadata.
     *
     * Template-specific metadata are stored in the object returned, and node-
     * specific metadata are stored in objects in its flattened `nodeInfoList`
     * array.  Only nodes in the template that were parsed as nodes of
     * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object
     * contains an `index` (`childNodes` index in parent) and optionally
     * `parent`, which points to node info of its parent (including its index).
     *
     * The template metadata object returned from this method has the following
     * structure (many fields optional):
     *
     * ```js
     *   {
     *     // Flattened list of node metadata (for nodes that generated metadata)
     *     nodeInfoList: [
     *       {
     *         // `id` attribute for any nodes with id's for generating `$` map
     *         id: {string},
     *         // `on-event="handler"` metadata
     *         events: [
     *           {
     *             name: {string},   // event name
     *             value: {string},  // handler method name
     *           }, ...
     *         ],
     *         // Notes when the template contained a `<slot>` for shady DOM
     *         // optimization purposes
     *         hasInsertionPoint: {boolean},
     *         // For nested `<template>`` nodes, nested template metadata
     *         templateInfo: {object}, // nested template metadata
     *         // Metadata to allow efficient retrieval of instanced node
     *         // corresponding to this metadata
     *         parentInfo: {number},   // reference to parent nodeInfo>
     *         parentIndex: {number},  // index in parent's `childNodes` collection
     *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`
     *       },
     *       ...
     *     ],
     *     // When true, the template had the `strip-whitespace` attribute
     *     // or was nested in a template with that setting
     *     stripWhitespace: {boolean},
     *     // For nested templates, nested template content is moved into
     *     // a document fragment stored here; this is an optimization to
     *     // avoid the cost of nested template cloning
     *     content: {DocumentFragment}
     *   }
     * ```
     *
     * This method kicks off a recursive treewalk as follows:
     *
     * ```
     *    _parseTemplate <---------------------+
     *      _parseTemplateContent              |
     *        _parseTemplateNode  <------------|--+
     *          _parseTemplateNestedTemplate --+  |
     *          _parseTemplateChildNodes ---------+
     *          _parseTemplateNodeAttributes
     *            _parseTemplateNodeAttribute
     *
     * ```
     *
     * These methods may be overridden to add custom metadata about templates
     * to either `templateInfo` or `nodeInfo`.
     *
     * Note that this method may be destructive to the template, in that
     * e.g. event annotations may be removed after being noted in the
     * template metadata.
     *
     * @param {!HTMLTemplateElement} template Template to parse
     * @param {TemplateInfo=} outerTemplateInfo Template metadata from the outer
     *   template, for parsing nested templates
     * @return {!TemplateInfo} Parsed template metadata
     * @nocollapse
     */static _parseTemplate(template,outerTemplateInfo){// since a template may be re-used, memo-ize metadata
if(!template._templateInfo){// TODO(rictic): fix typing
let/** ? */templateInfo=template._templateInfo={};templateInfo.nodeInfoList=[];templateInfo.stripWhiteSpace=outerTemplateInfo&&outerTemplateInfo.stripWhiteSpace||template.hasAttribute("strip-whitespace");// TODO(rictic): fix typing
this._parseTemplateContent(template,templateInfo,/** @type {?} */{parent:null})}return template._templateInfo}/**
       * See docs for _parseTemplateNode.
       *
       * @param {!HTMLTemplateElement} template .
       * @param {!TemplateInfo} templateInfo .
       * @param {!NodeInfo} nodeInfo .
       * @return {boolean} .
       * @nocollapse
       */static _parseTemplateContent(template,templateInfo,nodeInfo){return this._parseTemplateNode(template.content,templateInfo,nodeInfo)}/**
       * Parses template node and adds template and node metadata based on
       * the current node, and its `childNodes` and `attributes`.
       *
       * This method may be overridden to add custom node or template specific
       * metadata based on this node.
       *
       * @param {Node} node Node to parse
       * @param {!TemplateInfo} templateInfo Template metadata for current template
       * @param {!NodeInfo} nodeInfo Node metadata for current template.
       * @return {boolean} `true` if the visited node added node-specific
       *   metadata to `nodeInfo`
       * @nocollapse
       */static _parseTemplateNode(node,templateInfo,nodeInfo){let noted=!1,element=/** @type {!HTMLTemplateElement} */node;if("template"==element.localName&&!element.hasAttribute("preserve-content")){noted=this._parseTemplateNestedTemplate(element,templateInfo,nodeInfo)||noted}else if("slot"===element.localName){// For ShadyDom optimization, indicating there is an insertion point
templateInfo.hasInsertionPoint=!0}if(element.firstChild){this._parseTemplateChildNodes(element,templateInfo,nodeInfo)}if(element.hasAttributes&&element.hasAttributes()){noted=this._parseTemplateNodeAttributes(element,templateInfo,nodeInfo)||noted}return noted}/**
       * Parses template child nodes for the given root node.
       *
       * This method also wraps whitelisted legacy template extensions
       * (`is="dom-if"` and `is="dom-repeat"`) with their equivalent element
       * wrappers, collapses text nodes, and strips whitespace from the template
       * if the `templateInfo.stripWhitespace` setting was provided.
       *
       * @param {Node} root Root node whose `childNodes` will be parsed
       * @param {!TemplateInfo} templateInfo Template metadata for current template
       * @param {!NodeInfo} nodeInfo Node metadata for current template.
       * @return {void}
       */static _parseTemplateChildNodes(root,templateInfo,nodeInfo){if("script"===root.localName||"style"===root.localName){return}for(let node=root.firstChild,parentIndex=0,next;node;node=next){// Wrap templates
if("template"==node.localName){node=wrapTemplateExtension(node)}// collapse adjacent textNodes: fixes an IE issue that can cause
// text nodes to be inexplicably split =(
// note that root.normalize() should work but does not so we do this
// manually.
next=node.nextSibling;if(node.nodeType===Node.TEXT_NODE){let/** Node */n=next;while(n&&n.nodeType===Node.TEXT_NODE){node.textContent+=n.textContent;next=n.nextSibling;root.removeChild(n);n=next}// optionally strip whitespace
if(templateInfo.stripWhiteSpace&&!node.textContent.trim()){root.removeChild(node);continue}}let childInfo=/** @type {!NodeInfo} */{parentIndex,parentInfo:nodeInfo};if(this._parseTemplateNode(node,templateInfo,childInfo)){childInfo.infoIndex=templateInfo.nodeInfoList.push(childInfo)-1}// Increment if not removed
if(node.parentNode){parentIndex++}}}/**
       * Parses template content for the given nested `<template>`.
       *
       * Nested template info is stored as `templateInfo` in the current node's
       * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.
       * It will then be the responsibility of the host to set it back to the
       * template and for users stamping nested templates to use the
       * `_contentForTemplate` method to retrieve the content for this template
       * (an optimization to avoid the cost of cloning nested template content).
       *
       * @param {HTMLTemplateElement} node Node to parse (a <template>)
       * @param {TemplateInfo} outerTemplateInfo Template metadata for current template
       *   that includes the template `node`
       * @param {!NodeInfo} nodeInfo Node metadata for current template.
       * @return {boolean} `true` if the visited node added node-specific
       *   metadata to `nodeInfo`
       * @nocollapse
       */static _parseTemplateNestedTemplate(node,outerTemplateInfo,nodeInfo){// TODO(rictic): the type of node should be non-null
let element=/** @type {!HTMLTemplateElement} */node,templateInfo=this._parseTemplate(element,outerTemplateInfo),content=templateInfo.content=element.content.ownerDocument.createDocumentFragment();content.appendChild(element.content);nodeInfo.templateInfo=templateInfo;return!0}/**
       * Parses template node attributes and adds node metadata to `nodeInfo`
       * for nodes of interest.
       *
       * @param {Element} node Node to parse
       * @param {!TemplateInfo} templateInfo Template metadata for current
       *     template
       * @param {!NodeInfo} nodeInfo Node metadata for current template.
       * @return {boolean} `true` if the visited node added node-specific
       *   metadata to `nodeInfo`
       * @nocollapse
       */static _parseTemplateNodeAttributes(node,templateInfo,nodeInfo){// Make copy of original attribute list, since the order may change
// as attributes are added and removed
let noted=!1,attrs=Array.from(node.attributes);for(let i=attrs.length-1,a;a=attrs[i];i--){noted=this._parseTemplateNodeAttribute(node,templateInfo,nodeInfo,a.name,a.value)||noted}return noted}/**
       * Parses a single template node attribute and adds node metadata to
       * `nodeInfo` for attributes of interest.
       *
       * This implementation adds metadata for `on-event="handler"` attributes
       * and `id` attributes.
       *
       * @param {Element} node Node to parse
       * @param {!TemplateInfo} templateInfo Template metadata for current template
       * @param {!NodeInfo} nodeInfo Node metadata for current template.
       * @param {string} name Attribute name
       * @param {string} value Attribute value
       * @return {boolean} `true` if the visited node added node-specific
       *   metadata to `nodeInfo`
       * @nocollapse
       */static _parseTemplateNodeAttribute(node,templateInfo,nodeInfo,name,value){// events (on-*)
if("on-"===name.slice(0,3)){node.removeAttribute(name);nodeInfo.events=nodeInfo.events||[];nodeInfo.events.push({name:name.slice(3),value});return!0}// static id
else if("id"===name){nodeInfo.id=value;return!0}return!1}/**
       * Returns the `content` document fragment for a given template.
       *
       * For nested templates, Polymer performs an optimization to cache nested
       * template content to avoid the cost of cloning deeply nested templates.
       * This method retrieves the cached content for a given template.
       *
       * @param {HTMLTemplateElement} template Template to retrieve `content` for
       * @return {DocumentFragment} Content fragment
       * @nocollapse
       */static _contentForTemplate(template){let templateInfo=/** @type {HTMLTemplateElementWithInfo} */template._templateInfo;return templateInfo&&templateInfo.content||template.content}/**
       * Clones the provided template content and returns a document fragment
       * containing the cloned dom.
       *
       * The template is parsed (once and memoized) using this library's
       * template parsing features, and provides the following value-added
       * features:
       * * Adds declarative event listeners for `on-event="handler"` attributes
       * * Generates an "id map" for all nodes with id's under `$` on returned
       *   document fragment
       * * Passes template info including `content` back to templates as
       *   `_templateInfo` (a performance optimization to avoid deep template
       *   cloning)
       *
       * Note that the memoized template parsing process is destructive to the
       * template: attributes for bindings and declarative event listeners are
       * removed after being noted in notes, and any nested `<template>.content`
       * is removed and stored in notes as well.
       *
       * @param {!HTMLTemplateElement} template Template to stamp
       * @return {!StampedTemplate} Cloned template content
       * @override
       */_stampTemplate(template){// Polyfill support: bootstrap the template if it has not already been
if(template&&!template.content&&window.HTMLTemplateElement&&HTMLTemplateElement.decorate){HTMLTemplateElement.decorate(template)}let templateInfo=this.constructor._parseTemplate(template),nodeInfo=templateInfo.nodeInfoList,content=templateInfo.content||template.content,dom=/** @type {DocumentFragment} */document.importNode(content,!0);// NOTE: ShadyDom optimization indicating there is an insertion point
dom.__noInsertionPoint=!templateInfo.hasInsertionPoint;let nodes=dom.nodeList=Array(nodeInfo.length);dom.$={};for(let i=0,l=nodeInfo.length,info,node;i<l&&(info=nodeInfo[i]);i++){node=nodes[i]=findTemplateNode(dom,info);applyIdToMap(this,dom.$,node,info);applyTemplateContent(this,node,info);applyEventListener(this,node,info)}dom=/** @type {!StampedTemplate} */dom;// eslint-disable-line no-self-assign
return dom}/**
       * Adds an event listener by method name for the event provided.
       *
       * This method generates a handler function that looks up the method
       * name at handling time.
       *
       * @param {!EventTarget} node Node to add listener on
       * @param {string} eventName Name of event
       * @param {string} methodName Name of method
       * @param {*=} context Context the method will be called on (defaults
       *   to `node`)
       * @return {Function} Generated handler function
       * @override
       */_addMethodEventListenerToNode(node,eventName,methodName,context){context=context||node;let handler=createNodeEventHandler(context,eventName,methodName);this._addEventListenerToNode(node,eventName,handler);return handler}/**
       * Override point for adding custom or simulated event handling.
       *
       * @param {!EventTarget} node Node to add event listener to
       * @param {string} eventName Name of event
       * @param {function(!Event):void} handler Listener function to add
       * @return {void}
       * @override
       */_addEventListenerToNode(node,eventName,handler){node.addEventListener(eventName,handler)}/**
       * Override point for adding custom or simulated event handling.
       *
       * @param {!EventTarget} node Node to remove event listener from
       * @param {string} eventName Name of event
       * @param {function(!Event):void} handler Listener function to remove
       * @return {void}
       * @override
       */_removeEventListenerFromNode(node,eventName,handler){node.removeEventListener(eventName,handler)}}return TemplateStamp});_exports.TemplateStamp=TemplateStamp;var templateStamp={TemplateStamp:TemplateStamp};// from multiple properties in the same turn
_exports.$templateStamp=templateStamp;let dedupeId$1=0;/**
                    * Property effect types; effects are stored on the prototype using these keys
                    * @enum {string}
                    */const TYPES={COMPUTE:"__computeEffects",REFLECT:"__reflectEffects",NOTIFY:"__notifyEffects",PROPAGATE:"__propagateEffects",OBSERVE:"__observeEffects",READ_ONLY:"__readOnly"},capitalAttributeRegex=/[A-Z]/;/** @const {!RegExp} */ /**
                                        * @typedef {{
                                        * name: (string | undefined),
                                        * structured: (boolean | undefined),
                                        * wildcard: (boolean | undefined)
                                        * }}
                                        */let DataTrigger,DataEffect;//eslint-disable-line no-unused-vars
/**
 * @typedef {{
 * info: ?,
 * trigger: (!DataTrigger | undefined),
 * fn: (!Function | undefined)
 * }}
 */ //eslint-disable-line no-unused-vars
/**
 * Ensures that the model has an own-property map of effects for the given type.
 * The model may be a prototype or an instance.
 *
 * Property effects are stored as arrays of effects by property in a map,
 * by named type on the model. e.g.
 *
 *   __computeEffects: {
 *     foo: [ ... ],
 *     bar: [ ... ]
 *   }
 *
 * If the model does not yet have an effect map for the type, one is created
 * and returned.  If it does, but it is not an own property (i.e. the
 * prototype had effects), the the map is deeply cloned and the copy is
 * set on the model and returned, ready for new effects to be added.
 *
 * @param {Object} model Prototype or instance
 * @param {string} type Property effect type
 * @return {Object} The own-property map of effects for the given type
 * @private
 */function ensureOwnEffectMap(model,type){let effects=model[type];if(!effects){effects=model[type]={}}else if(!model.hasOwnProperty(type)){effects=model[type]=Object.create(model[type]);for(let p in effects){let protoFx=effects[p],instFx=effects[p]=Array(protoFx.length);for(let i=0;i<protoFx.length;i++){instFx[i]=protoFx[i]}}}return effects}// -- effects ----------------------------------------------
/**
 * Runs all effects of a given type for the given set of property changes
 * on an instance.
 *
 * @param {!Polymer_PropertyEffects} inst The instance with effects to run
 * @param {?Object} effects Object map of property-to-Array of effects
 * @param {?Object} props Bag of current property changes
 * @param {?Object=} oldProps Bag of previous values for changed properties
 * @param {boolean=} hasPaths True with `props` contains one or more paths
 * @param {*=} extraArgs Additional metadata to pass to effect function
 * @return {boolean} True if an effect ran for this property
 * @private
 */function runEffects(inst,effects,props,oldProps,hasPaths,extraArgs){if(effects){let ran=!1,id=dedupeId$1++;for(let prop in props){if(runEffectsForProperty(inst,/** @type {!Object} */effects,id,prop,props,oldProps,hasPaths,extraArgs)){ran=!0}}return ran}return!1}/**
   * Runs a list of effects for a given property.
   *
   * @param {!Polymer_PropertyEffects} inst The instance with effects to run
   * @param {!Object} effects Object map of property-to-Array of effects
   * @param {number} dedupeId Counter used for de-duping effects
   * @param {string} prop Name of changed property
   * @param {*} props Changed properties
   * @param {*} oldProps Old properties
   * @param {boolean=} hasPaths True with `props` contains one or more paths
   * @param {*=} extraArgs Additional metadata to pass to effect function
   * @return {boolean} True if an effect ran for this property
   * @private
   */function runEffectsForProperty(inst,effects,dedupeId,prop,props,oldProps,hasPaths,extraArgs){let ran=!1,rootProperty=hasPaths?root(prop):prop,fxs=effects[rootProperty];if(fxs){for(let i=0,l=fxs.length,fx;i<l&&(fx=fxs[i]);i++){if((!fx.info||fx.info.lastRun!==dedupeId)&&(!hasPaths||pathMatchesTrigger(prop,fx.trigger))){if(fx.info){fx.info.lastRun=dedupeId}fx.fn(inst,prop,props,oldProps,fx.info,hasPaths,extraArgs);ran=!0}}}return ran}/**
   * Determines whether a property/path that has changed matches the trigger
   * criteria for an effect.  A trigger is a descriptor with the following
   * structure, which matches the descriptors returned from `parseArg`.
   * e.g. for `foo.bar.*`:
   * ```
   * trigger: {
   *   name: 'a.b',
   *   structured: true,
   *   wildcard: true
   * }
   * ```
   * If no trigger is given, the path is deemed to match.
   *
   * @param {string} path Path or property that changed
   * @param {?DataTrigger} trigger Descriptor
   * @return {boolean} Whether the path matched the trigger
   */function pathMatchesTrigger(path,trigger){if(trigger){let triggerPath=/** @type {string} */trigger.name;return triggerPath==path||!!(trigger.structured&&isAncestor(triggerPath,path))||!!(trigger.wildcard&&isDescendant(triggerPath,path))}else{return!0}}/**
   * Implements the "observer" effect.
   *
   * Calls the method with `info.methodName` on the instance, passing the
   * new and old values.
   *
   * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
   * @param {string} property Name of property
   * @param {Object} props Bag of current property changes
   * @param {Object} oldProps Bag of previous values for changed properties
   * @param {?} info Effect metadata
   * @return {void}
   * @private
   */function runObserverEffect(inst,property,props,oldProps,info){let fn="string"===typeof info.method?inst[info.method]:info.method,changedProp=info.property;if(fn){fn.call(inst,inst.__data[changedProp],oldProps[changedProp])}else if(!info.dynamicFn){console.warn("observer method `"+info.method+"` not defined")}}/**
   * Runs "notify" effects for a set of changed properties.
   *
   * This method differs from the generic `runEffects` method in that it
   * will dispatch path notification events in the case that the property
   * changed was a path and the root property for that path didn't have a
   * "notify" effect.  This is to maintain 1.0 behavior that did not require
   * `notify: true` to ensure object sub-property notifications were
   * sent.
   *
   * @param {!Polymer_PropertyEffects} inst The instance with effects to run
   * @param {Object} notifyProps Bag of properties to notify
   * @param {Object} props Bag of current property changes
   * @param {Object} oldProps Bag of previous values for changed properties
   * @param {boolean} hasPaths True with `props` contains one or more paths
   * @return {void}
   * @private
   */function runNotifyEffects(inst,notifyProps,props,oldProps,hasPaths){// Notify
let fxs=inst[TYPES.NOTIFY],notified,id=dedupeId$1++;// Try normal notify effects; if none, fall back to try path notification
for(let prop in notifyProps){if(notifyProps[prop]){if(fxs&&runEffectsForProperty(inst,fxs,id,prop,props,oldProps,hasPaths)){notified=!0}else if(hasPaths&&notifyPath(inst,prop,props)){notified=!0}}}// Flush host if we actually notified and host was batching
// And the host has already initialized clients; this prevents
// an issue with a host observing data changes before clients are ready.
let host;if(notified&&(host=inst.__dataHost)&&host._invalidateProperties){host._invalidateProperties()}}/**
   * Dispatches {property}-changed events with path information in the detail
   * object to indicate a sub-path of the property was changed.
   *
   * @param {!Polymer_PropertyEffects} inst The element from which to fire the
   *     event
   * @param {string} path The path that was changed
   * @param {Object} props Bag of current property changes
   * @return {boolean} Returns true if the path was notified
   * @private
   */function notifyPath(inst,path,props){let rootProperty=root(path);if(rootProperty!==path){let eventName=camelToDashCase(rootProperty)+"-changed";dispatchNotifyEvent(inst,eventName,props[path],path);return!0}return!1}/**
   * Dispatches {property}-changed events to indicate a property (or path)
   * changed.
   *
   * @param {!Polymer_PropertyEffects} inst The element from which to fire the
   *     event
   * @param {string} eventName The name of the event to send
   *     ('{property}-changed')
   * @param {*} value The value of the changed property
   * @param {string | null | undefined} path If a sub-path of this property
   *     changed, the path that changed (optional).
   * @return {void}
   * @private
   * @suppress {invalidCasts}
   */function dispatchNotifyEvent(inst,eventName,value,path){let detail={value:value,queueProperty:!0};if(path){detail.path=path}wrap$1(/** @type {!HTMLElement} */inst).dispatchEvent(new CustomEvent(eventName,{detail}))}/**
   * Implements the "notify" effect.
   *
   * Dispatches a non-bubbling event named `info.eventName` on the instance
   * with a detail object containing the new `value`.
   *
   * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
   * @param {string} property Name of property
   * @param {Object} props Bag of current property changes
   * @param {Object} oldProps Bag of previous values for changed properties
   * @param {?} info Effect metadata
   * @param {boolean} hasPaths True with `props` contains one or more paths
   * @return {void}
   * @private
   */function runNotifyEffect(inst,property,props,oldProps,info,hasPaths){let rootProperty=hasPaths?root(property):property,path=rootProperty!=property?property:null,value=path?get(inst,path):inst.__data[property];if(path&&value===void 0){value=props[property];// specifically for .splices
}dispatchNotifyEvent(inst,info.eventName,value,path)}/**
   * Handler function for 2-way notification events. Receives context
   * information captured in the `addNotifyListener` closure from the
   * `__notifyListeners` metadata.
   *
   * Sets the value of the notified property to the host property or path.  If
   * the event contained path information, translate that path to the host
   * scope's name for that path first.
   *
   * @param {CustomEvent} event Notification event (e.g. '<property>-changed')
   * @param {!Polymer_PropertyEffects} inst Host element instance handling the
   *     notification event
   * @param {string} fromProp Child element property that was bound
   * @param {string} toPath Host property/path that was bound
   * @param {boolean} negate Whether the binding was negated
   * @return {void}
   * @private
   */function handleNotification(event,inst,fromProp,toPath,negate){let value,detail=/** @type {Object} */event.detail,fromPath=detail&&detail.path;if(fromPath){toPath=translate(fromProp,toPath,fromPath);value=detail&&detail.value}else{value=event.currentTarget[fromProp]}value=negate?!value:value;if(!inst[TYPES.READ_ONLY]||!inst[TYPES.READ_ONLY][toPath]){if(inst._setPendingPropertyOrPath(toPath,value,!0,!!fromPath)&&(!detail||!detail.queueProperty)){inst._invalidateProperties()}}}/**
   * Implements the "reflect" effect.
   *
   * Sets the attribute named `info.attrName` to the given property value.
   *
   * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
   * @param {string} property Name of property
   * @param {Object} props Bag of current property changes
   * @param {Object} oldProps Bag of previous values for changed properties
   * @param {?} info Effect metadata
   * @return {void}
   * @private
   */function runReflectEffect(inst,property,props,oldProps,info){let value=inst.__data[property];if(sanitizeDOMValue){value=sanitizeDOMValue(value,info.attrName,"attribute",/** @type {Node} */inst)}inst._propertyToAttribute(property,info.attrName,value)}/**
   * Runs "computed" effects for a set of changed properties.
   *
   * This method differs from the generic `runEffects` method in that it
   * continues to run computed effects based on the output of each pass until
   * there are no more newly computed properties.  This ensures that all
   * properties that will be computed by the initial set of changes are
   * computed before other effects (binding propagation, observers, and notify)
   * run.
   *
   * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
   * @param {?Object} changedProps Bag of changed properties
   * @param {?Object} oldProps Bag of previous values for changed properties
   * @param {boolean} hasPaths True with `props` contains one or more paths
   * @return {void}
   * @private
   */function runComputedEffects(inst,changedProps,oldProps,hasPaths){let computeEffects=inst[TYPES.COMPUTE];if(computeEffects){let inputProps=changedProps;while(runEffects(inst,computeEffects,inputProps,oldProps,hasPaths)){Object.assign(/** @type {!Object} */oldProps,inst.__dataOld);Object.assign(/** @type {!Object} */changedProps,inst.__dataPending);inputProps=inst.__dataPending;inst.__dataPending=null}}}/**
   * Implements the "computed property" effect by running the method with the
   * values of the arguments specified in the `info` object and setting the
   * return value to the computed property specified.
   *
   * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
   * @param {string} property Name of property
   * @param {?Object} props Bag of current property changes
   * @param {?Object} oldProps Bag of previous values for changed properties
   * @param {?} info Effect metadata
   * @return {void}
   * @private
   */function runComputedEffect(inst,property,props,oldProps,info){let result=runMethodEffect(inst,property,props,oldProps,info),computedProp=info.methodInfo;if(inst.__dataHasAccessor&&inst.__dataHasAccessor[computedProp]){inst._setPendingProperty(computedProp,result,!0)}else{inst[computedProp]=result}}/**
   * Computes path changes based on path links set up using the `linkPaths`
   * API.
   *
   * @param {!Polymer_PropertyEffects} inst The instance whose props are changing
   * @param {string} path Path that has changed
   * @param {*} value Value of changed path
   * @return {void}
   * @private
   */function computeLinkedPaths(inst,path,value){let links=inst.__dataLinkedPaths;if(links){let link;for(let a in links){let b=links[a];if(isDescendant(a,path)){link=translate(a,b,path);inst._setPendingPropertyOrPath(link,value,!0,!0)}else if(isDescendant(b,path)){link=translate(b,a,path);inst._setPendingPropertyOrPath(link,value,!0,!0)}}}}// -- bindings ----------------------------------------------
/**
 * Adds binding metadata to the current `nodeInfo`, and binding effects
 * for all part dependencies to `templateInfo`.
 *
 * @param {Function} constructor Class that `_parseTemplate` is currently
 *   running on
 * @param {TemplateInfo} templateInfo Template metadata for current template
 * @param {NodeInfo} nodeInfo Node metadata for current template node
 * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'
 * @param {string} target Target property name
 * @param {!Array<!BindingPart>} parts Array of binding part metadata
 * @param {string=} literal Literal text surrounding binding parts (specified
 *   only for 'property' bindings, since these must be initialized as part
 *   of boot-up)
 * @return {void}
 * @private
 */function addBinding(constructor,templateInfo,nodeInfo,kind,target,parts,literal){// Create binding metadata and add to nodeInfo
nodeInfo.bindings=nodeInfo.bindings||[];let/** Binding */binding={kind,target,parts,literal,isCompound:1!==parts.length};nodeInfo.bindings.push(binding);// Add listener info to binding metadata
if(shouldAddListener(binding)){let{event,negate}=binding.parts[0];binding.listenerEvent=event||camelToDashCase(target)+"-changed";binding.listenerNegate=negate}// Add "propagate" property effects to templateInfo
let index=templateInfo.nodeInfoList.length;for(let i=0,part;i<binding.parts.length;i++){part=binding.parts[i];part.compoundIndex=i;addEffectForBindingPart(constructor,templateInfo,binding,part,index)}}/**
   * Adds property effects to the given `templateInfo` for the given binding
   * part.
   *
   * @param {Function} constructor Class that `_parseTemplate` is currently
   *   running on
   * @param {TemplateInfo} templateInfo Template metadata for current template
   * @param {!Binding} binding Binding metadata
   * @param {!BindingPart} part Binding part metadata
   * @param {number} index Index into `nodeInfoList` for this node
   * @return {void}
   */function addEffectForBindingPart(constructor,templateInfo,binding,part,index){if(!part.literal){if("attribute"===binding.kind&&"-"===binding.target[0]){console.warn("Cannot set attribute "+binding.target+" because \"-\" is not a valid attribute starting character")}else{let dependencies=part.dependencies,info={index,binding,part,evaluator:constructor};for(let j=0,trigger;j<dependencies.length;j++){trigger=dependencies[j];if("string"==typeof trigger){trigger=parseArg(trigger);trigger.wildcard=!0}constructor._addTemplatePropertyEffect(templateInfo,trigger.rootProperty,{fn:runBindingEffect,info,trigger})}}}}/**
   * Implements the "binding" (property/path binding) effect.
   *
   * Note that binding syntax is overridable via `_parseBindings` and
   * `_evaluateBinding`.  This method will call `_evaluateBinding` for any
   * non-literal parts returned from `_parseBindings`.  However,
   * there is no support for _path_ bindings via custom binding parts,
   * as this is specific to Polymer's path binding syntax.
   *
   * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
   * @param {string} path Name of property
   * @param {Object} props Bag of current property changes
   * @param {Object} oldProps Bag of previous values for changed properties
   * @param {?} info Effect metadata
   * @param {boolean} hasPaths True with `props` contains one or more paths
   * @param {Array} nodeList List of nodes associated with `nodeInfoList` template
   *   metadata
   * @return {void}
   * @private
   */function runBindingEffect(inst,path,props,oldProps,info,hasPaths,nodeList){let node=nodeList[info.index],binding=info.binding,part=info.part;// Subpath notification: transform path and set to client
// e.g.: foo="{{obj.sub}}", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop
if(hasPaths&&part.source&&path.length>part.source.length&&"property"==binding.kind&&!binding.isCompound&&node.__isPropertyEffectsClient&&node.__dataHasAccessor&&node.__dataHasAccessor[binding.target]){let value=props[path];path=translate(part.source,binding.target,path);if(node._setPendingPropertyOrPath(path,value,!1,!0)){inst._enqueueClient(node)}}else{let value=info.evaluator._evaluateBinding(inst,part,path,props,oldProps,hasPaths);// Propagate value to child
applyBindingValue(inst,node,binding,part,value)}}/**
   * Sets the value for an "binding" (binding) effect to a node,
   * either as a property or attribute.
   *
   * @param {!Polymer_PropertyEffects} inst The instance owning the binding effect
   * @param {Node} node Target node for binding
   * @param {!Binding} binding Binding metadata
   * @param {!BindingPart} part Binding part metadata
   * @param {*} value Value to set
   * @return {void}
   * @private
   */function applyBindingValue(inst,node,binding,part,value){value=computeBindingValue(node,value,binding,part);if(sanitizeDOMValue){value=sanitizeDOMValue(value,binding.target,binding.kind,node)}if("attribute"==binding.kind){// Attribute binding
inst._valueToNodeAttribute(/** @type {Element} */node,value,binding.target)}else{// Property binding
let prop=binding.target;if(node.__isPropertyEffectsClient&&node.__dataHasAccessor&&node.__dataHasAccessor[prop]){if(!node[TYPES.READ_ONLY]||!node[TYPES.READ_ONLY][prop]){if(node._setPendingProperty(prop,value)){inst._enqueueClient(node)}}}else{inst._setUnmanagedPropertyToNode(node,prop,value)}}}/**
   * Transforms an "binding" effect value based on compound & negation
   * effect metadata, as well as handling for special-case properties
   *
   * @param {Node} node Node the value will be set to
   * @param {*} value Value to set
   * @param {!Binding} binding Binding metadata
   * @param {!BindingPart} part Binding part metadata
   * @return {*} Transformed value to set
   * @private
   */function computeBindingValue(node,value,binding,part){if(binding.isCompound){let storage=node.__dataCompoundStorage[binding.target];storage[part.compoundIndex]=value;value=storage.join("")}if("attribute"!==binding.kind){// Some browsers serialize `undefined` to `"undefined"`
if("textContent"===binding.target||"value"===binding.target&&("input"===node.localName||"textarea"===node.localName)){value=value==void 0?"":value}}return value}/**
   * Returns true if a binding's metadata meets all the requirements to allow
   * 2-way binding, and therefore a `<property>-changed` event listener should be
   * added:
   * - used curly braces
   * - is a property (not attribute) binding
   * - is not a textContent binding
   * - is not compound
   *
   * @param {!Binding} binding Binding metadata
   * @return {boolean} True if 2-way listener should be added
   * @private
   */function shouldAddListener(binding){return!!binding.target&&"attribute"!=binding.kind&&"text"!=binding.kind&&!binding.isCompound&&"{"===binding.parts[0].mode}/**
   * Setup compound binding storage structures, notify listeners, and dataHost
   * references onto the bound nodeList.
   *
   * @param {!Polymer_PropertyEffects} inst Instance that bas been previously
   *     bound
   * @param {TemplateInfo} templateInfo Template metadata
   * @return {void}
   * @private
   */function setupBindings(inst,templateInfo){// Setup compound storage, dataHost, and notify listeners
let{nodeList,nodeInfoList}=templateInfo;if(nodeInfoList.length){for(let i=0;i<nodeInfoList.length;i++){let info=nodeInfoList[i],node=nodeList[i],bindings=info.bindings;if(bindings){for(let i=0,binding;i<bindings.length;i++){binding=bindings[i];setupCompoundStorage(node,binding);addNotifyListener(node,inst,binding)}}node.__dataHost=inst}}}/**
   * Initializes `__dataCompoundStorage` local storage on a bound node with
   * initial literal data for compound bindings, and sets the joined
   * literal parts to the bound property.
   *
   * When changes to compound parts occur, they are first set into the compound
   * storage array for that property, and then the array is joined to result in
   * the final value set to the property/attribute.
   *
   * @param {Node} node Bound node to initialize
   * @param {Binding} binding Binding metadata
   * @return {void}
   * @private
   */function setupCompoundStorage(node,binding){if(binding.isCompound){// Create compound storage map
let storage=node.__dataCompoundStorage||(node.__dataCompoundStorage={}),parts=binding.parts,literals=Array(parts.length);for(let j=0;j<parts.length;j++){literals[j]=parts[j].literal}let target=binding.target;storage[target]=literals;// Configure properties with their literal parts
if(binding.literal&&"property"==binding.kind){// Note, className needs style scoping so this needs wrapping.
// We may also want to consider doing this for `textContent` and
// `innerHTML`.
if("className"===target){node=wrap$1(node)}node[target]=binding.literal}}}/**
   * Adds a 2-way binding notification event listener to the node specified
   *
   * @param {Object} node Child element to add listener to
   * @param {!Polymer_PropertyEffects} inst Host element instance to handle
   *     notification event
   * @param {Binding} binding Binding metadata
   * @return {void}
   * @private
   */function addNotifyListener(node,inst,binding){if(binding.listenerEvent){let part=binding.parts[0];node.addEventListener(binding.listenerEvent,function(e){handleNotification(e,inst,binding.target,part.source,part.negate)})}}// -- for method-based effects (complexObserver & computed) --------------
/**
 * Adds property effects for each argument in the method signature (and
 * optionally, for the method name if `dynamic` is true) that calls the
 * provided effect function.
 *
 * @param {Element | Object} model Prototype or instance
 * @param {!MethodSignature} sig Method signature metadata
 * @param {string} type Type of property effect to add
 * @param {Function} effectFn Function to run when arguments change
 * @param {*=} methodInfo Effect-specific information to be included in
 *   method effect metadata
 * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether
 *   method names should be included as a dependency to the effect. Note,
 *   defaults to true if the signature is static (sig.static is true).
 * @return {void}
 * @private
 */function createMethodEffect(model,sig,type,effectFn,methodInfo,dynamicFn){dynamicFn=sig.static||dynamicFn&&("object"!==typeof dynamicFn||dynamicFn[sig.methodName]);let info={methodName:sig.methodName,args:sig.args,methodInfo,dynamicFn};for(let i=0,arg;i<sig.args.length&&(arg=sig.args[i]);i++){if(!arg.literal){model._addPropertyEffect(arg.rootProperty,type,{fn:effectFn,info:info,trigger:arg})}}if(dynamicFn){model._addPropertyEffect(sig.methodName,type,{fn:effectFn,info:info})}}/**
   * Calls a method with arguments marshaled from properties on the instance
   * based on the method signature contained in the effect metadata.
   *
   * Multi-property observers, computed properties, and inline computing
   * functions call this function to invoke the method, then use the return
   * value accordingly.
   *
   * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
   * @param {string} property Name of property
   * @param {Object} props Bag of current property changes
   * @param {Object} oldProps Bag of previous values for changed properties
   * @param {?} info Effect metadata
   * @return {*} Returns the return value from the method invocation
   * @private
   */function runMethodEffect(inst,property,props,oldProps,info){// Instances can optionally have a _methodHost which allows redirecting where
// to find methods. Currently used by `templatize`.
let context=inst._methodHost||inst,fn=context[info.methodName];if(fn){let args=inst._marshalArgs(info.args,property,props);return fn.apply(context,args)}else if(!info.dynamicFn){console.warn("method `"+info.methodName+"` not defined")}}const emptyArray=[],IDENT="(?:"+"[a-zA-Z_$][\\w.:$\\-*]*"+")",NUMBER="(?:"+"[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?"+")",SQUOTE_STRING="(?:"+"'(?:[^'\\\\]|\\\\.)*'"+")",DQUOTE_STRING="(?:"+"\"(?:[^\"\\\\]|\\\\.)*\""+")",STRING="(?:"+SQUOTE_STRING+"|"+DQUOTE_STRING+")",ARGUMENT="(?:("+IDENT+"|"+NUMBER+"|"+STRING+")\\s*"+")",ARGUMENTS="(?:"+ARGUMENT+"(?:,\\s*"+ARGUMENT+")*"+")",ARGUMENT_LIST="(?:"+"\\(\\s*"+"(?:"+ARGUMENTS+"?"+")"+"\\)\\s*"+")",BINDING="("+IDENT+"\\s*"+ARGUMENT_LIST+"?"+")",OPEN_BRACKET="(\\[\\[|{{)"+"\\s*",CLOSE_BRACKET="(?:]]|}})",NEGATE="(?:(!)\\s*)?",EXPRESSION=OPEN_BRACKET+NEGATE+BINDING+CLOSE_BRACKET,bindingRegex=new RegExp(EXPRESSION,"g");// Regular expressions used for binding
/**
                                                   * Create a string from binding parts of all the literal parts
                                                   *
                                                   * @param {!Array<BindingPart>} parts All parts to stringify
                                                   * @return {string} String made from the literal parts
                                                   */function literalFromParts(parts){let s="";for(let i=0,literal;i<parts.length;i++){literal=parts[i].literal;s+=literal||""}return s}/**
   * Parses an expression string for a method signature, and returns a metadata
   * describing the method in terms of `methodName`, `static` (whether all the
   * arguments are literals), and an array of `args`
   *
   * @param {string} expression The expression to parse
   * @return {?MethodSignature} The method metadata object if a method expression was
   *   found, otherwise `undefined`
   * @private
   */function parseMethod(expression){// tries to match valid javascript property names
let m=expression.match(/([^\s]+?)\(([\s\S]*)\)/);if(m){let methodName=m[1],sig={methodName,static:!0,args:emptyArray};if(m[2].trim()){// replace escaped commas with comma entity, split on un-escaped commas
let args=m[2].replace(/\\,/g,"&comma;").split(",");return parseArgs(args,sig)}else{return sig}}return null}/**
   * Parses an array of arguments and sets the `args` property of the supplied
   * signature metadata object. Sets the `static` property to false if any
   * argument is a non-literal.
   *
   * @param {!Array<string>} argList Array of argument names
   * @param {!MethodSignature} sig Method signature metadata object
   * @return {!MethodSignature} The updated signature metadata object
   * @private
   */function parseArgs(argList,sig){sig.args=argList.map(function(rawArg){let arg=parseArg(rawArg);if(!arg.literal){sig.static=!1}return arg},this);return sig}/**
   * Parses an individual argument, and returns an argument metadata object
   * with the following fields:
   *
   *   {
   *     value: 'prop',        // property/path or literal value
   *     literal: false,       // whether argument is a literal
   *     structured: false,    // whether the property is a path
   *     rootProperty: 'prop', // the root property of the path
   *     wildcard: false       // whether the argument was a wildcard '.*' path
   *   }
   *
   * @param {string} rawArg The string value of the argument
   * @return {!MethodArg} Argument metadata object
   * @private
   */function parseArg(rawArg){// clean up whitespace
let arg=rawArg.trim()// replace comma entity with comma
.replace(/&comma;/g,",")// repair extra escape sequences; note only commas strictly need
// escaping, but we allow any other char to be escaped since its
// likely users will do this
.replace(/\\(.)/g,"$1"),a={name:arg,value:"",literal:!1},fc=arg[0];// basic argument descriptor
if("-"===fc){fc=arg[1]}if("0"<=fc&&"9">=fc){fc="#"}switch(fc){case"'":case"\"":a.value=arg.slice(1,-1);a.literal=!0;break;case"#":a.value=+arg;a.literal=!0;break;}// if not literal, look for structured path
if(!a.literal){a.rootProperty=root(arg);// detect structured path (has dots)
a.structured=isPath(arg);if(a.structured){a.wildcard=".*"==arg.slice(-2);if(a.wildcard){a.name=arg.slice(0,-2)}}}return a}function getArgValue(data,props,path){let value=get(data,path);// when data is not stored e.g. `splices`, get the value from changedProps
// TODO(kschaaf): Note, this can cause a rare issue where the wildcard
// info.value could pull a stale value out of changedProps during a reentrant
// change that sets the value back to undefined.
// https://github.com/Polymer/polymer/issues/5479
if(value===void 0){value=props[path]}return value}// data api
/**
 * Sends array splice notifications (`.splices` and `.length`)
 *
 * Note: this implementation only accepts normalized paths
 *
 * @param {!Polymer_PropertyEffects} inst Instance to send notifications to
 * @param {Array} array The array the mutations occurred on
 * @param {string} path The path to the array that was mutated
 * @param {Array} splices Array of splice records
 * @return {void}
 * @private
 */function notifySplices(inst,array,path,splices){inst.notifyPath(path+".splices",{indexSplices:splices});inst.notifyPath(path+".length",array.length)}/**
   * Creates a splice record and sends an array splice notification for
   * the described mutation
   *
   * Note: this implementation only accepts normalized paths
   *
   * @param {!Polymer_PropertyEffects} inst Instance to send notifications to
   * @param {Array} array The array the mutations occurred on
   * @param {string} path The path to the array that was mutated
   * @param {number} index Index at which the array mutation occurred
   * @param {number} addedCount Number of added items
   * @param {Array} removed Array of removed items
   * @return {void}
   * @private
   */function notifySplice(inst,array,path,index,addedCount,removed){notifySplices(inst,array,path,[{index:index,addedCount:addedCount,removed:removed,object:array,type:"splice"}])}/**
   * Returns an upper-cased version of the string.
   *
   * @param {string} name String to uppercase
   * @return {string} Uppercased string
   * @private
   */function upper(name){return name[0].toUpperCase()+name.substring(1)}/**
   * Element class mixin that provides meta-programming for Polymer's template
   * binding and data observation (collectively, "property effects") system.
   *
   * This mixin uses provides the following key static methods for adding
   * property effects to an element class:
   * - `addPropertyEffect`
   * - `createPropertyObserver`
   * - `createMethodObserver`
   * - `createNotifyingProperty`
   * - `createReadOnlyProperty`
   * - `createReflectedProperty`
   * - `createComputedProperty`
   * - `bindTemplate`
   *
   * Each method creates one or more property accessors, along with metadata
   * used by this mixin's implementation of `_propertiesChanged` to perform
   * the property effects.
   *
   * Underscored versions of the above methods also exist on the element
   * prototype for adding property effects on instances at runtime.
   *
   * Note that this mixin overrides several `PropertyAccessors` methods, in
   * many cases to maintain guarantees provided by the Polymer 1.x features;
   * notably it changes property accessors to be synchronous by default
   * whereas the default when using `PropertyAccessors` standalone is to be
   * async by default.
   *
   * @mixinFunction
   * @polymer
   * @appliesMixin TemplateStamp
   * @appliesMixin PropertyAccessors
   * @summary Element class mixin that provides meta-programming for Polymer's
   * template binding and data observation system.
   * @template T
   * @param {function(new:T)} superClass Class to apply mixin to.
   * @return {function(new:T)} superClass with mixin applied.
   */const PropertyEffects=dedupingMixin(superClass=>{/**
   * @constructor
   * @implements {Polymer_PropertyAccessors}
   * @implements {Polymer_TemplateStamp}
   * @unrestricted
   * @private
   */const propertyEffectsBase=TemplateStamp(PropertyAccessors(superClass));/**
                                                                                * @polymer
                                                                                * @mixinClass
                                                                                * @implements {Polymer_PropertyEffects}
                                                                                * @extends {propertyEffectsBase}
                                                                                * @unrestricted
                                                                                */class PropertyEffects extends propertyEffectsBase{constructor(){super();/** @type {boolean} */ // Used to identify users of this mixin, ala instanceof
this.__isPropertyEffectsClient=!0;/** @type {number} */ // NOTE: used to track re-entrant calls to `_flushProperties`
// path changes dirty check against `__dataTemp` only during one "turn"
// and are cleared when `__dataCounter` returns to 0.
this.__dataCounter=0;/** @type {boolean} */this.__dataClientsReady;/** @type {Array} */this.__dataPendingClients;/** @type {Object} */this.__dataToNotify;/** @type {Object} */this.__dataLinkedPaths;/** @type {boolean} */this.__dataHasPaths;/** @type {Object} */this.__dataCompoundStorage;/** @type {Polymer_PropertyEffects} */this.__dataHost;/** @type {!Object} */this.__dataTemp;/** @type {boolean} */this.__dataClientsInitialized;/** @type {!Object} */this.__data;/** @type {!Object|null} */this.__dataPending;/** @type {!Object} */this.__dataOld;/** @type {Object} */this.__computeEffects;/** @type {Object} */this.__reflectEffects;/** @type {Object} */this.__notifyEffects;/** @type {Object} */this.__propagateEffects;/** @type {Object} */this.__observeEffects;/** @type {Object} */this.__readOnly;/** @type {!TemplateInfo} */this.__templateInfo}/**
       * @return {!Object<string, string>} Effect prototype property name map.
       */get PROPERTY_EFFECT_TYPES(){return TYPES}/**
       * @override
       * @return {void}
       */_initializeProperties(){super._initializeProperties();hostStack.registerHost(this);this.__dataClientsReady=!1;this.__dataPendingClients=null;this.__dataToNotify=null;this.__dataLinkedPaths=null;this.__dataHasPaths=!1;// May be set on instance prior to upgrade
this.__dataCompoundStorage=this.__dataCompoundStorage||null;this.__dataHost=this.__dataHost||null;this.__dataTemp={};this.__dataClientsInitialized=!1}/**
       * Overrides `PropertyAccessors` implementation to provide a
       * more efficient implementation of initializing properties from
       * the prototype on the instance.
       *
       * @override
       * @param {Object} props Properties to initialize on the prototype
       * @return {void}
       */_initializeProtoProperties(props){this.__data=Object.create(props);this.__dataPending=Object.create(props);this.__dataOld={}}/**
       * Overrides `PropertyAccessors` implementation to avoid setting
       * `_setProperty`'s `shouldNotify: true`.
       *
       * @override
       * @param {Object} props Properties to initialize on the instance
       * @return {void}
       */_initializeInstanceProperties(props){let readOnly=this[TYPES.READ_ONLY];for(let prop in props){if(!readOnly||!readOnly[prop]){this.__dataPending=this.__dataPending||{};this.__dataOld=this.__dataOld||{};this.__data[prop]=this.__dataPending[prop]=props[prop]}}}// Prototype setup ----------------------------------------
/**
     * Equivalent to static `addPropertyEffect` API but can be called on
     * an instance to add effects at runtime.  See that method for
     * full API docs.
     *
     * @override
     * @param {string} property Property that should trigger the effect
     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES
     * @param {Object=} effect Effect metadata object
     * @return {void}
     * @protected
     */_addPropertyEffect(property,type,effect){this._createPropertyAccessor(property,type==TYPES.READ_ONLY);// effects are accumulated into arrays per property based on type
let effects=ensureOwnEffectMap(this,type)[property];if(!effects){effects=this[type][property]=[]}effects.push(effect)}/**
       * Removes the given property effect.
       *
       * @override
       * @param {string} property Property the effect was associated with
       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES
       * @param {Object=} effect Effect metadata object to remove
       * @return {void}
       */_removePropertyEffect(property,type,effect){let effects=ensureOwnEffectMap(this,type)[property],idx=effects.indexOf(effect);if(0<=idx){effects.splice(idx,1)}}/**
       * Returns whether the current prototype/instance has a property effect
       * of a certain type.
       *
       * @override
       * @param {string} property Property name
       * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES
       * @return {boolean} True if the prototype/instance has an effect of this
       *     type
       * @protected
       */_hasPropertyEffect(property,type){let effects=this[type];return!!(effects&&effects[property])}/**
       * Returns whether the current prototype/instance has a "read only"
       * accessor for the given property.
       *
       * @override
       * @param {string} property Property name
       * @return {boolean} True if the prototype/instance has an effect of this
       *     type
       * @protected
       */_hasReadOnlyEffect(property){return this._hasPropertyEffect(property,TYPES.READ_ONLY)}/**
       * Returns whether the current prototype/instance has a "notify"
       * property effect for the given property.
       *
       * @override
       * @param {string} property Property name
       * @return {boolean} True if the prototype/instance has an effect of this
       *     type
       * @protected
       */_hasNotifyEffect(property){return this._hasPropertyEffect(property,TYPES.NOTIFY)}/**
       * Returns whether the current prototype/instance has a "reflect to
       * attribute" property effect for the given property.
       *
       * @override
       * @param {string} property Property name
       * @return {boolean} True if the prototype/instance has an effect of this
       *     type
       * @protected
       */_hasReflectEffect(property){return this._hasPropertyEffect(property,TYPES.REFLECT)}/**
       * Returns whether the current prototype/instance has a "computed"
       * property effect for the given property.
       *
       * @override
       * @param {string} property Property name
       * @return {boolean} True if the prototype/instance has an effect of this
       *     type
       * @protected
       */_hasComputedEffect(property){return this._hasPropertyEffect(property,TYPES.COMPUTE)}// Runtime ----------------------------------------
/**
     * Sets a pending property or path.  If the root property of the path in
     * question had no accessor, the path is set, otherwise it is enqueued
     * via `_setPendingProperty`.
     *
     * This function isolates relatively expensive functionality necessary
     * for the public API (`set`, `setProperties`, `notifyPath`, and property
     * change listeners via {{...}} bindings), such that it is only done
     * when paths enter the system, and not at every propagation step.  It
     * also sets a `__dataHasPaths` flag on the instance which is used to
     * fast-path slower path-matching code in the property effects host paths.
     *
     * `path` can be a path string or array of path parts as accepted by the
     * public API.
     *
     * @override
     * @param {string | !Array<number|string>} path Path to set
     * @param {*} value Value to set
     * @param {boolean=} shouldNotify Set to true if this change should
     *  cause a property notification event dispatch
     * @param {boolean=} isPathNotification If the path being set is a path
     *   notification of an already changed value, as opposed to a request
     *   to set and notify the change.  In the latter `false` case, a dirty
     *   check is performed and then the value is set to the path before
     *   enqueuing the pending property change.
     * @return {boolean} Returns true if the property/path was enqueued in
     *   the pending changes bag.
     * @protected
     */_setPendingPropertyOrPath(path,value,shouldNotify,isPathNotification){if(isPathNotification||root(Array.isArray(path)?path[0]:path)!==path){// Dirty check changes being set to a path against the actual object,
// since this is the entry point for paths into the system; from here
// the only dirty checks are against the `__dataTemp` cache to prevent
// duplicate work in the same turn only. Note, if this was a notification
// of a change already set to a path (isPathNotification: true),
// we always let the change through and skip the `set` since it was
// already dirty checked at the point of entry and the underlying
// object has already been updated
if(!isPathNotification){let old=get(this,path);path=/** @type {string} */set(this,path,value);// Use property-accessor's simpler dirty check
if(!path||!super._shouldPropertyChange(path,value,old)){return!1}}this.__dataHasPaths=!0;if(this._setPendingProperty(/**@type{string}*/path,value,shouldNotify)){computeLinkedPaths(this,/**@type{string}*/path,value);return!0}}else{if(this.__dataHasAccessor&&this.__dataHasAccessor[path]){return this._setPendingProperty(/**@type{string}*/path,value,shouldNotify)}else{this[path]=value}}return!1}/**
       * Applies a value to a non-Polymer element/node's property.
       *
       * The implementation makes a best-effort at binding interop:
       * Some native element properties have side-effects when
       * re-setting the same value (e.g. setting `<input>.value` resets the
       * cursor position), so we do a dirty-check before setting the value.
       * However, for better interop with non-Polymer custom elements that
       * accept objects, we explicitly re-set object changes coming from the
       * Polymer world (which may include deep object changes without the
       * top reference changing), erring on the side of providing more
       * information.
       *
       * Users may override this method to provide alternate approaches.
       *
       * @override
       * @param {!Node} node The node to set a property on
       * @param {string} prop The property to set
       * @param {*} value The value to set
       * @return {void}
       * @protected
       */_setUnmanagedPropertyToNode(node,prop,value){// It is a judgment call that resetting primitives is
// "bad" and resettings objects is also "good"; alternatively we could
// implement a whitelist of tag & property values that should never
// be reset (e.g. <input>.value && <select>.value)
if(value!==node[prop]||"object"==typeof value){// Note, className needs style scoping so this needs wrapping.
if("className"===prop){node=/** @type {!Node} */wrap$1(node)}node[prop]=value}}/**
       * Overrides the `PropertiesChanged` implementation to introduce special
       * dirty check logic depending on the property & value being set:
       *
       * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})
       *    Stored in `__dataTemp`, dirty checked against `__dataTemp`
       * 2. Object set to simple property (e.g. 'prop': {...})
       *    Stored in `__dataTemp` and `__data`, dirty checked against
       *    `__dataTemp` by default implementation of `_shouldPropertyChange`
       * 3. Primitive value set to simple property (e.g. 'prop': 42)
       *    Stored in `__data`, dirty checked against `__data`
       *
       * The dirty-check is important to prevent cycles due to two-way
       * notification, but paths and objects are only dirty checked against any
       * previous value set during this turn via a "temporary cache" that is
       * cleared when the last `_propertiesChanged` exits. This is so:
       * a. any cached array paths (e.g. 'array.3.prop') may be invalidated
       *    due to array mutations like shift/unshift/splice; this is fine
       *    since path changes are dirty-checked at user entry points like `set`
       * b. dirty-checking for objects only lasts one turn to allow the user
       *    to mutate the object in-place and re-set it with the same identity
       *    and have all sub-properties re-propagated in a subsequent turn.
       *
       * The temp cache is not necessarily sufficient to prevent invalid array
       * paths, since a splice can happen during the same turn (with pathological
       * user code); we could introduce a "fixup" for temporarily cached array
       * paths if needed: https://github.com/Polymer/polymer/issues/4227
       *
       * @override
       * @param {string} property Name of the property
       * @param {*} value Value to set
       * @param {boolean=} shouldNotify True if property should fire notification
       *   event (applies only for `notify: true` properties)
       * @return {boolean} Returns true if the property changed
       */_setPendingProperty(property,value,shouldNotify){let propIsPath=this.__dataHasPaths&&isPath(property),prevProps=propIsPath?this.__dataTemp:this.__data;if(this._shouldPropertyChange(property,value,prevProps[property])){if(!this.__dataPending){this.__dataPending={};this.__dataOld={}}// Ensure old is captured from the last turn
if(!(property in this.__dataOld)){this.__dataOld[property]=this.__data[property]}// Paths are stored in temporary cache (cleared at end of turn),
// which is used for dirty-checking, all others stored in __data
if(propIsPath){this.__dataTemp[property]=value}else{this.__data[property]=value}// All changes go into pending property bag, passed to _propertiesChanged
this.__dataPending[property]=value;// Track properties that should notify separately
if(propIsPath||this[TYPES.NOTIFY]&&this[TYPES.NOTIFY][property]){this.__dataToNotify=this.__dataToNotify||{};this.__dataToNotify[property]=shouldNotify}return!0}return!1}/**
       * Overrides base implementation to ensure all accessors set `shouldNotify`
       * to true, for per-property notification tracking.
       *
       * @override
       * @param {string} property Name of the property
       * @param {*} value Value to set
       * @return {void}
       */_setProperty(property,value){if(this._setPendingProperty(property,value,!0)){this._invalidateProperties()}}/**
       * Overrides `PropertyAccessor`'s default async queuing of
       * `_propertiesChanged`: if `__dataReady` is false (has not yet been
       * manually flushed), the function no-ops; otherwise flushes
       * `_propertiesChanged` synchronously.
       *
       * @override
       * @return {void}
       */_invalidateProperties(){if(this.__dataReady){this._flushProperties()}}/**
       * Enqueues the given client on a list of pending clients, whose
       * pending property changes can later be flushed via a call to
       * `_flushClients`.
       *
       * @override
       * @param {Object} client PropertyEffects client to enqueue
       * @return {void}
       * @protected
       */_enqueueClient(client){this.__dataPendingClients=this.__dataPendingClients||[];if(client!==this){this.__dataPendingClients.push(client)}}/**
       * Overrides superclass implementation.
       *
       * @override
       * @return {void}
       * @protected
       */_flushProperties(){this.__dataCounter++;super._flushProperties();this.__dataCounter--}/**
       * Flushes any clients previously enqueued via `_enqueueClient`, causing
       * their `_flushProperties` method to run.
       *
       * @override
       * @return {void}
       * @protected
       */_flushClients(){if(!this.__dataClientsReady){this.__dataClientsReady=!0;this._readyClients();// Override point where accessors are turned on; importantly,
// this is after clients have fully readied, providing a guarantee
// that any property effects occur only after all clients are ready.
this.__dataReady=!0}else{this.__enableOrFlushClients()}}// NOTE: We ensure clients either enable or flush as appropriate. This
// handles two corner cases:
// (1) clients flush properly when connected/enabled before the host
// enables; e.g.
//   (a) Templatize stamps with no properties and does not flush and
//   (b) the instance is inserted into dom and
//   (c) then the instance flushes.
// (2) clients enable properly when not connected/enabled when the host
// flushes; e.g.
//   (a) a template is runtime stamped and not yet connected/enabled
//   (b) a host sets a property, causing stamped dom to flush
//   (c) the stamped dom enables.
__enableOrFlushClients(){let clients=this.__dataPendingClients;if(clients){this.__dataPendingClients=null;for(let i=0,client;i<clients.length;i++){client=clients[i];if(!client.__dataEnabled){client._enableProperties()}else if(client.__dataPending){client._flushProperties()}}}}/**
       * Perform any initial setup on client dom. Called before the first
       * `_flushProperties` call on client dom and before any element
       * observers are called.
       *
       * @override
       * @return {void}
       * @protected
       */_readyClients(){this.__enableOrFlushClients()}/**
       * Sets a bag of property changes to this instance, and
       * synchronously processes all effects of the properties as a batch.
       *
       * Property names must be simple properties, not paths.  Batched
       * path propagation is not supported.
       *
       * @override
       * @param {Object} props Bag of one or more key-value pairs whose key is
       *   a property and value is the new value to set for that property.
       * @param {boolean=} setReadOnly When true, any private values set in
       *   `props` will be set. By default, `setProperties` will not set
       *   `readOnly: true` root properties.
       * @return {void}
       * @public
       */setProperties(props,setReadOnly){for(let path in props){if(setReadOnly||!this[TYPES.READ_ONLY]||!this[TYPES.READ_ONLY][path]){//TODO(kschaaf): explicitly disallow paths in setProperty?
// wildcard observers currently only pass the first changed path
// in the `info` object, and you could do some odd things batching
// paths, e.g. {'foo.bar': {...}, 'foo': null}
this._setPendingPropertyOrPath(path,props[path],!0)}}this._invalidateProperties()}/**
       * Overrides `PropertyAccessors` so that property accessor
       * side effects are not enabled until after client dom is fully ready.
       * Also calls `_flushClients` callback to ensure client dom is enabled
       * that was not enabled as a result of flushing properties.
       *
       * @override
       * @return {void}
       */ready(){// It is important that `super.ready()` is not called here as it
// immediately turns on accessors. Instead, we wait until `readyClients`
// to enable accessors to provide a guarantee that clients are ready
// before processing any accessors side effects.
this._flushProperties();// If no data was pending, `_flushProperties` will not `flushClients`
// so ensure this is done.
if(!this.__dataClientsReady){this._flushClients()}// Before ready, client notifications do not trigger _flushProperties.
// Therefore a flush is necessary here if data has been set.
if(this.__dataPending){this._flushProperties()}}/**
       * Implements `PropertyAccessors`'s properties changed callback.
       *
       * Runs each class of effects for the batch of changed properties in
       * a specific order (compute, propagate, reflect, observe, notify).
       *
       * @override
       * @param {!Object} currentProps Bag of all current accessor values
       * @param {?Object} changedProps Bag of properties changed since the last
       *   call to `_propertiesChanged`
       * @param {?Object} oldProps Bag of previous values for each property
       *   in `changedProps`
       * @return {void}
       */_propertiesChanged(currentProps,changedProps,oldProps){// ----------------------------
// let c = Object.getOwnPropertyNames(changedProps || {});
// window.debug && console.group(this.localName + '#' + this.id + ': ' + c);
// if (window.debug) { debugger; }
// ----------------------------
let hasPaths=this.__dataHasPaths;this.__dataHasPaths=!1;// Compute properties
runComputedEffects(this,changedProps,oldProps,hasPaths);// Clear notify properties prior to possible reentry (propagate, observe),
// but after computing effects have a chance to add to them
let notifyProps=this.__dataToNotify;this.__dataToNotify=null;// Propagate properties to clients
this._propagatePropertyChanges(changedProps,oldProps,hasPaths);// Flush clients
this._flushClients();// Reflect properties
runEffects(this,this[TYPES.REFLECT],changedProps,oldProps,hasPaths);// Observe properties
runEffects(this,this[TYPES.OBSERVE],changedProps,oldProps,hasPaths);// Notify properties to host
if(notifyProps){runNotifyEffects(this,notifyProps,changedProps,oldProps,hasPaths)}// Clear temporary cache at end of turn
if(1==this.__dataCounter){this.__dataTemp={}}// ----------------------------
// window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);
// ----------------------------
}/**
       * Called to propagate any property changes to stamped template nodes
       * managed by this element.
       *
       * @override
       * @param {Object} changedProps Bag of changed properties
       * @param {Object} oldProps Bag of previous values for changed properties
       * @param {boolean} hasPaths True with `props` contains one or more paths
       * @return {void}
       * @protected
       */_propagatePropertyChanges(changedProps,oldProps,hasPaths){if(this[TYPES.PROPAGATE]){runEffects(this,this[TYPES.PROPAGATE],changedProps,oldProps,hasPaths)}let templateInfo=this.__templateInfo;while(templateInfo){runEffects(this,templateInfo.propertyEffects,changedProps,oldProps,hasPaths,templateInfo.nodeList);templateInfo=templateInfo.nextTemplateInfo}}/**
       * Aliases one data path as another, such that path notifications from one
       * are routed to the other.
       *
       * @override
       * @param {string | !Array<string|number>} to Target path to link.
       * @param {string | !Array<string|number>} from Source path to link.
       * @return {void}
       * @public
       */linkPaths(to,from){to=normalize(to);from=normalize(from);this.__dataLinkedPaths=this.__dataLinkedPaths||{};this.__dataLinkedPaths[to]=from}/**
       * Removes a data path alias previously established with `_linkPaths`.
       *
       * Note, the path to unlink should be the target (`to`) used when
       * linking the paths.
       *
       * @override
       * @param {string | !Array<string|number>} path Target path to unlink.
       * @return {void}
       * @public
       */unlinkPaths(path){path=normalize(path);if(this.__dataLinkedPaths){delete this.__dataLinkedPaths[path]}}/**
       * Notify that an array has changed.
       *
       * Example:
       *
       *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];
       *     ...
       *     this.items.splice(1, 1, {name: 'Sam'});
       *     this.items.push({name: 'Bob'});
       *     this.notifySplices('items', [
       *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1,
       *         object: this.items, type: 'splice' },
       *       { index: 3, removed: [], addedCount: 1,
       *         object: this.items, type: 'splice'}
       *     ]);
       *
       * @param {string} path Path that should be notified.
       * @param {Array} splices Array of splice records indicating ordered
       *   changes that occurred to the array. Each record should have the
       *   following fields:
       *    * index: index at which the change occurred
       *    * removed: array of items that were removed from this index
       *    * addedCount: number of new items added at this index
       *    * object: a reference to the array in question
       *    * type: the string literal 'splice'
       *
       *   Note that splice records _must_ be normalized such that they are
       *   reported in index order (raw results from `Object.observe` are not
       *   ordered and must be normalized/merged before notifying).
       *
       * @override
       * @return {void}
       * @public
       */notifySplices(path,splices){let info={path:""},array=/** @type {Array} */get(this,path,info);notifySplices(this,array,info.path,splices)}/**
       * Convenience method for reading a value from a path.
       *
       * Note, if any part in the path is undefined, this method returns
       * `undefined` (this method does not throw when dereferencing undefined
       * paths).
       *
       * @override
       * @param {(string|!Array<(string|number)>)} path Path to the value
       *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)
       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that
       *   bracketed expressions are not supported; string-based path parts
       *   *must* be separated by dots.  Note that when dereferencing array
       *   indices, the index may be used as a dotted part directly
       *   (e.g. `users.12.name` or `['users', 12, 'name']`).
       * @param {Object=} root Root object from which the path is evaluated.
       * @return {*} Value at the path, or `undefined` if any part of the path
       *   is undefined.
       * @public
       */get(path,root){return get(root||this,path)}/**
       * Convenience method for setting a value to a path and notifying any
       * elements bound to the same path.
       *
       * Note, if any part in the path except for the last is undefined,
       * this method does nothing (this method does not throw when
       * dereferencing undefined paths).
       *
       * @override
       * @param {(string|!Array<(string|number)>)} path Path to the value
       *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)
       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that
       *   bracketed expressions are not supported; string-based path parts
       *   *must* be separated by dots.  Note that when dereferencing array
       *   indices, the index may be used as a dotted part directly
       *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).
       * @param {*} value Value to set at the specified path.
       * @param {Object=} root Root object from which the path is evaluated.
       *   When specified, no notification will occur.
       * @return {void}
       * @public
       */set(path,value,root){if(root){set(root,path,value)}else{if(!this[TYPES.READ_ONLY]||!this[TYPES.READ_ONLY][/** @type {string} */path]){if(this._setPendingPropertyOrPath(path,value,!0)){this._invalidateProperties()}}}}/**
       * Adds items onto the end of the array at the path specified.
       *
       * The arguments after `path` and return value match that of
       * `Array.prototype.push`.
       *
       * This method notifies other paths to the same array that a
       * splice occurred to the array.
       *
       * @override
       * @param {string | !Array<string|number>} path Path to array.
       * @param {...*} items Items to push onto array
       * @return {number} New length of the array.
       * @public
       */push(path,...items){let info={path:""},array=/** @type {Array}*/get(this,path,info),len=array.length,ret=array.push(...items);if(items.length){notifySplice(this,array,info.path,len,items.length,[])}return ret}/**
       * Removes an item from the end of array at the path specified.
       *
       * The arguments after `path` and return value match that of
       * `Array.prototype.pop`.
       *
       * This method notifies other paths to the same array that a
       * splice occurred to the array.
       *
       * @override
       * @param {string | !Array<string|number>} path Path to array.
       * @return {*} Item that was removed.
       * @public
       */pop(path){let info={path:""},array=/** @type {Array} */get(this,path,info),hadLength=!!array.length,ret=array.pop();if(hadLength){notifySplice(this,array,info.path,array.length,0,[ret])}return ret}/**
       * Starting from the start index specified, removes 0 or more items
       * from the array and inserts 0 or more new items in their place.
       *
       * The arguments after `path` and return value match that of
       * `Array.prototype.splice`.
       *
       * This method notifies other paths to the same array that a
       * splice occurred to the array.
       *
       * @override
       * @param {string | !Array<string|number>} path Path to array.
       * @param {number} start Index from which to start removing/inserting.
       * @param {number=} deleteCount Number of items to remove.
       * @param {...*} items Items to insert into array.
       * @return {Array} Array of removed items.
       * @public
       */splice(path,start,deleteCount,...items){let info={path:""},array=/** @type {Array} */get(this,path,info);// Normalize fancy native splice handling of crazy start values
if(0>start){start=array.length-Math.floor(-start)}else if(start){start=Math.floor(start)}// array.splice does different things based on the number of arguments
// you pass in. Therefore, array.splice(0) and array.splice(0, undefined)
// do different things. In the former, the whole array is cleared. In the
// latter, no items are removed.
// This means that we need to detect whether 1. one of the arguments
// is actually passed in and then 2. determine how many arguments
// we should pass on to the native array.splice
//
let ret;// Omit any additional arguments if they were not passed in
if(2===arguments.length){ret=array.splice(start);// Either start was undefined and the others were defined, but in this
// case we can safely pass on all arguments
//
// Note: this includes the case where none of the arguments were passed in,
// e.g. this.splice('array'). However, if both start and deleteCount
// are undefined, array.splice will not modify the array (as expected)
}else{ret=array.splice(start,deleteCount,...items)}// At the end, check whether any items were passed in (e.g. insertions)
// or if the return array contains items (e.g. deletions).
// Only notify if items were added or deleted.
if(items.length||ret.length){notifySplice(this,array,info.path,start,items.length,ret)}return ret}/**
       * Removes an item from the beginning of array at the path specified.
       *
       * The arguments after `path` and return value match that of
       * `Array.prototype.pop`.
       *
       * This method notifies other paths to the same array that a
       * splice occurred to the array.
       *
       * @override
       * @param {string | !Array<string|number>} path Path to array.
       * @return {*} Item that was removed.
       * @public
       */shift(path){let info={path:""},array=/** @type {Array} */get(this,path,info),hadLength=!!array.length,ret=array.shift();if(hadLength){notifySplice(this,array,info.path,0,0,[ret])}return ret}/**
       * Adds items onto the beginning of the array at the path specified.
       *
       * The arguments after `path` and return value match that of
       * `Array.prototype.push`.
       *
       * This method notifies other paths to the same array that a
       * splice occurred to the array.
       *
       * @override
       * @param {string | !Array<string|number>} path Path to array.
       * @param {...*} items Items to insert info array
       * @return {number} New length of the array.
       * @public
       */unshift(path,...items){let info={path:""},array=/** @type {Array} */get(this,path,info),ret=array.unshift(...items);if(items.length){notifySplice(this,array,info.path,0,items.length,[])}return ret}/**
       * Notify that a path has changed.
       *
       * Example:
       *
       *     this.item.user.name = 'Bob';
       *     this.notifyPath('item.user.name');
       *
       * @override
       * @param {string} path Path that should be notified.
       * @param {*=} value Value at the path (optional).
       * @return {void}
       * @public
       */notifyPath(path,value){/** @type {string} */let propPath;if(1==arguments.length){// Get value if not supplied
let info={path:""};value=get(this,path,info);propPath=info.path}else if(Array.isArray(path)){// Normalize path if needed
propPath=normalize(path)}else{propPath=/** @type{string} */path}if(this._setPendingPropertyOrPath(propPath,value,!0,!0)){this._invalidateProperties()}}/**
       * Equivalent to static `createReadOnlyProperty` API but can be called on
       * an instance to add effects at runtime.  See that method for
       * full API docs.
       *
       * @override
       * @param {string} property Property name
       * @param {boolean=} protectedSetter Creates a custom protected setter
       *   when `true`.
       * @return {void}
       * @protected
       */_createReadOnlyProperty(property,protectedSetter){this._addPropertyEffect(property,TYPES.READ_ONLY);if(protectedSetter){this["_set"+upper(property)]=/** @this {PropertyEffects} */function(value){this._setProperty(property,value)}}}/**
       * Equivalent to static `createPropertyObserver` API but can be called on
       * an instance to add effects at runtime.  See that method for
       * full API docs.
       *
       * @override
       * @param {string} property Property name
       * @param {string|function(*,*)} method Function or name of observer method
       *     to call
       * @param {boolean=} dynamicFn Whether the method name should be included as
       *   a dependency to the effect.
       * @return {void}
       * @protected
       */_createPropertyObserver(property,method,dynamicFn){let info={property,method,dynamicFn:!!dynamicFn};this._addPropertyEffect(property,TYPES.OBSERVE,{fn:runObserverEffect,info,trigger:{name:property}});if(dynamicFn){this._addPropertyEffect(/** @type {string} */method,TYPES.OBSERVE,{fn:runObserverEffect,info,trigger:{name:method}})}}/**
       * Equivalent to static `createMethodObserver` API but can be called on
       * an instance to add effects at runtime.  See that method for
       * full API docs.
       *
       * @override
       * @param {string} expression Method expression
       * @param {boolean|Object=} dynamicFn Boolean or object map indicating
       *   whether method names should be included as a dependency to the effect.
       * @return {void}
       * @protected
       */_createMethodObserver(expression,dynamicFn){let sig=parseMethod(expression);if(!sig){throw new Error("Malformed observer expression '"+expression+"'")}createMethodEffect(this,sig,TYPES.OBSERVE,runMethodEffect,null,dynamicFn)}/**
       * Equivalent to static `createNotifyingProperty` API but can be called on
       * an instance to add effects at runtime.  See that method for
       * full API docs.
       *
       * @override
       * @param {string} property Property name
       * @return {void}
       * @protected
       */_createNotifyingProperty(property){this._addPropertyEffect(property,TYPES.NOTIFY,{fn:runNotifyEffect,info:{eventName:camelToDashCase(property)+"-changed",property:property}})}/**
       * Equivalent to static `createReflectedProperty` API but can be called on
       * an instance to add effects at runtime.  See that method for
       * full API docs.
       *
       * @override
       * @param {string} property Property name
       * @return {void}
       * @protected
       * @suppress {missingProperties} go/missingfnprops
       */_createReflectedProperty(property){let attr=this.constructor.attributeNameForProperty(property);if("-"===attr[0]){console.warn("Property "+property+" cannot be reflected to attribute "+attr+" because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property instead.")}else{this._addPropertyEffect(property,TYPES.REFLECT,{fn:runReflectEffect,info:{attrName:attr}})}}/**
       * Equivalent to static `createComputedProperty` API but can be called on
       * an instance to add effects at runtime.  See that method for
       * full API docs.
       *
       * @override
       * @param {string} property Name of computed property to set
       * @param {string} expression Method expression
       * @param {boolean|Object=} dynamicFn Boolean or object map indicating
       *   whether method names should be included as a dependency to the effect.
       * @return {void}
       * @protected
       */_createComputedProperty(property,expression,dynamicFn){let sig=parseMethod(expression);if(!sig){throw new Error("Malformed computed expression '"+expression+"'")}createMethodEffect(this,sig,TYPES.COMPUTE,runComputedEffect,property,dynamicFn)}/**
       * Gather the argument values for a method specified in the provided array
       * of argument metadata.
       *
       * The `path` and `value` arguments are used to fill in wildcard descriptor
       * when the method is being called as a result of a path notification.
       *
       * @param {!Array<!MethodArg>} args Array of argument metadata
       * @param {string} path Property/path name that triggered the method effect
       * @param {Object} props Bag of current property changes
       * @return {Array<*>} Array of argument values
       * @private
       */_marshalArgs(args,path,props){const data=this.__data,values=[];for(let i=0,l=args.length;i<l;i++){let{name,structured,wildcard,value,literal}=args[i];if(!literal){if(wildcard){const matches=isDescendant(name,path),pathValue=getArgValue(data,props,matches?path:name);value={path:matches?path:name,value:pathValue,base:matches?get(data,name):pathValue}}else{value=structured?getArgValue(data,props,name):data[name]}}values[i]=value}return values}// -- static class methods ------------
/**
     * Ensures an accessor exists for the specified property, and adds
     * to a list of "property effects" that will run when the accessor for
     * the specified property is set.  Effects are grouped by "type", which
     * roughly corresponds to a phase in effect processing.  The effect
     * metadata should be in the following form:
     *
     *     {
     *       fn: effectFunction, // Reference to function to call to perform effect
     *       info: { ... }       // Effect metadata passed to function
     *       trigger: {          // Optional triggering metadata; if not provided
     *         name: string      // the property is treated as a wildcard
     *         structured: boolean
     *         wildcard: boolean
     *       }
     *     }
     *
     * Effects are called from `_propertiesChanged` in the following order by
     * type:
     *
     * 1. COMPUTE
     * 2. PROPAGATE
     * 3. REFLECT
     * 4. OBSERVE
     * 5. NOTIFY
     *
     * Effect functions are called with the following signature:
     *
     *     effectFunction(inst, path, props, oldProps, info, hasPaths)
     *
     * @param {string} property Property that should trigger the effect
     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES
     * @param {Object=} effect Effect metadata object
     * @return {void}
     * @protected
     * @nocollapse
     */static addPropertyEffect(property,type,effect){this.prototype._addPropertyEffect(property,type,effect)}/**
       * Creates a single-property observer for the given property.
       *
       * @param {string} property Property name
       * @param {string|function(*,*)} method Function or name of observer method to call
       * @param {boolean=} dynamicFn Whether the method name should be included as
       *   a dependency to the effect.
       * @return {void}
       * @protected
       * @nocollapse
       */static createPropertyObserver(property,method,dynamicFn){this.prototype._createPropertyObserver(property,method,dynamicFn)}/**
       * Creates a multi-property "method observer" based on the provided
       * expression, which should be a string in the form of a normal JavaScript
       * function signature: `'methodName(arg1, [..., argn])'`.  Each argument
       * should correspond to a property or path in the context of this
       * prototype (or instance), or may be a literal string or number.
       *
       * @param {string} expression Method expression
       * @param {boolean|Object=} dynamicFn Boolean or object map indicating
       * @return {void}
       *   whether method names should be included as a dependency to the effect.
       * @protected
       * @nocollapse
       */static createMethodObserver(expression,dynamicFn){this.prototype._createMethodObserver(expression,dynamicFn)}/**
       * Causes the setter for the given property to dispatch `<property>-changed`
       * events to notify of changes to the property.
       *
       * @param {string} property Property name
       * @return {void}
       * @protected
       * @nocollapse
       */static createNotifyingProperty(property){this.prototype._createNotifyingProperty(property)}/**
       * Creates a read-only accessor for the given property.
       *
       * To set the property, use the protected `_setProperty` API.
       * To create a custom protected setter (e.g. `_setMyProp()` for
       * property `myProp`), pass `true` for `protectedSetter`.
       *
       * Note, if the property will have other property effects, this method
       * should be called first, before adding other effects.
       *
       * @param {string} property Property name
       * @param {boolean=} protectedSetter Creates a custom protected setter
       *   when `true`.
       * @return {void}
       * @protected
       * @nocollapse
       */static createReadOnlyProperty(property,protectedSetter){this.prototype._createReadOnlyProperty(property,protectedSetter)}/**
       * Causes the setter for the given property to reflect the property value
       * to a (dash-cased) attribute of the same name.
       *
       * @param {string} property Property name
       * @return {void}
       * @protected
       * @nocollapse
       */static createReflectedProperty(property){this.prototype._createReflectedProperty(property)}/**
       * Creates a computed property whose value is set to the result of the
       * method described by the given `expression` each time one or more
       * arguments to the method changes.  The expression should be a string
       * in the form of a normal JavaScript function signature:
       * `'methodName(arg1, [..., argn])'`
       *
       * @param {string} property Name of computed property to set
       * @param {string} expression Method expression
       * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether
       *   method names should be included as a dependency to the effect.
       * @return {void}
       * @protected
       * @nocollapse
       */static createComputedProperty(property,expression,dynamicFn){this.prototype._createComputedProperty(property,expression,dynamicFn)}/**
       * Parses the provided template to ensure binding effects are created
       * for them, and then ensures property accessors are created for any
       * dependent properties in the template.  Binding effects for bound
       * templates are stored in a linked list on the instance so that
       * templates can be efficiently stamped and unstamped.
       *
       * @param {!HTMLTemplateElement} template Template containing binding
       *   bindings
       * @return {!TemplateInfo} Template metadata object
       * @protected
       * @nocollapse
       */static bindTemplate(template){return this.prototype._bindTemplate(template)}// -- binding ----------------------------------------------
/**
     * Equivalent to static `bindTemplate` API but can be called on
     * an instance to add effects at runtime.  See that method for
     * full API docs.
     *
     * This method may be called on the prototype (for prototypical template
     * binding, to avoid creating accessors every instance) once per prototype,
     * and will be called with `runtimeBinding: true` by `_stampTemplate` to
     * create and link an instance of the template metadata associated with a
     * particular stamping.
     *
     * @override
     * @param {!HTMLTemplateElement} template Template containing binding
     *   bindings
     * @param {boolean=} instanceBinding When false (default), performs
     *   "prototypical" binding of the template and overwrites any previously
     *   bound template for the class. When true (as passed from
     *   `_stampTemplate`), the template info is instanced and linked into
     *   the list of bound templates.
     * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,
     *   this is an instance of the prototypical template info
     * @protected
     * @suppress {missingProperties} go/missingfnprops
     */_bindTemplate(template,instanceBinding){let templateInfo=this.constructor._parseTemplate(template),wasPreBound=this.__templateInfo==templateInfo;// Optimization: since this is called twice for proto-bound templates,
// don't attempt to recreate accessors if this template was pre-bound
if(!wasPreBound){for(let prop in templateInfo.propertyEffects){this._createPropertyAccessor(prop)}}if(instanceBinding){// For instance-time binding, create instance of template metadata
// and link into list of templates if necessary
templateInfo=/** @type {!TemplateInfo} */Object.create(templateInfo);templateInfo.wasPreBound=wasPreBound;if(!wasPreBound&&this.__templateInfo){let last=this.__templateInfoLast||this.__templateInfo;this.__templateInfoLast=last.nextTemplateInfo=templateInfo;templateInfo.previousTemplateInfo=last;return templateInfo}}return this.__templateInfo=templateInfo}/**
       * Adds a property effect to the given template metadata, which is run
       * at the "propagate" stage of `_propertiesChanged` when the template
       * has been bound to the element via `_bindTemplate`.
       *
       * The `effect` object should match the format in `_addPropertyEffect`.
       *
       * @param {Object} templateInfo Template metadata to add effect to
       * @param {string} prop Property that should trigger the effect
       * @param {Object=} effect Effect metadata object
       * @return {void}
       * @protected
       * @nocollapse
       */static _addTemplatePropertyEffect(templateInfo,prop,effect){let hostProps=templateInfo.hostProps=templateInfo.hostProps||{};hostProps[prop]=!0;let effects=templateInfo.propertyEffects=templateInfo.propertyEffects||{},propEffects=effects[prop]=effects[prop]||[];propEffects.push(effect)}/**
       * Stamps the provided template and performs instance-time setup for
       * Polymer template features, including data bindings, declarative event
       * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment
       * is returned containing the stamped DOM, ready for insertion into the
       * DOM.
       *
       * This method may be called more than once; however note that due to
       * `shadycss` polyfill limitations, only styles from templates prepared
       * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped
       * to the shadow root and support CSS custom properties), and note that
       * `ShadyCSS.prepareTemplate` may only be called once per element. As such,
       * any styles required by in runtime-stamped templates must be included
       * in the main element template.
       *
       * @param {!HTMLTemplateElement} template Template to stamp
       * @return {!StampedTemplate} Cloned template content
       * @override
       * @protected
       */_stampTemplate(template){// Ensures that created dom is `_enqueueClient`'d to this element so
// that it can be flushed on next call to `_flushProperties`
hostStack.beginHosting(this);let dom=super._stampTemplate(template);hostStack.endHosting(this);let templateInfo=/** @type {!TemplateInfo} */this._bindTemplate(template,!0);// Add template-instance-specific data to instanced templateInfo
templateInfo.nodeList=dom.nodeList;// Capture child nodes to allow unstamping of non-prototypical templates
if(!templateInfo.wasPreBound){let nodes=templateInfo.childNodes=[];for(let n=dom.firstChild;n;n=n.nextSibling){nodes.push(n)}}dom.templateInfo=templateInfo;// Setup compound storage, 2-way listeners, and dataHost for bindings
setupBindings(this,templateInfo);// Flush properties into template nodes if already booted
if(this.__dataReady){runEffects(this,templateInfo.propertyEffects,this.__data,null,!1,templateInfo.nodeList)}return dom}/**
       * Removes and unbinds the nodes previously contained in the provided
       * DocumentFragment returned from `_stampTemplate`.
       *
       * @override
       * @param {!StampedTemplate} dom DocumentFragment previously returned
       *   from `_stampTemplate` associated with the nodes to be removed
       * @return {void}
       * @protected
       */_removeBoundDom(dom){// Unlink template info
let templateInfo=dom.templateInfo;if(templateInfo.previousTemplateInfo){templateInfo.previousTemplateInfo.nextTemplateInfo=templateInfo.nextTemplateInfo}if(templateInfo.nextTemplateInfo){templateInfo.nextTemplateInfo.previousTemplateInfo=templateInfo.previousTemplateInfo}if(this.__templateInfoLast==templateInfo){this.__templateInfoLast=templateInfo.previousTemplateInfo}templateInfo.previousTemplateInfo=templateInfo.nextTemplateInfo=null;// Remove stamped nodes
let nodes=templateInfo.childNodes;for(let i=0,node;i<nodes.length;i++){node=nodes[i];node.parentNode.removeChild(node)}}/**
       * Overrides default `TemplateStamp` implementation to add support for
       * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`
       * array is added to `nodeInfo` and populated with binding metadata
       * with information capturing the binding target, and a `parts` array
       * with one or more metadata objects capturing the source(s) of the
       * binding.
       *
       * @param {Node} node Node to parse
       * @param {TemplateInfo} templateInfo Template metadata for current template
       * @param {NodeInfo} nodeInfo Node metadata for current template node
       * @return {boolean} `true` if the visited node added node-specific
       *   metadata to `nodeInfo`
       * @protected
       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
       * @nocollapse
       */static _parseTemplateNode(node,templateInfo,nodeInfo){// TODO(https://github.com/google/closure-compiler/issues/3240):
//     Change back to just super.methodCall()
let noted=propertyEffectsBase._parseTemplateNode.call(this,node,templateInfo,nodeInfo);if(node.nodeType===Node.TEXT_NODE){let parts=this._parseBindings(node.textContent,templateInfo);if(parts){// Initialize the textContent with any literal parts
// NOTE: default to a space here so the textNode remains; some browsers
// (IE) omit an empty textNode following cloneNode/importNode.
node.textContent=literalFromParts(parts)||" ";addBinding(this,templateInfo,nodeInfo,"text","textContent",parts);noted=!0}}return noted}/**
       * Overrides default `TemplateStamp` implementation to add support for
       * parsing bindings from attributes.  A `bindings`
       * array is added to `nodeInfo` and populated with binding metadata
       * with information capturing the binding target, and a `parts` array
       * with one or more metadata objects capturing the source(s) of the
       * binding.
       *
       * @param {Element} node Node to parse
       * @param {TemplateInfo} templateInfo Template metadata for current template
       * @param {NodeInfo} nodeInfo Node metadata for current template node
       * @param {string} name Attribute name
       * @param {string} value Attribute value
       * @return {boolean} `true` if the visited node added node-specific
       *   metadata to `nodeInfo`
       * @protected
       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
       * @nocollapse
       */static _parseTemplateNodeAttribute(node,templateInfo,nodeInfo,name,value){let parts=this._parseBindings(value,templateInfo);if(parts){// Attribute or property
let origName=name,kind="property";// The only way we see a capital letter here is if the attr has
// a capital letter in it per spec. In this case, to make sure
// this binding works, we go ahead and make the binding to the attribute.
if(capitalAttributeRegex.test(name)){kind="attribute"}else if("$"==name[name.length-1]){name=name.slice(0,-1);kind="attribute"}// Initialize attribute bindings with any literal parts
let literal=literalFromParts(parts);if(literal&&"attribute"==kind){// Ensure a ShadyCSS template scoped style is not removed
// when a class$ binding's initial literal value is set.
if("class"==name&&node.hasAttribute("class")){literal+=" "+node.getAttribute(name)}node.setAttribute(name,literal)}// Clear attribute before removing, since IE won't allow removing
// `value` attribute if it previously had a value (can't
// unconditionally set '' before removing since attributes with `$`
// can't be set using setAttribute)
if("input"===node.localName&&"value"===origName){node.setAttribute(origName,"")}// Remove annotation
node.removeAttribute(origName);// Case hackery: attributes are lower-case, but bind targets
// (properties) are case sensitive. Gambit is to map dash-case to
// camel-case: `foo-bar` becomes `fooBar`.
// Attribute bindings are excepted.
if("property"===kind){name=dashToCamelCase(name)}addBinding(this,templateInfo,nodeInfo,kind,name,parts,literal);return!0}else{// TODO(https://github.com/google/closure-compiler/issues/3240):
//     Change back to just super.methodCall()
return propertyEffectsBase._parseTemplateNodeAttribute.call(this,node,templateInfo,nodeInfo,name,value)}}/**
       * Overrides default `TemplateStamp` implementation to add support for
       * binding the properties that a nested template depends on to the template
       * as `_host_<property>`.
       *
       * @param {Node} node Node to parse
       * @param {TemplateInfo} templateInfo Template metadata for current template
       * @param {NodeInfo} nodeInfo Node metadata for current template node
       * @return {boolean} `true` if the visited node added node-specific
       *   metadata to `nodeInfo`
       * @protected
       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
       * @nocollapse
       */static _parseTemplateNestedTemplate(node,templateInfo,nodeInfo){// TODO(https://github.com/google/closure-compiler/issues/3240):
//     Change back to just super.methodCall()
let noted=propertyEffectsBase._parseTemplateNestedTemplate.call(this,node,templateInfo,nodeInfo),hostProps=nodeInfo.templateInfo.hostProps,mode="{";// Merge host props into outer template and add bindings
for(let source in hostProps){let parts=[{mode,source,dependencies:[source]}];addBinding(this,templateInfo,nodeInfo,"property","_host_"+source,parts)}return noted}/**
       * Called to parse text in a template (either attribute values or
       * textContent) into binding metadata.
       *
       * Any overrides of this method should return an array of binding part
       * metadata  representing one or more bindings found in the provided text
       * and any "literal" text in between.  Any non-literal parts will be passed
       * to `_evaluateBinding` when any dependencies change.  The only required
       * fields of each "part" in the returned array are as follows:
       *
       * - `dependencies` - Array containing trigger metadata for each property
       *   that should trigger the binding to update
       * - `literal` - String containing text if the part represents a literal;
       *   in this case no `dependencies` are needed
       *
       * Additional metadata for use by `_evaluateBinding` may be provided in
       * each part object as needed.
       *
       * The default implementation handles the following types of bindings
       * (one or more may be intermixed with literal strings):
       * - Property binding: `[[prop]]`
       * - Path binding: `[[object.prop]]`
       * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`
       * - Two-way property or path bindings (supports negation):
       *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`
       * - Inline computed method (supports negation):
       *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`
       *
       * The default implementation uses a regular expression for best
       * performance. However, the regular expression uses a white-list of
       * allowed characters in a data-binding, which causes problems for
       * data-bindings that do use characters not in this white-list.
       *
       * Instead of updating the white-list with all allowed characters,
       * there is a StrictBindingParser (see lib/mixins/strict-binding-parser)
       * that uses a state machine instead. This state machine is able to handle
       * all characters. However, it is slightly less performant, therefore we
       * extracted it into a separate optional mixin.
       *
       * @param {string} text Text to parse from attribute or textContent
       * @param {Object} templateInfo Current template metadata
       * @return {Array<!BindingPart>} Array of binding part metadata
       * @protected
       * @nocollapse
       */static _parseBindings(text,templateInfo){let parts=[],lastIndex=0,m;// Example: "literal1{{prop}}literal2[[!compute(foo,bar)]]final"
// Regex matches:
//        Iteration 1:  Iteration 2:
// m[1]: '{{'          '[['
// m[2]: ''            '!'
// m[3]: 'prop'        'compute(foo,bar)'
while(null!==(m=bindingRegex.exec(text))){// Add literal part
if(m.index>lastIndex){parts.push({literal:text.slice(lastIndex,m.index)})}// Add binding part
let mode=m[1][0],negate=!!m[2],source=m[3].trim(),customEvent=!1,notifyEvent="",colon=-1;if("{"==mode&&0<(colon=source.indexOf("::"))){notifyEvent=source.substring(colon+2);source=source.substring(0,colon);customEvent=!0}let signature=parseMethod(source),dependencies=[];if(signature){// Inline computed function
let{args,methodName}=signature;for(let i=0,arg;i<args.length;i++){arg=args[i];if(!arg.literal){dependencies.push(arg)}}let dynamicFns=templateInfo.dynamicFns;if(dynamicFns&&dynamicFns[methodName]||signature.static){dependencies.push(methodName);signature.dynamicFn=!0}}else{// Property or path
dependencies.push(source)}parts.push({source,mode,negate,customEvent,signature,dependencies,event:notifyEvent});lastIndex=bindingRegex.lastIndex}// Add a final literal part
if(lastIndex&&lastIndex<text.length){let literal=text.substring(lastIndex);if(literal){parts.push({literal:literal})}}if(parts.length){return parts}else{return null}}/**
       * Called to evaluate a previously parsed binding part based on a set of
       * one or more changed dependencies.
       *
       * @param {!Polymer_PropertyEffects} inst Element that should be used as
       *     scope for binding dependencies
       * @param {BindingPart} part Binding part metadata
       * @param {string} path Property/path that triggered this effect
       * @param {Object} props Bag of current property changes
       * @param {Object} oldProps Bag of previous values for changed properties
       * @param {boolean} hasPaths True with `props` contains one or more paths
       * @return {*} Value the binding part evaluated to
       * @protected
       * @nocollapse
       */static _evaluateBinding(inst,part,path,props,oldProps,hasPaths){let value;if(part.signature){value=runMethodEffect(inst,path,props,oldProps,part.signature)}else if(path!=part.source){value=get(inst,part.source)}else{if(hasPaths&&isPath(path)){value=get(inst,path)}else{value=inst.__data[path]}}if(part.negate){value=!value}return value}}return PropertyEffects});/**
     * Helper api for enqueuing client dom created by a host element.
     *
     * By default elements are flushed via `_flushProperties` when
     * `connectedCallback` is called. Elements attach their client dom to
     * themselves at `ready` time which results from this first flush.
     * This provides an ordering guarantee that the client dom an element
     * creates is flushed before the element itself (i.e. client `ready`
     * fires before host `ready`).
     *
     * However, if `_flushProperties` is called *before* an element is connected,
     * as for example `Templatize` does, this ordering guarantee cannot be
     * satisfied because no elements are connected. (Note: Bound elements that
     * receive data do become enqueued clients and are properly ordered but
     * unbound elements are not.)
     *
     * To maintain the desired "client before host" ordering guarantee for this
     * case we rely on the "host stack. Client nodes registers themselves with
     * the creating host element when created. This ensures that all client dom
     * is readied in the proper order, maintaining the desired guarantee.
     *
     * @private
     */_exports.PropertyEffects=PropertyEffects;class HostStack{constructor(){this.stack=[]}/**
     * @param {*} inst Instance to add to hostStack
     * @return {void}
     */registerHost(inst){if(this.stack.length){let host=this.stack[this.stack.length-1];host._enqueueClient(inst)}}/**
     * @param {*} inst Instance to begin hosting
     * @return {void}
     */beginHosting(inst){this.stack.push(inst)}/**
     * @param {*} inst Instance to end hosting
     * @return {void}
     */endHosting(inst){let stackLen=this.stack.length;if(stackLen&&this.stack[stackLen-1]==inst){this.stack.pop()}}}const hostStack=new HostStack;var propertyEffects={PropertyEffects:PropertyEffects};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */ /**
       * Total number of Polymer element instances created.
       * @type {number}
       */_exports.$propertyEffects=propertyEffects;let instanceCount=0;_exports.instanceCount=instanceCount;function incrementInstanceCount(){_exports.instanceCount=instanceCount=instanceCount+1}/**
   * Array of Polymer element classes that have been finalized.
   * @type {!Array<!PolymerElementConstructor>}
   */const registrations=[];/**
                                  * @param {!PolymerElementConstructor} prototype Element prototype to log
                                  * @private
                                  */_exports.registrations=registrations;function _regLog(prototype){console.log("["+/** @type {?} */prototype.is+"]: registered")}/**
   * Registers a class prototype for telemetry purposes.
   * @param {!PolymerElementConstructor} prototype Element prototype to register
   * @protected
   */function register(prototype){registrations.push(prototype)}/**
   * Logs all elements registered with an `is` to the console.
   * @public
   */function dumpRegistrations(){registrations.forEach(_regLog)}var telemetry={get instanceCount(){return instanceCount},incrementInstanceCount:incrementInstanceCount,registrations:registrations,register:register,dumpRegistrations:dumpRegistrations};_exports.$telemetry=telemetry;function normalizeProperties(props){const output={};for(let p in props){const o=props[p];output[p]="function"===typeof o?{type:o}:o}return output}/**
   * Mixin that provides a minimal starting point to using the PropertiesChanged
   * mixin by providing a mechanism to declare properties in a static
   * getter (e.g. static get properties() { return { foo: String } }). Changes
   * are reported via the `_propertiesChanged` method.
   *
   * This mixin provides no specific support for rendering. Users are expected
   * to create a ShadowRoot and put content into it and update it in whatever
   * way makes sense. This can be done in reaction to properties changing by
   * implementing `_propertiesChanged`.
   *
   * @mixinFunction
   * @polymer
   * @appliesMixin PropertiesChanged
   * @summary Mixin that provides a minimal starting point for using
   * the PropertiesChanged mixin by providing a declarative `properties` object.
   * @template T
   * @param {function(new:T)} superClass Class to apply mixin to.
   * @return {function(new:T)} superClass with mixin applied.
   */const PropertiesMixin=dedupingMixin(superClass=>{/**
   * @constructor
   * @implements {Polymer_PropertiesChanged}
   * @private
   */const base=PropertiesChanged(superClass);/**
                                                  * Returns the super class constructor for the given class, if it is an
                                                  * instance of the PropertiesMixin.
                                                  *
                                                  * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor
                                                  * @return {?PropertiesMixinConstructor} Super class constructor
                                                  */function superPropertiesClass(constructor){const superCtor=Object.getPrototypeOf(constructor);// Note, the `PropertiesMixin` class below only refers to the class
// generated by this call to the mixin; the instanceof test only works
// because the mixin is deduped and guaranteed only to apply once, hence
// all constructors in a proto chain will see the same `PropertiesMixin`
return superCtor.prototype instanceof PropertiesMixin?/** @type {!PropertiesMixinConstructor} */superCtor:null}/**
     * Returns a memoized version of the `properties` object for the
     * given class. Properties not in object format are converted to at
     * least {type}.
     *
     * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor
     * @return {Object} Memoized properties object
     */function ownProperties(constructor){if(!constructor.hasOwnProperty(JSCompiler_renameProperty("__ownProperties",constructor))){let props=null;if(constructor.hasOwnProperty(JSCompiler_renameProperty("properties",constructor))){const properties=constructor.properties;if(properties){props=normalizeProperties(properties)}}constructor.__ownProperties=props}return constructor.__ownProperties}/**
     * @polymer
     * @mixinClass
     * @extends {base}
     * @implements {Polymer_PropertiesMixin}
     * @unrestricted
     */class PropertiesMixin extends base{/**
     * Implements standard custom elements getter to observes the attributes
     * listed in `properties`.
     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
     * @nocollapse
     */static get observedAttributes(){if(!this.hasOwnProperty("__observedAttributes")){register(this.prototype);const props=this._properties;this.__observedAttributes=props?Object.keys(props).map(p=>this.attributeNameForProperty(p)):[]}return this.__observedAttributes}/**
       * Finalizes an element definition, including ensuring any super classes
       * are also finalized. This includes ensuring property
       * accessors exist on the element prototype. This method calls
       * `_finalizeClass` to finalize each constructor in the prototype chain.
       * @return {void}
       * @nocollapse
       */static finalize(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__finalized",this))){const superCtor=superPropertiesClass(/** @type {!PropertiesMixinConstructor} */this);if(superCtor){superCtor.finalize()}this.__finalized=!0;this._finalizeClass()}}/**
       * Finalize an element class. This includes ensuring property
       * accessors exist on the element prototype. This method is called by
       * `finalize` and finalizes the class constructor.
       *
       * @protected
       * @nocollapse
       */static _finalizeClass(){const props=ownProperties(/** @type {!PropertiesMixinConstructor} */this);if(props){/** @type {?} */this.createProperties(props)}}/**
       * Returns a memoized version of all properties, including those inherited
       * from super classes. Properties not in object format are converted to
       * at least {type}.
       *
       * @return {Object} Object containing properties for this class
       * @protected
       * @nocollapse
       */static get _properties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__properties",this))){const superCtor=superPropertiesClass(/** @type {!PropertiesMixinConstructor} */this);this.__properties=Object.assign({},superCtor&&superCtor._properties,ownProperties(/** @type {PropertiesMixinConstructor} */this))}return this.__properties}/**
       * Overrides `PropertiesChanged` method to return type specified in the
       * static `properties` object for the given property.
       * @param {string} name Name of property
       * @return {*} Type to which to deserialize attribute
       *
       * @protected
       * @nocollapse
       */static typeForProperty(name){const info=this._properties[name];return info&&info.type}/**
       * Overrides `PropertiesChanged` method and adds a call to
       * `finalize` which lazily configures the element's property accessors.
       * @override
       * @return {void}
       */_initializeProperties(){incrementInstanceCount();this.constructor.finalize();super._initializeProperties()}/**
       * Called when the element is added to a document.
       * Calls `_enableProperties` to turn on property system from
       * `PropertiesChanged`.
       * @suppress {missingProperties} Super may or may not implement the callback
       * @return {void}
       * @override
       */connectedCallback(){if(super.connectedCallback){super.connectedCallback()}this._enableProperties()}/**
       * Called when the element is removed from a document
       * @suppress {missingProperties} Super may or may not implement the callback
       * @return {void}
       * @override
       */disconnectedCallback(){if(super.disconnectedCallback){super.disconnectedCallback()}}}return PropertiesMixin});_exports.PropertiesMixin=PropertiesMixin;var propertiesMixin={PropertiesMixin:PropertiesMixin};_exports.$propertiesMixin=propertiesMixin;const bundledImportMeta=_objectSpread({},meta,{url:new URL("../../node_assets/%40polymer/polymer/lib/mixins/element-mixin.js",meta.url).href}),version="3.3.0";_exports.version$1=_exports.version=version;const builtCSS=window.ShadyCSS&&window.ShadyCSS.cssBuild,ElementMixin=dedupingMixin(base=>{/**
   * @constructor
   * @implements {Polymer_PropertyEffects}
   * @implements {Polymer_PropertiesMixin}
   * @extends {HTMLElement}
   * @private
   */const polymerElementBase=PropertiesMixin(PropertyEffects(base));/**
                                                                         * Returns a list of properties with default values.
                                                                         * This list is created as an optimization since it is a subset of
                                                                         * the list returned from `_properties`.
                                                                         * This list is used in `_initializeProperties` to set property defaults.
                                                                         *
                                                                         * @param {PolymerElementConstructor} constructor Element class
                                                                         * @return {PolymerElementProperties} Flattened properties for this class
                                                                         *   that have default values
                                                                         * @private
                                                                         */function propertyDefaults(constructor){if(!constructor.hasOwnProperty(JSCompiler_renameProperty("__propertyDefaults",constructor))){constructor.__propertyDefaults=null;let props=constructor._properties;for(let p in props){let info=props[p];if("value"in info){constructor.__propertyDefaults=constructor.__propertyDefaults||{};constructor.__propertyDefaults[p]=info}}}return constructor.__propertyDefaults}/**
     * Returns a memoized version of the `observers` array.
     * @param {PolymerElementConstructor} constructor Element class
     * @return {Array} Array containing own observers for the given class
     * @protected
     */function ownObservers(constructor){if(!constructor.hasOwnProperty(JSCompiler_renameProperty("__ownObservers",constructor))){constructor.__ownObservers=constructor.hasOwnProperty(JSCompiler_renameProperty("observers",constructor))?/** @type {PolymerElementConstructor} */constructor.observers:null}return constructor.__ownObservers}/**
     * Creates effects for a property.
     *
     * Note, once a property has been set to
     * `readOnly`, `computed`, `reflectToAttribute`, or `notify`
     * these values may not be changed. For example, a subclass cannot
     * alter these settings. However, additional `observers` may be added
     * by subclasses.
     *
     * The info object should contain property metadata as follows:
     *
     * * `type`: {function} type to which an attribute matching the property
     * is deserialized. Note the property is camel-cased from a dash-cased
     * attribute. For example, 'foo-bar' attribute is deserialized to a
     * property named 'fooBar'.
     *
     * * `readOnly`: {boolean} creates a readOnly property and
     * makes a private setter for the private of the form '_setFoo' for a
     * property 'foo',
     *
     * * `computed`: {string} creates a computed property. A computed property
     * is also automatically set to `readOnly: true`. The value is calculated
     * by running a method and arguments parsed from the given string. For
     * example 'compute(foo)' will compute a given property when the
     * 'foo' property changes by executing the 'compute' method. This method
     * must return the computed value.
     *
     * * `reflectToAttribute`: {boolean} If true, the property value is reflected
     * to an attribute of the same name. Note, the attribute is dash-cased
     * so a property named 'fooBar' is reflected as 'foo-bar'.
     *
     * * `notify`: {boolean} sends a non-bubbling notification event when
     * the property changes. For example, a property named 'foo' sends an
     * event named 'foo-changed' with `event.detail` set to the value of
     * the property.
     *
     * * observer: {string} name of a method that runs when the property
     * changes. The arguments of the method are (value, previousValue).
     *
     * Note: Users may want control over modifying property
     * effects via subclassing. For example, a user might want to make a
     * reflectToAttribute property not do so in a subclass. We've chosen to
     * disable this because it leads to additional complication.
     * For example, a readOnly effect generates a special setter. If a subclass
     * disables the effect, the setter would fail unexpectedly.
     * Based on feedback, we may want to try to make effects more malleable
     * and/or provide an advanced api for manipulating them.
     *
     * @param {!PolymerElement} proto Element class prototype to add accessors
     *   and effects to
     * @param {string} name Name of the property.
     * @param {Object} info Info object from which to create property effects.
     * Supported keys:
     * @param {Object} allProps Flattened map of all properties defined in this
     *   element (including inherited properties)
     * @return {void}
     * @private
     */function createPropertyFromConfig(proto,name,info,allProps){// computed forces readOnly...
if(info.computed){info.readOnly=!0}// Note, since all computed properties are readOnly, this prevents
// adding additional computed property effects (which leads to a confusing
// setup where multiple triggers for setting a property)
// While we do have `hasComputedEffect` this is set on the property's
// dependencies rather than itself.
if(info.computed){if(proto._hasReadOnlyEffect(name)){console.warn(`Cannot redefine computed property '${name}'.`)}else{proto._createComputedProperty(name,info.computed,allProps)}}if(info.readOnly&&!proto._hasReadOnlyEffect(name)){proto._createReadOnlyProperty(name,!info.computed)}else if(!1===info.readOnly&&proto._hasReadOnlyEffect(name)){console.warn(`Cannot make readOnly property '${name}' non-readOnly.`)}if(info.reflectToAttribute&&!proto._hasReflectEffect(name)){proto._createReflectedProperty(name)}else if(!1===info.reflectToAttribute&&proto._hasReflectEffect(name)){console.warn(`Cannot make reflected property '${name}' non-reflected.`)}if(info.notify&&!proto._hasNotifyEffect(name)){proto._createNotifyingProperty(name)}else if(!1===info.notify&&proto._hasNotifyEffect(name)){console.warn(`Cannot make notify property '${name}' non-notify.`)}// always add observer
if(info.observer){proto._createPropertyObserver(name,info.observer,allProps[info.observer])}// always create the mapping from attribute back to property for deserialization.
proto._addPropertyToAttributeMap(name)}/**
     * Process all style elements in the element template. Styles with the
     * `include` attribute are processed such that any styles in
     * the associated "style modules" are included in the element template.
     * @param {PolymerElementConstructor} klass Element class
     * @param {!HTMLTemplateElement} template Template to process
     * @param {string} is Name of element
     * @param {string} baseURI Base URI for element
     * @private
     */function processElementStyles(klass,template,is,baseURI){if(!builtCSS){const templateStyles=template.content.querySelectorAll("style"),stylesWithImports=stylesFromTemplate(template),linkedStyles=stylesFromModuleImports(is),firstTemplateChild=template.content.firstElementChild;for(let idx=0,s;idx<linkedStyles.length;idx++){s=linkedStyles[idx];s.textContent=klass._processStyleText(s.textContent,baseURI);template.content.insertBefore(s,firstTemplateChild)}// keep track of the last "concrete" style in the template we have encountered
let templateStyleIndex=0;// ensure all gathered styles are actually in this template.
for(let i=0;i<stylesWithImports.length;i++){let s=stylesWithImports[i],templateStyle=templateStyles[templateStyleIndex];// if the style is not in this template, it's been "included" and
// we put a clone of it in the template before the style that included it
if(templateStyle!==s){s=s.cloneNode(!0);templateStyle.parentNode.insertBefore(s,templateStyle)}else{templateStyleIndex++}s.textContent=klass._processStyleText(s.textContent,baseURI)}}if(window.ShadyCSS){window.ShadyCSS.prepareTemplate(template,is)}}/**
     * Look up template from dom-module for element
     *
     * @param {string} is Element name to look up
     * @return {?HTMLTemplateElement|undefined} Template found in dom module, or
     *   undefined if not found
     * @protected
     */function getTemplateFromDomModule(is){let template=null;// Under strictTemplatePolicy in 3.x+, dom-module lookup is only allowed
// when opted-in via allowTemplateFromDomModule
if(is&&(!strictTemplatePolicy||allowTemplateFromDomModule)){template=/** @type {?HTMLTemplateElement} */DomModule.import(is,"template");// Under strictTemplatePolicy, require any element with an `is`
// specified to have a dom-module
if(strictTemplatePolicy&&!template){throw new Error(`strictTemplatePolicy: expecting dom-module or null template for ${is}`)}}return template}/**
     * @polymer
     * @mixinClass
     * @unrestricted
     * @implements {Polymer_ElementMixin}
     * @extends {polymerElementBase}
     */class PolymerElement extends polymerElementBase{/**
     * Current Polymer version in Semver notation.
     * @type {string} Semver notation of the current version of Polymer.
     * @nocollapse
     */static get polymerElementVersion(){return version}/**
       * Override of PropertiesMixin _finalizeClass to create observers and
       * find the template.
       * @return {void}
       * @protected
       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
       * @nocollapse
       */static _finalizeClass(){// TODO(https://github.com/google/closure-compiler/issues/3240):
//     Change back to just super.methodCall()
polymerElementBase._finalizeClass.call(this);const observers=ownObservers(this);if(observers){this.createObservers(observers,this._properties)}this._prepareTemplate()}/** @nocollapse */static _prepareTemplate(){// note: create "working" template that is finalized at instance time
let template=/** @type {PolymerElementConstructor} */this.template;if(template){if("string"===typeof template){console.error("template getter must return HTMLTemplateElement");template=null}else if(!legacyOptimizations){template=template.cloneNode(!0)}}/** @override */this.prototype._template=template}/**
       * Override of PropertiesChanged createProperties to create accessors
       * and property effects for all of the properties.
       * @param {!Object} props .
       * @return {void}
       * @protected
       * @nocollapse
       */static createProperties(props){for(let p in props){createPropertyFromConfig(/** @type {?} */this.prototype,p,props[p],props)}}/**
       * Creates observers for the given `observers` array.
       * Leverages `PropertyEffects` to create observers.
       * @param {Object} observers Array of observer descriptors for
       *   this class
       * @param {Object} dynamicFns Object containing keys for any properties
       *   that are functions and should trigger the effect when the function
       *   reference is changed
       * @return {void}
       * @protected
       * @nocollapse
       */static createObservers(observers,dynamicFns){const proto=this.prototype;for(let i=0;i<observers.length;i++){proto._createMethodObserver(observers[i],dynamicFns)}}/**
       * Returns the template that will be stamped into this element's shadow root.
       *
       * If a `static get is()` getter is defined, the default implementation
       * will return the first `<template>` in a `dom-module` whose `id`
       * matches this element's `is`.
       *
       * Users may override this getter to return an arbitrary template
       * (in which case the `is` getter is unnecessary). The template returned
       * must be an `HTMLTemplateElement`.
       *
       * Note that when subclassing, if the super class overrode the default
       * implementation and the subclass would like to provide an alternate
       * template via a `dom-module`, it should override this getter and
       * return `DomModule.import(this.is, 'template')`.
       *
       * If a subclass would like to modify the super class template, it should
       * clone it rather than modify it in place.  If the getter does expensive
       * work such as cloning/modifying a template, it should memoize the
       * template for maximum performance:
       *
       *   let memoizedTemplate;
       *   class MySubClass extends MySuperClass {
       *     static get template() {
       *       if (!memoizedTemplate) {
       *         memoizedTemplate = super.template.cloneNode(true);
       *         let subContent = document.createElement('div');
       *         subContent.textContent = 'This came from MySubClass';
       *         memoizedTemplate.content.appendChild(subContent);
       *       }
       *       return memoizedTemplate;
       *     }
       *   }
       *
       * @return {!HTMLTemplateElement|string} Template to be stamped
       * @nocollapse
       */static get template(){// Explanation of template-related properties:
// - constructor.template (this getter): the template for the class.
//     This can come from the prototype (for legacy elements), from a
//     dom-module, or from the super class's template (or can be overridden
//     altogether by the user)
// - constructor._template: memoized version of constructor.template
// - prototype._template: working template for the element, which will be
//     parsed and modified in place. It is a cloned version of
//     constructor.template, saved in _finalizeClass(). Note that before
//     this getter is called, for legacy elements this could be from a
//     _template field on the info object passed to Polymer(), a behavior,
//     or set in registered(); once the static getter runs, a clone of it
//     will overwrite it on the prototype as the working template.
if(!this.hasOwnProperty(JSCompiler_renameProperty("_template",this))){this._template=// If user has put template on prototype (e.g. in legacy via registered
// callback or info object), prefer that first
this.prototype.hasOwnProperty(JSCompiler_renameProperty("_template",this.prototype))?this.prototype._template:// Look in dom-module associated with this element's is
getTemplateFromDomModule(/** @type {PolymerElementConstructor}*/this.is)||// Next look for superclass template (call the super impl this
// way so that `this` points to the superclass)
Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/this.prototype).constructor.template}return this._template}/**
       * Set the template.
       *
       * @param {!HTMLTemplateElement|string} value Template to set.
       * @nocollapse
       */static set template(value){this._template=value}/**
       * Path matching the url from which the element was imported.
       *
       * This path is used to resolve url's in template style cssText.
       * The `importPath` property is also set on element instances and can be
       * used to create bindings relative to the import path.
       *
       * For elements defined in ES modules, users should implement
       * `static get importMeta() { return import.meta; }`, and the default
       * implementation of `importPath` will  return `import.meta.url`'s path.
       * For elements defined in HTML imports, this getter will return the path
       * to the document containing a `dom-module` element matching this
       * element's static `is` property.
       *
       * Note, this path should contain a trailing `/`.
       *
       * @return {string} The import path for this element class
       * @suppress {missingProperties}
       * @nocollapse
       */static get importPath(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_importPath",this))){const meta=this.importMeta;if(meta){this._importPath=pathFromUrl(meta.url)}else{const module=DomModule.import(/** @type {PolymerElementConstructor} */this.is);this._importPath=module&&module.assetpath||Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/this.prototype).constructor.importPath}}return this._importPath}constructor(){super();/** @type {HTMLTemplateElement} */this._template;/** @type {string} */this._importPath;/** @type {string} */this.rootPath;/** @type {string} */this.importPath;/** @type {StampedTemplate | HTMLElement | ShadowRoot} */this.root;/** @type {!Object<string, !Element>} */this.$}/**
       * Overrides the default `PropertyAccessors` to ensure class
       * metaprogramming related to property accessors and effects has
       * completed (calls `finalize`).
       *
       * It also initializes any property defaults provided via `value` in
       * `properties` metadata.
       *
       * @return {void}
       * @override
       * @suppress {invalidCasts,missingProperties} go/missingfnprops
       */_initializeProperties(){this.constructor.finalize();// note: finalize template when we have access to `localName` to
// avoid dependence on `is` for polyfilling styling.
this.constructor._finalizeTemplate(/** @type {!HTMLElement} */this.localName);super._initializeProperties();// set path defaults
this.rootPath=rootPath;this.importPath=this.constructor.importPath;// apply property defaults...
let p$=propertyDefaults(this.constructor);if(!p$){return}for(let p in p$){let info=p$[p];// Don't set default value if there is already an own property, which
// happens when a `properties` property with default but no effects had
// a property set (e.g. bound) by its host before upgrade
if(!this.hasOwnProperty(p)){let value="function"==typeof info.value?info.value.call(this):info.value;// Set via `_setProperty` if there is an accessor, to enable
// initializing readOnly property defaults
if(this._hasAccessor(p)){this._setPendingProperty(p,value,!0)}else{this[p]=value}}}}/**
       * Gather style text for a style element in the template.
       *
       * @param {string} cssText Text containing styling to process
       * @param {string} baseURI Base URI to rebase CSS paths against
       * @return {string} The processed CSS text
       * @protected
       * @nocollapse
       */static _processStyleText(cssText,baseURI){return resolveCss(cssText,baseURI)}/**
      * Configures an element `proto` to function with a given `template`.
      * The element name `is` and extends `ext` must be specified for ShadyCSS
      * style scoping.
      *
      * @param {string} is Tag name (or type extension name) for this element
      * @return {void}
      * @protected
      * @nocollapse
      */static _finalizeTemplate(is){/** @const {HTMLTemplateElement} */const template=this.prototype._template;if(template&&!template.__polymerFinalized){template.__polymerFinalized=!0;const importPath=this.importPath,baseURI=importPath?resolveUrl(importPath):"";// e.g. support `include="module-name"`, and ShadyCSS
processElementStyles(this,template,is,baseURI);this.prototype._bindTemplate(template)}}/**
       * Provides a default implementation of the standard Custom Elements
       * `connectedCallback`.
       *
       * The default implementation enables the property effects system and
       * flushes any pending properties, and updates shimmed CSS properties
       * when using the ShadyCSS scoping/custom properties polyfill.
       *
       * @override
       * @suppress {missingProperties, invalidCasts} Super may or may not
       *     implement the callback
       * @return {void}
       */connectedCallback(){if(window.ShadyCSS&&this._template){window.ShadyCSS.styleElement(/** @type {!HTMLElement} */this)}super.connectedCallback()}/**
       * Stamps the element template.
       *
       * @return {void}
       * @override
       */ready(){if(this._template){this.root=this._stampTemplate(this._template);this.$=this.root.$}super.ready()}/**
       * Implements `PropertyEffects`'s `_readyClients` call. Attaches
       * element dom by calling `_attachDom` with the dom stamped from the
       * element's template via `_stampTemplate`. Note that this allows
       * client dom to be attached to the element prior to any observers
       * running.
       *
       * @return {void}
       * @override
       */_readyClients(){if(this._template){this.root=this._attachDom(/** @type {StampedTemplate} */this.root)}// The super._readyClients here sets the clients initialized flag.
// We must wait to do this until after client dom is created/attached
// so that this flag can be checked to prevent notifications fired
// during this process from being handled before clients are ready.
super._readyClients()}/**
       * Attaches an element's stamped dom to itself. By default,
       * this method creates a `shadowRoot` and adds the dom to it.
       * However, this method may be overridden to allow an element
       * to put its dom in another location.
       *
       * @override
       * @throws {Error}
       * @suppress {missingReturn}
       * @param {StampedTemplate} dom to attach to the element.
       * @return {ShadowRoot} node to which the dom has been attached.
       */_attachDom(dom){const n=wrap$1(this);if(n.attachShadow){if(dom){if(!n.shadowRoot){n.attachShadow({mode:"open",shadyUpgradeFragment:dom});n.shadowRoot.appendChild(dom)}if(syncInitialRender&&window.ShadyDOM){ShadyDOM.flushInitial(n.shadowRoot)}return n.shadowRoot}return null}else{throw new Error("ShadowDOM not available. "+// TODO(sorvell): move to compile-time conditional when supported
"PolymerElement can create dom as children instead of in "+"ShadowDOM by setting `this.root = this;` before `ready`.")}}/**
       * When using the ShadyCSS scoping and custom property shim, causes all
       * shimmed styles in this element (and its subtree) to be updated
       * based on current custom property values.
       *
       * The optional parameter overrides inline custom property styles with an
       * object of properties where the keys are CSS properties, and the values
       * are strings.
       *
       * Example: `this.updateStyles({'--color': 'blue'})`
       *
       * These properties are retained unless a value of `null` is set.
       *
       * Note: This function does not support updating CSS mixins.
       * You can not dynamically change the value of an `@apply`.
       *
       * @override
       * @param {Object=} properties Bag of custom property key/values to
       *   apply to this element.
       * @return {void}
       * @suppress {invalidCasts}
       */updateStyles(properties){if(window.ShadyCSS){window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */this,properties)}}/**
       * Rewrites a given URL relative to a base URL. The base URL defaults to
       * the original location of the document containing the `dom-module` for
       * this element. This method will return the same URL before and after
       * bundling.
       *
       * Note that this function performs no resolution for URLs that start
       * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose
       * URL resolution, use `window.URL`.
       *
       * @override
       * @param {string} url URL to resolve.
       * @param {string=} base Optional base URL to resolve against, defaults
       * to the element's `importPath`
       * @return {string} Rewritten URL relative to base
       */resolveUrl(url,base){if(!base&&this.importPath){base=resolveUrl(this.importPath)}return resolveUrl(url,base)}/**
       * Overrides `PropertyEffects` to add map of dynamic functions on
       * template info, for consumption by `PropertyEffects` template binding
       * code. This map determines which method templates should have accessors
       * created for them.
       *
       * @param {!HTMLTemplateElement} template Template
       * @param {!TemplateInfo} templateInfo Template metadata for current template
       * @param {!NodeInfo} nodeInfo Node metadata for current template.
       * @return {boolean} .
       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
       * @nocollapse
       */static _parseTemplateContent(template,templateInfo,nodeInfo){templateInfo.dynamicFns=templateInfo.dynamicFns||this._properties;// TODO(https://github.com/google/closure-compiler/issues/3240):
//     Change back to just super.methodCall()
return polymerElementBase._parseTemplateContent.call(this,template,templateInfo,nodeInfo)}/**
       * Overrides `PropertyEffects` to warn on use of undeclared properties in
       * template.
       *
       * @param {Object} templateInfo Template metadata to add effect to
       * @param {string} prop Property that should trigger the effect
       * @param {Object=} effect Effect metadata object
       * @return {void}
       * @protected
       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
       * @nocollapse
       */static _addTemplatePropertyEffect(templateInfo,prop,effect){// Warn if properties are used in template without being declared.
// Properties must be listed in `properties` to be included in
// `observedAttributes` since CE V1 reads that at registration time, and
// since we want to keep template parsing lazy, we can't automatically
// add undeclared properties used in templates to `observedAttributes`.
// The warning is only enabled in `legacyOptimizations` mode, since
// we don't want to spam existing users who might have adopted the
// shorthand when attribute deserialization is not important.
if(legacyOptimizations&&!(prop in this._properties)){console.warn(`Property '${prop}' used in template but not declared in 'properties'; `+`attribute will not be observed.`)}// TODO(https://github.com/google/closure-compiler/issues/3240):
//     Change back to just super.methodCall()
return polymerElementBase._addTemplatePropertyEffect.call(this,templateInfo,prop,effect)}}return PolymerElement});/**
                                                                  * Element class mixin that provides the core API for Polymer's meta-programming
                                                                  * features including template stamping, data-binding, attribute deserialization,
                                                                  * and property change observation.
                                                                  *
                                                                  * Subclassers may provide the following static getters to return metadata
                                                                  * used to configure Polymer's features for the class:
                                                                  *
                                                                  * - `static get is()`: When the template is provided via a `dom-module`,
                                                                  *   users should return the `dom-module` id from a static `is` getter.  If
                                                                  *   no template is needed or the template is provided directly via the
                                                                  *   `template` getter, there is no need to define `is` for the element.
                                                                  *
                                                                  * - `static get template()`: Users may provide the template directly (as
                                                                  *   opposed to via `dom-module`) by implementing a static `template` getter.
                                                                  *   The getter must return an `HTMLTemplateElement`.
                                                                  *
                                                                  * - `static get properties()`: Should return an object describing
                                                                  *   property-related metadata used by Polymer features (key: property name
                                                                  *   value: object containing property metadata). Valid keys in per-property
                                                                  *   metadata include:
                                                                  *   - `type` (String|Number|Object|Array|...): Used by
                                                                  *     `attributeChangedCallback` to determine how string-based attributes
                                                                  *     are deserialized to JavaScript property values.
                                                                  *   - `notify` (boolean): Causes a change in the property to fire a
                                                                  *     non-bubbling event called `<property>-changed`. Elements that have
                                                                  *     enabled two-way binding to the property use this event to observe changes.
                                                                  *   - `readOnly` (boolean): Creates a getter for the property, but no setter.
                                                                  *     To set a read-only property, use the private setter method
                                                                  *     `_setProperty(property, value)`.
                                                                  *   - `observer` (string): Observer method name that will be called when
                                                                  *     the property changes. The arguments of the method are
                                                                  *     `(value, previousValue)`.
                                                                  *   - `computed` (string): String describing method and dependent properties
                                                                  *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).
                                                                  *     Computed properties are read-only by default and can only be changed
                                                                  *     via the return value of the computing method.
                                                                  *
                                                                  * - `static get observers()`: Array of strings describing multi-property
                                                                  *   observer methods and their dependent properties (e.g.
                                                                  *   `'observeABC(a, b, c)'`).
                                                                  *
                                                                  * The base class provides default implementations for the following standard
                                                                  * custom element lifecycle callbacks; users may override these, but should
                                                                  * call the super method to ensure
                                                                  * - `constructor`: Run when the element is created or upgraded
                                                                  * - `connectedCallback`: Run each time the element is connected to the
                                                                  *   document
                                                                  * - `disconnectedCallback`: Run each time the element is disconnected from
                                                                  *   the document
                                                                  * - `attributeChangedCallback`: Run each time an attribute in
                                                                  *   `observedAttributes` is set or removed (note: this element's default
                                                                  *   `observedAttributes` implementation will automatically return an array
                                                                  *   of dash-cased attributes based on `properties`)
                                                                  *
                                                                  * @mixinFunction
                                                                  * @polymer
                                                                  * @appliesMixin PropertyEffects
                                                                  * @appliesMixin PropertiesMixin
                                                                  * @property rootPath {string} Set to the value of `rootPath`,
                                                                  *   which defaults to the main document path
                                                                  * @property importPath {string} Set to the value of the class's static
                                                                  *   `importPath` property, which defaults to the path of this element's
                                                                  *   `dom-module` (when `is` is used), but can be overridden for other
                                                                  *   import strategies.
                                                                  * @summary Element class mixin that provides the core API for Polymer's
                                                                  * meta-programming features.
                                                                  * @template T
                                                                  * @param {function(new:T)} superClass Class to apply mixin to.
                                                                  * @return {function(new:T)} superClass with mixin applied.
                                                                  */_exports.ElementMixin=ElementMixin;/**
     * When using the ShadyCSS scoping and custom property shim, causes all
     * shimmed `styles` (via `custom-style`) in the document (and its subtree)
     * to be updated based on current custom property values.
     *
     * The optional parameter overrides inline custom property styles with an
     * object of properties where the keys are CSS properties, and the values
     * are strings.
     *
     * Example: `updateStyles({'--color': 'blue'})`
     *
     * These properties are retained unless a value of `null` is set.
     *
     * @param {Object=} props Bag of custom property key/values to
     *   apply to the document.
     * @return {void}
     */const updateStyles=function(props){if(window.ShadyCSS){window.ShadyCSS.styleDocument(props)}};_exports.updateStyles=updateStyles;var elementMixin={version:version,ElementMixin:ElementMixin,updateStyles:updateStyles};_exports.$elementMixin=elementMixin;class Debouncer{constructor(){this._asyncModule=null;this._callback=null;this._timer=null}/**
     * Sets the scheduler; that is, a module with the Async interface,
     * a callback and optional arguments to be passed to the run function
     * from the async module.
     *
     * @param {!AsyncInterface} asyncModule Object with Async interface.
     * @param {function()} callback Callback to run.
     * @return {void}
     */setConfig(asyncModule,callback){this._asyncModule=asyncModule;this._callback=callback;this._timer=this._asyncModule.run(()=>{this._timer=null;debouncerQueue.delete(this);this._callback()})}/**
     * Cancels an active debouncer and returns a reference to itself.
     *
     * @return {void}
     */cancel(){if(this.isActive()){this._cancelAsync();// Canceling a debouncer removes its spot from the flush queue,
// so if a debouncer is manually canceled and re-debounced, it
// will reset its flush order (this is a very minor difference from 1.x)
// Re-debouncing via the `debounce` API retains the 1.x FIFO flush order
debouncerQueue.delete(this)}}/**
     * Cancels a debouncer's async callback.
     *
     * @return {void}
     */_cancelAsync(){if(this.isActive()){this._asyncModule.cancel(/** @type {number} */this._timer);this._timer=null}}/**
     * Flushes an active debouncer and returns a reference to itself.
     *
     * @return {void}
     */flush(){if(this.isActive()){this.cancel();this._callback()}}/**
     * Returns true if the debouncer is active.
     *
     * @return {boolean} True if active.
     */isActive(){return null!=this._timer}/**
     * Creates a debouncer if no debouncer is passed as a parameter
     * or it cancels an active debouncer otherwise. The following
     * example shows how a debouncer can be called multiple times within a
     * microtask and "debounced" such that the provided callback function is
     * called once. Add this method to a custom element:
     *
     * ```js
     * import {microTask} from '@polymer/polymer/lib/utils/async.js';
     * import {Debouncer} from '@polymer/polymer/lib/utils/debounce.js';
     * // ...
     *
     * _debounceWork() {
     *   this._debounceJob = Debouncer.debounce(this._debounceJob,
     *       microTask, () => this._doWork());
     * }
     * ```
     *
     * If the `_debounceWork` method is called multiple times within the same
     * microtask, the `_doWork` function will be called only once at the next
     * microtask checkpoint.
     *
     * Note: In testing it is often convenient to avoid asynchrony. To accomplish
     * this with a debouncer, you can use `enqueueDebouncer` and
     * `flush`. For example, extend the above example by adding
     * `enqueueDebouncer(this._debounceJob)` at the end of the
     * `_debounceWork` method. Then in a test, call `flush` to ensure
     * the debouncer has completed.
     *
     * @param {Debouncer?} debouncer Debouncer object.
     * @param {!AsyncInterface} asyncModule Object with Async interface
     * @param {function()} callback Callback to run.
     * @return {!Debouncer} Returns a debouncer object.
     */static debounce(debouncer,asyncModule,callback){if(debouncer instanceof Debouncer){// Cancel the async callback, but leave in debouncerQueue if it was
// enqueued, to maintain 1.x flush order
debouncer._cancelAsync()}else{debouncer=new Debouncer}debouncer.setConfig(asyncModule,callback);return debouncer}}_exports.Debouncer=Debouncer;let debouncerQueue=new Set;/**
                                 * Adds a `Debouncer` to a list of globally flushable tasks.
                                 *
                                 * @param {!Debouncer} debouncer Debouncer to enqueue
                                 * @return {void}
                                 */const enqueueDebouncer=function(debouncer){debouncerQueue.add(debouncer)};/**
    * Flushes any enqueued debouncers
    *
    * @return {boolean} Returns whether any debouncers were flushed
    */_exports.enqueueDebouncer$1=_exports.enqueueDebouncer=_exports.addDebouncer=enqueueDebouncer;const flushDebouncers=function(){const didFlush=!!debouncerQueue.size;// If new debouncers are added while flushing, Set.forEach will ensure
// newly added ones are also flushed
debouncerQueue.forEach(debouncer=>{try{debouncer.flush()}catch(e){setTimeout(()=>{throw e})}});return didFlush};_exports.flushDebouncers=flushDebouncers;var debounce={Debouncer:Debouncer,enqueueDebouncer:enqueueDebouncer,flushDebouncers:flushDebouncers};_exports.$debounce=debounce;let HAS_NATIVE_TA="string"===typeof document.head.style.touchAction,GESTURE_KEY="__polymerGestures",HANDLED_OBJ="__polymerGesturesHandled",TOUCH_ACTION="__polymerGesturesTouchAction",TAP_DISTANCE=25,TRACK_DISTANCE=5,TRACK_LENGTH=2,MOUSE_TIMEOUT=2500,MOUSE_EVENTS=["mousedown","mousemove","mouseup","click"],MOUSE_WHICH_TO_BUTTONS=[0,1,4,2],MOUSE_HAS_BUTTONS=function(){try{return 1===new MouseEvent("test",{buttons:1}).buttons}catch(e){return!1}}();/**
      * @param {string} name Possible mouse event name
      * @return {boolean} true if mouse event, false if not
      */function isMouseEvent(name){return-1<MOUSE_EVENTS.indexOf(name)}/* eslint no-empty: ["error", { "allowEmptyCatch": true }] */ // check for passive event listeners
let SUPPORTS_PASSIVE=!1;(function(){try{let opts=Object.defineProperty({},"passive",{get(){SUPPORTS_PASSIVE=!0}});window.addEventListener("test",null,opts);window.removeEventListener("test",null,opts)}catch(e){}})();/**
       * Generate settings for event listeners, dependant on `passiveTouchGestures`
       *
       * @param {string} eventName Event name to determine if `{passive}` option is
       *   needed
       * @return {{passive: boolean} | undefined} Options to use for addEventListener
       *   and removeEventListener
       */function PASSIVE_TOUCH(eventName){if(isMouseEvent(eventName)||"touchend"===eventName){return}if(HAS_NATIVE_TA&&SUPPORTS_PASSIVE&&passiveTouchGestures){return{passive:!0}}else{return}}// Check for touch-only devices
let IS_TOUCH_ONLY=navigator.userAgent.match(/iP(?:[oa]d|hone)|Android/);// keep track of any labels hit by the mouseCanceller
/** @type {!Array<!HTMLLabelElement>} */const clickedLabels=[],labellable={button:!0,input:!0,keygen:!0,meter:!0,output:!0,textarea:!0,progress:!0,select:!0},canBeDisabled={button:!0,command:!0,fieldset:!0,input:!0,keygen:!0,optgroup:!0,option:!0,select:!0,textarea:!0};/** @type {!Object<boolean>} */ /**
    * @param {HTMLElement} el Element to check labelling status
    * @return {boolean} element can have labels
    */function canBeLabelled(el){return labellable[el.localName]||!1}/**
   * @param {HTMLElement} el Element that may be labelled.
   * @return {!Array<!HTMLLabelElement>} Relevant label for `el`
   */function matchingLabels(el){let labels=Array.prototype.slice.call(/** @type {HTMLInputElement} */el.labels||[]);// IE doesn't have `labels` and Safari doesn't populate `labels`
// if element is in a shadowroot.
// In this instance, finding the non-ancestor labels is enough,
// as the mouseCancellor code will handle ancstor labels
if(!labels.length){labels=[];let root=el.getRootNode();// if there is an id on `el`, check for all labels with a matching `for` attribute
if(el.id){let matching=root.querySelectorAll(`label[for = ${el.id}]`);for(let i=0;i<matching.length;i++){labels.push(/** @type {!HTMLLabelElement} */matching[i])}}}return labels}// touch will make synthetic mouse events
// `preventDefault` on touchend will cancel them,
// but this breaks `<input>` focus and link clicks
// disable mouse handlers for MOUSE_TIMEOUT ms after
// a touchend to ignore synthetic mouse events
let mouseCanceller=function(mouseEvent){// Check for sourceCapabilities, used to distinguish synthetic events
// if mouseEvent did not come from a device that fires touch events,
// it was made by a real mouse and should be counted
// http://wicg.github.io/InputDeviceCapabilities/#dom-inputdevicecapabilities-firestouchevents
let sc=mouseEvent.sourceCapabilities;if(sc&&!sc.firesTouchEvents){return}// skip synthetic mouse events
mouseEvent[HANDLED_OBJ]={skip:!0};// disable "ghost clicks"
if("click"===mouseEvent.type){let clickFromLabel=!1,path=getComposedPath(mouseEvent);for(let i=0;i<path.length;i++){if(path[i].nodeType===Node.ELEMENT_NODE){if("label"===path[i].localName){clickedLabels.push(/** @type {!HTMLLabelElement} */path[i])}else if(canBeLabelled(/** @type {!HTMLElement} */path[i])){let ownerLabels=matchingLabels(/** @type {!HTMLElement} */path[i]);// check if one of the clicked labels is labelling this element
for(let j=0;j<ownerLabels.length;j++){clickFromLabel=clickFromLabel||-1<clickedLabels.indexOf(ownerLabels[j])}}}if(path[i]===POINTERSTATE.mouse.target){return}}// if one of the clicked labels was labelling the target element,
// this is not a ghost click
if(clickFromLabel){return}mouseEvent.preventDefault();mouseEvent.stopPropagation()}};/**
    * @param {boolean=} setup True to add, false to remove.
    * @return {void}
    */function setupTeardownMouseCanceller(setup){let events=IS_TOUCH_ONLY?["click"]:MOUSE_EVENTS;for(let i=0,en;i<events.length;i++){en=events[i];if(setup){// reset clickLabels array
clickedLabels.length=0;document.addEventListener(en,mouseCanceller,!0)}else{document.removeEventListener(en,mouseCanceller,!0)}}}function ignoreMouse(e){if(!cancelSyntheticClickEvents){return}if(!POINTERSTATE.mouse.mouseIgnoreJob){setupTeardownMouseCanceller(!0)}let unset=function(){setupTeardownMouseCanceller();POINTERSTATE.mouse.target=null;POINTERSTATE.mouse.mouseIgnoreJob=null};POINTERSTATE.mouse.target=getComposedPath(e)[0];POINTERSTATE.mouse.mouseIgnoreJob=Debouncer.debounce(POINTERSTATE.mouse.mouseIgnoreJob,timeOut.after(MOUSE_TIMEOUT),unset)}/**
   * @param {MouseEvent} ev event to test for left mouse button down
   * @return {boolean} has left mouse button down
   */function hasLeftMouseButton(ev){let type=ev.type;// exit early if the event is not a mouse event
if(!isMouseEvent(type)){return!1}// ev.button is not reliable for mousemove (0 is overloaded as both left button and no buttons)
// instead we use ev.buttons (bitmask of buttons) or fall back to ev.which (deprecated, 0 for no buttons, 1 for left button)
if("mousemove"===type){// allow undefined for testing events
let buttons=ev.buttons===void 0?1:ev.buttons;if(ev instanceof window.MouseEvent&&!MOUSE_HAS_BUTTONS){buttons=MOUSE_WHICH_TO_BUTTONS[ev.which]||0}// buttons is a bitmask, check that the left button bit is set (1)
return!!(1&buttons)}else{// allow undefined for testing events
let button=ev.button===void 0?0:ev.button;// ev.button is 0 in mousedown/mouseup/click for left button activation
return 0===button}}function isSyntheticClick(ev){if("click"===ev.type){// ev.detail is 0 for HTMLElement.click in most browsers
if(0===ev.detail){return!0}// in the worst case, check that the x/y position of the click is within
// the bounding box of the target of the event
// Thanks IE 10 >:(
let t=_findOriginalTarget(ev);// make sure the target of the event is an element so we can use getBoundingClientRect,
// if not, just assume it is a synthetic click
if(!t.nodeType||/** @type {Element} */t.nodeType!==Node.ELEMENT_NODE){return!0}let bcr=/** @type {Element} */t.getBoundingClientRect(),x=ev.pageX,y=ev.pageY;// use page x/y to account for scrolling
// ev is a synthetic click if the position is outside the bounding box of the target
return!(x>=bcr.left&&x<=bcr.right&&y>=bcr.top&&y<=bcr.bottom)}return!1}let POINTERSTATE={mouse:{target:null,mouseIgnoreJob:null},touch:{x:0,y:0,id:-1,scrollDecided:!1}};function firstTouchAction(ev){let ta="auto",path=getComposedPath(ev);for(let i=0,n;i<path.length;i++){n=path[i];if(n[TOUCH_ACTION]){ta=n[TOUCH_ACTION];break}}return ta}function trackDocument(stateObj,movefn,upfn){stateObj.movefn=movefn;stateObj.upfn=upfn;document.addEventListener("mousemove",movefn);document.addEventListener("mouseup",upfn)}function untrackDocument(stateObj){document.removeEventListener("mousemove",stateObj.movefn);document.removeEventListener("mouseup",stateObj.upfn);stateObj.movefn=null;stateObj.upfn=null}if(cancelSyntheticClickEvents){// use a document-wide touchend listener to start the ghost-click prevention mechanism
// Use passive event listeners, if supported, to not affect scrolling performance
document.addEventListener("touchend",ignoreMouse,SUPPORTS_PASSIVE?{passive:!0}:!1)}/**
   * Returns the composedPath for the given event.
   * @param {Event} event to process
   * @return {!Array<!EventTarget>} Path of the event
   */const getComposedPath=window.ShadyDOM&&window.ShadyDOM.noPatch?window.ShadyDOM.composedPath:event=>event.composedPath&&event.composedPath()||[],gestures={};/** @type {!Object<string, !GestureRecognizer>} */_exports.gestures=gestures;/** @type {!Array<!GestureRecognizer>} */const recognizers=[];/**
                                * Finds the element rendered on the screen at the provided coordinates.
                                *
                                * Similar to `document.elementFromPoint`, but pierces through
                                * shadow roots.
                                *
                                * @param {number} x Horizontal pixel coordinate
                                * @param {number} y Vertical pixel coordinate
                                * @return {Element} Returns the deepest shadowRoot inclusive element
                                * found at the screen position given.
                                */_exports.recognizers=recognizers;function deepTargetFind(x,y){let node=document.elementFromPoint(x,y),next=node;// this code path is only taken when native ShadowDOM is used
// if there is a shadowroot, it may have a node at x/y
// if there is not a shadowroot, exit the loop
while(next&&next.shadowRoot&&!window.ShadyDOM){// if there is a node at x/y in the shadowroot, look deeper
let oldNext=next;next=next.shadowRoot.elementFromPoint(x,y);// on Safari, elementFromPoint may return the shadowRoot host
if(oldNext===next){break}if(next){node=next}}return node}/**
   * a cheaper check than ev.composedPath()[0];
   *
   * @private
   * @param {Event|Touch} ev Event.
   * @return {EventTarget} Returns the event target.
   */function _findOriginalTarget(ev){const path=getComposedPath(/** @type {?Event} */ev);// It shouldn't be, but sometimes path is empty (window on Safari).
return 0<path.length?path[0]:ev.target}/**
   * @private
   * @param {Event} ev Event.
   * @return {void}
   */function _handleNative(ev){let handled,type=ev.type,node=ev.currentTarget,gobj=node[GESTURE_KEY];if(!gobj){return}let gs=gobj[type];if(!gs){return}if(!ev[HANDLED_OBJ]){ev[HANDLED_OBJ]={};if("touch"===type.slice(0,5)){ev=/** @type {TouchEvent} */ev;// eslint-disable-line no-self-assign
let t=ev.changedTouches[0];if("touchstart"===type){// only handle the first finger
if(1===ev.touches.length){POINTERSTATE.touch.id=t.identifier}}if(POINTERSTATE.touch.id!==t.identifier){return}if(!HAS_NATIVE_TA){if("touchstart"===type||"touchmove"===type){_handleTouchAction(ev)}}}}handled=ev[HANDLED_OBJ];// used to ignore synthetic mouse events
if(handled.skip){return}// reset recognizer state
for(let i=0,r;i<recognizers.length;i++){r=recognizers[i];if(gs[r.name]&&!handled[r.name]){if(r.flow&&-1<r.flow.start.indexOf(ev.type)&&r.reset){r.reset()}}}// enforce gesture recognizer order
for(let i=0,r;i<recognizers.length;i++){r=recognizers[i];if(gs[r.name]&&!handled[r.name]){handled[r.name]=!0;r[type](ev)}}}/**
   * @private
   * @param {TouchEvent} ev Event.
   * @return {void}
   */function _handleTouchAction(ev){let t=ev.changedTouches[0],type=ev.type;if("touchstart"===type){POINTERSTATE.touch.x=t.clientX;POINTERSTATE.touch.y=t.clientY;POINTERSTATE.touch.scrollDecided=!1}else if("touchmove"===type){if(POINTERSTATE.touch.scrollDecided){return}POINTERSTATE.touch.scrollDecided=!0;let ta=firstTouchAction(ev),shouldPrevent=!1,dx=Math.abs(POINTERSTATE.touch.x-t.clientX),dy=Math.abs(POINTERSTATE.touch.y-t.clientY);if(!ev.cancelable){// scrolling is happening
}else if("none"===ta){shouldPrevent=!0}else if("pan-x"===ta){shouldPrevent=dy>dx}else if("pan-y"===ta){shouldPrevent=dx>dy}if(shouldPrevent){ev.preventDefault()}else{prevent("track")}}}/**
   * Adds an event listener to a node for the given gesture type.
   *
   * @param {!EventTarget} node Node to add listener on
   * @param {string} evType Gesture type: `down`, `up`, `track`, or `tap`
   * @param {!function(!Event):void} handler Event listener function to call
   * @return {boolean} Returns true if a gesture event listener was added.
   */function addListener(node,evType,handler){if(gestures[evType]){_add(node,evType,handler);return!0}return!1}/**
   * Removes an event listener from a node for the given gesture type.
   *
   * @param {!EventTarget} node Node to remove listener from
   * @param {string} evType Gesture type: `down`, `up`, `track`, or `tap`
   * @param {!function(!Event):void} handler Event listener function previously passed to
   *  `addListener`.
   * @return {boolean} Returns true if a gesture event listener was removed.
   */function removeListener(node,evType,handler){if(gestures[evType]){_remove(node,evType,handler);return!0}return!1}/**
   * automate the event listeners for the native events
   *
   * @private
   * @param {!EventTarget} node Node on which to add the event.
   * @param {string} evType Event type to add.
   * @param {function(!Event)} handler Event handler function.
   * @return {void}
   */function _add(node,evType,handler){let recognizer=gestures[evType],deps=recognizer.deps,name=recognizer.name,gobj=node[GESTURE_KEY];if(!gobj){node[GESTURE_KEY]=gobj={}}for(let i=0,dep,gd;i<deps.length;i++){dep=deps[i];// don't add mouse handlers on iOS because they cause gray selection overlays
if(IS_TOUCH_ONLY&&isMouseEvent(dep)&&"click"!==dep){continue}gd=gobj[dep];if(!gd){gobj[dep]=gd={_count:0}}if(0===gd._count){node.addEventListener(dep,_handleNative,PASSIVE_TOUCH(dep))}gd[name]=(gd[name]||0)+1;gd._count=(gd._count||0)+1}node.addEventListener(evType,handler);if(recognizer.touchAction){setTouchAction(node,recognizer.touchAction)}}/**
   * automate event listener removal for native events
   *
   * @private
   * @param {!EventTarget} node Node on which to remove the event.
   * @param {string} evType Event type to remove.
   * @param {function(!Event): void} handler Event handler function.
   * @return {void}
   */function _remove(node,evType,handler){let recognizer=gestures[evType],deps=recognizer.deps,name=recognizer.name,gobj=node[GESTURE_KEY];if(gobj){for(let i=0,dep,gd;i<deps.length;i++){dep=deps[i];gd=gobj[dep];if(gd&&gd[name]){gd[name]=(gd[name]||1)-1;gd._count=(gd._count||1)-1;if(0===gd._count){node.removeEventListener(dep,_handleNative,PASSIVE_TOUCH(dep))}}}}node.removeEventListener(evType,handler)}/**
   * Registers a new gesture event recognizer for adding new custom
   * gesture event types.
   *
   * @param {!GestureRecognizer} recog Gesture recognizer descriptor
   * @return {void}
   */function register$1(recog){recognizers.push(recog);for(let i=0;i<recog.emits.length;i++){gestures[recog.emits[i]]=recog}}/**
   * @private
   * @param {string} evName Event name.
   * @return {Object} Returns the gesture for the given event name.
   */function _findRecognizerByEvent(evName){for(let i=0,r;i<recognizers.length;i++){r=recognizers[i];for(let j=0,n;j<r.emits.length;j++){n=r.emits[j];if(n===evName){return r}}}return null}/**
   * Sets scrolling direction on node.
   *
   * This value is checked on first move, thus it should be called prior to
   * adding event listeners.
   *
   * @param {!EventTarget} node Node to set touch action setting on
   * @param {string} value Touch action value
   * @return {void}
   */function setTouchAction(node,value){if(HAS_NATIVE_TA&&node instanceof HTMLElement){// NOTE: add touchAction async so that events can be added in
// custom element constructors. Otherwise we run afoul of custom
// elements restriction against settings attributes (style) in the
// constructor.
microTask.run(()=>{node.style.touchAction=value})}node[TOUCH_ACTION]=value}/**
   * Dispatches an event on the `target` element of `type` with the given
   * `detail`.
   * @private
   * @param {!EventTarget} target The element on which to fire an event.
   * @param {string} type The type of event to fire.
   * @param {!Object=} detail The detail object to populate on the event.
   * @return {void}
   */function _fire(target,type,detail){let ev=new Event(type,{bubbles:!0,cancelable:!0,composed:!0});ev.detail=detail;wrap$1(/** @type {!Node} */target).dispatchEvent(ev);// forward `preventDefault` in a clean way
if(ev.defaultPrevented){let preventer=detail.preventer||detail.sourceEvent;if(preventer&&preventer.preventDefault){preventer.preventDefault()}}}/**
   * Prevents the dispatch and default action of the given event name.
   *
   * @param {string} evName Event name.
   * @return {void}
   */function prevent(evName){let recognizer=_findRecognizerByEvent(evName);if(recognizer.info){recognizer.info.prevent=!0}}/**
   * Reset the 2500ms timeout on processing mouse input after detecting touch input.
   *
   * Touch inputs create synthesized mouse inputs anywhere from 0 to 2000ms after the touch.
   * This method should only be called during testing with simulated touch inputs.
   * Calling this method in production may cause duplicate taps or other Gestures.
   *
   * @return {void}
   */function resetMouseCanceller(){if(POINTERSTATE.mouse.mouseIgnoreJob){POINTERSTATE.mouse.mouseIgnoreJob.flush()}}/* eslint-disable valid-jsdoc */register$1({name:"downup",deps:["mousedown","touchstart","touchend"],flow:{start:["mousedown","touchstart"],end:["mouseup","touchend"]},emits:["down","up"],info:{movefn:null,upfn:null},/**
   * @this {GestureRecognizer}
   * @return {void}
   */reset:function(){untrackDocument(this.info)},/**
   * @this {GestureRecognizer}
   * @param {MouseEvent} e
   * @return {void}
   */mousedown:function(e){if(!hasLeftMouseButton(e)){return}let t=_findOriginalTarget(e),self=this,movefn=function movefn(e){if(!hasLeftMouseButton(e)){downupFire("up",t,e);untrackDocument(self.info)}},upfn=function upfn(e){if(hasLeftMouseButton(e)){downupFire("up",t,e)}untrackDocument(self.info)};trackDocument(this.info,movefn,upfn);downupFire("down",t,e)},/**
   * @this {GestureRecognizer}
   * @param {TouchEvent} e
   * @return {void}
   */touchstart:function(e){downupFire("down",_findOriginalTarget(e),e.changedTouches[0],e)},/**
   * @this {GestureRecognizer}
   * @param {TouchEvent} e
   * @return {void}
   */touchend:function(e){downupFire("up",_findOriginalTarget(e),e.changedTouches[0],e)}});/**
     * @param {string} type
     * @param {EventTarget} target
     * @param {Event|Touch} event
     * @param {Event=} preventer
     * @return {void}
     */function downupFire(type,target,event,preventer){if(!target){return}_fire(target,type,{x:event.clientX,y:event.clientY,sourceEvent:event,preventer:preventer,prevent:function(e){return prevent(e)}})}register$1({name:"track",touchAction:"none",deps:["mousedown","touchstart","touchmove","touchend"],flow:{start:["mousedown","touchstart"],end:["mouseup","touchend"]},emits:["track"],info:{x:0,y:0,state:"start",started:!1,moves:[],/** @this {GestureInfo} */addMove:function(move){if(this.moves.length>TRACK_LENGTH){this.moves.shift()}this.moves.push(move)},movefn:null,upfn:null,prevent:!1},/**
   * @this {GestureRecognizer}
   * @return {void}
   */reset:function(){this.info.state="start";this.info.started=!1;this.info.moves=[];this.info.x=0;this.info.y=0;this.info.prevent=!1;untrackDocument(this.info)},/**
   * @this {GestureRecognizer}
   * @param {MouseEvent} e
   * @return {void}
   */mousedown:function(e){if(!hasLeftMouseButton(e)){return}let t=_findOriginalTarget(e),self=this,movefn=function movefn(e){let x=e.clientX,y=e.clientY;if(trackHasMovedEnough(self.info,x,y)){// first move is 'start', subsequent moves are 'move', mouseup is 'end'
self.info.state=self.info.started?"mouseup"===e.type?"end":"track":"start";if("start"===self.info.state){// if and only if tracking, always prevent tap
prevent("tap")}self.info.addMove({x:x,y:y});if(!hasLeftMouseButton(e)){// always fire "end"
self.info.state="end";untrackDocument(self.info)}if(t){trackFire(self.info,t,e)}self.info.started=!0}},upfn=function upfn(e){if(self.info.started){movefn(e)}// remove the temporary listeners
untrackDocument(self.info)};// add temporary document listeners as mouse retargets
trackDocument(this.info,movefn,upfn);this.info.x=e.clientX;this.info.y=e.clientY},/**
   * @this {GestureRecognizer}
   * @param {TouchEvent} e
   * @return {void}
   */touchstart:function(e){let ct=e.changedTouches[0];this.info.x=ct.clientX;this.info.y=ct.clientY},/**
   * @this {GestureRecognizer}
   * @param {TouchEvent} e
   * @return {void}
   */touchmove:function(e){let t=_findOriginalTarget(e),ct=e.changedTouches[0],x=ct.clientX,y=ct.clientY;if(trackHasMovedEnough(this.info,x,y)){if("start"===this.info.state){// if and only if tracking, always prevent tap
prevent("tap")}this.info.addMove({x:x,y:y});trackFire(this.info,t,ct);this.info.state="track";this.info.started=!0}},/**
   * @this {GestureRecognizer}
   * @param {TouchEvent} e
   * @return {void}
   */touchend:function(e){let t=_findOriginalTarget(e),ct=e.changedTouches[0];// only trackend if track was started and not aborted
if(this.info.started){// reset started state on up
this.info.state="end";this.info.addMove({x:ct.clientX,y:ct.clientY});trackFire(this.info,t,ct)}}});/**
     * @param {!GestureInfo} info
     * @param {number} x
     * @param {number} y
     * @return {boolean}
     */function trackHasMovedEnough(info,x,y){if(info.prevent){return!1}if(info.started){return!0}let dx=Math.abs(info.x-x),dy=Math.abs(info.y-y);return dx>=TRACK_DISTANCE||dy>=TRACK_DISTANCE}/**
   * @param {!GestureInfo} info
   * @param {?EventTarget} target
   * @param {Touch} touch
   * @return {void}
   */function trackFire(info,target,touch){if(!target){return}let secondlast=info.moves[info.moves.length-2],lastmove=info.moves[info.moves.length-1],dx=lastmove.x-info.x,dy=lastmove.y-info.y,ddx,ddy=0;if(secondlast){ddx=lastmove.x-secondlast.x;ddy=lastmove.y-secondlast.y}_fire(target,"track",{state:info.state,x:touch.clientX,y:touch.clientY,dx:dx,dy:dy,ddx:ddx,ddy:ddy,sourceEvent:touch,hover:function(){return deepTargetFind(touch.clientX,touch.clientY)}})}register$1({name:"tap",deps:["mousedown","click","touchstart","touchend"],flow:{start:["mousedown","touchstart"],end:["click","touchend"]},emits:["tap"],info:{x:NaN,y:NaN,prevent:!1},/**
   * @this {GestureRecognizer}
   * @return {void}
   */reset:function(){this.info.x=NaN;this.info.y=NaN;this.info.prevent=!1},/**
   * @this {GestureRecognizer}
   * @param {MouseEvent} e
   * @return {void}
   */mousedown:function(e){if(hasLeftMouseButton(e)){this.info.x=e.clientX;this.info.y=e.clientY}},/**
   * @this {GestureRecognizer}
   * @param {MouseEvent} e
   * @return {void}
   */click:function(e){if(hasLeftMouseButton(e)){trackForward(this.info,e)}},/**
   * @this {GestureRecognizer}
   * @param {TouchEvent} e
   * @return {void}
   */touchstart:function(e){const touch=e.changedTouches[0];this.info.x=touch.clientX;this.info.y=touch.clientY},/**
   * @this {GestureRecognizer}
   * @param {TouchEvent} e
   * @return {void}
   */touchend:function(e){trackForward(this.info,e.changedTouches[0],e)}});/**
     * @param {!GestureInfo} info
     * @param {Event | Touch} e
     * @param {Event=} preventer
     * @return {void}
     */function trackForward(info,e,preventer){let dx=Math.abs(e.clientX-info.x),dy=Math.abs(e.clientY-info.y),t=_findOriginalTarget(preventer||e);if(!t||canBeDisabled[/** @type {!HTMLElement} */t.localName]&&t.hasAttribute("disabled")){return}// dx,dy can be NaN if `click` has been simulated and there was no `down` for `start`
if(isNaN(dx)||isNaN(dy)||dx<=TAP_DISTANCE&&dy<=TAP_DISTANCE||isSyntheticClick(e)){// prevent taps from being generated if an event has canceled them
if(!info.prevent){_fire(t,"tap",{x:e.clientX,y:e.clientY,sourceEvent:e,preventer:preventer})}}}/* eslint-enable valid-jsdoc */ /** @deprecated */const findOriginalTarget=_findOriginalTarget;/** @deprecated */_exports.findOriginalTarget=findOriginalTarget;const add=addListener;/** @deprecated */_exports.add=add;const remove=removeListener;_exports.remove=remove;var gestures$1={gestures:gestures,recognizers:recognizers,deepTargetFind:deepTargetFind,addListener:addListener,removeListener:removeListener,register:register$1,setTouchAction:setTouchAction,prevent:prevent,resetMouseCanceller:resetMouseCanceller,findOriginalTarget:findOriginalTarget,add:add,remove:remove};_exports.$gestures=gestures$1;const GestureEventListeners=dedupingMixin(superClass=>{/**
   * @polymer
   * @mixinClass
   * @implements {Polymer_GestureEventListeners}
   */class GestureEventListeners extends superClass{/**
     * Add the event listener to the node if it is a gestures event.
     *
     * @param {!EventTarget} node Node to add event listener to
     * @param {string} eventName Name of event
     * @param {function(!Event):void} handler Listener function to add
     * @return {void}
     * @override
     */_addEventListenerToNode(node,eventName,handler){if(!addListener(node,eventName,handler)){super._addEventListenerToNode(node,eventName,handler)}}/**
       * Remove the event listener to the node if it is a gestures event.
       *
       * @param {!EventTarget} node Node to remove event listener from
       * @param {string} eventName Name of event
       * @param {function(!Event):void} handler Listener function to remove
       * @return {void}
       * @override
       */_removeEventListenerFromNode(node,eventName,handler){if(!removeListener(node,eventName,handler)){super._removeEventListenerFromNode(node,eventName,handler)}}}return GestureEventListeners});_exports.GestureEventListeners=GestureEventListeners;var gestureEventListeners={GestureEventListeners:GestureEventListeners};_exports.$gestureEventListeners=gestureEventListeners;const HOST_DIR=/:host\(:dir\((ltr|rtl)\)\)/g,HOST_DIR_REPLACMENT=":host([dir=\"$1\"])",EL_DIR=/([\s\w-#\.\[\]\*]*):dir\((ltr|rtl)\)/g,EL_DIR_REPLACMENT=":host([dir=\"$2\"]) $1",DIR_CHECK=/:dir\((?:ltr|rtl)\)/,SHIM_SHADOW=!!(window.ShadyDOM&&window.ShadyDOM.inUse),DIR_INSTANCES=[];/** @type {?MutationObserver} */let observer=null,DOCUMENT_DIR="";function getRTL(){DOCUMENT_DIR=document.documentElement.getAttribute("dir")}/**
   * @param {!Polymer_DirMixin} instance Instance to set RTL status on
   */function setRTL(instance){if(!instance.__autoDirOptOut){const el=/** @type {!HTMLElement} */instance;el.setAttribute("dir",DOCUMENT_DIR)}}function updateDirection(){getRTL();DOCUMENT_DIR=document.documentElement.getAttribute("dir");for(let i=0;i<DIR_INSTANCES.length;i++){setRTL(DIR_INSTANCES[i])}}function takeRecords(){if(observer&&observer.takeRecords().length){updateDirection()}}/**
   * Element class mixin that allows elements to use the `:dir` CSS Selector to
   * have text direction specific styling.
   *
   * With this mixin, any stylesheet provided in the template will transform
   * `:dir` into `:host([dir])` and sync direction with the page via the
   * element's `dir` attribute.
   *
   * Elements can opt out of the global page text direction by setting the `dir`
   * attribute directly in `ready()` or in HTML.
   *
   * Caveats:
   * - Applications must set `<html dir="ltr">` or `<html dir="rtl">` to sync
   *   direction
   * - Automatic left-to-right or right-to-left styling is sync'd with the
   *   `<html>` element only.
   * - Changing `dir` at runtime is supported.
   * - Opting out of the global direction styling is permanent
   *
   * @mixinFunction
   * @polymer
   * @appliesMixin PropertyAccessors
   * @template T
   * @param {function(new:T)} superClass Class to apply mixin to.
   * @return {function(new:T)} superClass with mixin applied.
   */const DirMixin=dedupingMixin(base=>{if(!SHIM_SHADOW){if(!observer){getRTL();observer=new MutationObserver(updateDirection);observer.observe(document.documentElement,{attributes:!0,attributeFilter:["dir"]})}}/**
     * @constructor
     * @implements {Polymer_PropertyAccessors}
     * @private
     */const elementBase=PropertyAccessors(base);/**
                                                * @polymer
                                                * @mixinClass
                                                * @implements {Polymer_DirMixin}
                                                */class Dir extends elementBase{/**
     * @param {string} cssText .
     * @param {string} baseURI .
     * @return {string} .
     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
     * @nocollapse
     */static _processStyleText(cssText,baseURI){// TODO(https://github.com/google/closure-compiler/issues/3240):
//     Change back to just super.methodCall()
cssText=elementBase._processStyleText.call(this,cssText,baseURI);if(!SHIM_SHADOW&&DIR_CHECK.test(cssText)){cssText=this._replaceDirInCssText(cssText);this.__activateDir=!0}return cssText}/**
       * Replace `:dir` in the given CSS text
       *
       * @param {string} text CSS text to replace DIR
       * @return {string} Modified CSS
       * @nocollapse
       */static _replaceDirInCssText(text){let replacedText=text;replacedText=replacedText.replace(HOST_DIR,HOST_DIR_REPLACMENT);replacedText=replacedText.replace(EL_DIR,EL_DIR_REPLACMENT);return replacedText}constructor(){super();/** @type {boolean} */this.__autoDirOptOut=!1}/**
       * @override
       * @suppress {invalidCasts} Closure doesn't understand that `this` is an
       *     HTMLElement
       * @return {void}
       */ready(){super.ready();this.__autoDirOptOut=/** @type {!HTMLElement} */this.hasAttribute("dir")}/**
       * @override
       * @suppress {missingProperties} If it exists on elementBase, it can be
       *   super'd
       * @return {void}
       */connectedCallback(){if(elementBase.prototype.connectedCallback){super.connectedCallback()}if(this.constructor.__activateDir){takeRecords();DIR_INSTANCES.push(this);setRTL(this)}}/**
       * @override
       * @suppress {missingProperties} If it exists on elementBase, it can be
       *   super'd
       * @return {void}
       */disconnectedCallback(){if(elementBase.prototype.disconnectedCallback){super.disconnectedCallback()}if(this.constructor.__activateDir){const idx=DIR_INSTANCES.indexOf(this);if(-1<idx){DIR_INSTANCES.splice(idx,1)}}}}Dir.__activateDir=!1;return Dir});_exports.DirMixin=DirMixin;var dirMixin={DirMixin:DirMixin};_exports.$dirMixin=dirMixin;let scheduled=!1,beforeRenderQueue=[],afterRenderQueue=[];function schedule(){scheduled=!0;// before next render
requestAnimationFrame(function(){scheduled=!1;flushQueue(beforeRenderQueue);// after the render
setTimeout(function(){runQueue(afterRenderQueue)})})}function flushQueue(queue){while(queue.length){callMethod(queue.shift())}}function runQueue(queue){for(let i=0,l=queue.length;i<l;i++){callMethod(queue.shift())}}function callMethod(info){const context=info[0],callback=info[1],args=info[2];try{callback.apply(context,args)}catch(e){setTimeout(()=>{throw e})}}/**
   * Flushes all `beforeNextRender` tasks, followed by all `afterNextRender`
   * tasks.
   *
   * @return {void}
   */function flush(){while(beforeRenderQueue.length||afterRenderQueue.length){flushQueue(beforeRenderQueue);flushQueue(afterRenderQueue)}scheduled=!1}/**
   * Enqueues a callback which will be run before the next render, at
   * `requestAnimationFrame` timing.
   *
   * This method is useful for enqueuing work that requires DOM measurement,
   * since measurement may not be reliable in custom element callbacks before
   * the first render, as well as for batching measurement tasks in general.
   *
   * Tasks in this queue may be flushed by calling `flush()`.
   *
   * @param {*} context Context object the callback function will be bound to
   * @param {function(...*):void} callback Callback function
   * @param {!Array=} args An array of arguments to call the callback function with
   * @return {void}
   */function beforeNextRender(context,callback,args){if(!scheduled){schedule()}beforeRenderQueue.push([context,callback,args])}/**
   * Enqueues a callback which will be run after the next render, equivalent
   * to one task (`setTimeout`) after the next `requestAnimationFrame`.
   *
   * This method is useful for tuning the first-render performance of an
   * element or application by deferring non-critical work until after the
   * first paint.  Typical non-render-critical work may include adding UI
   * event listeners and aria attributes.
   *
   * @param {*} context Context object the callback function will be bound to
   * @param {function(...*):void} callback Callback function
   * @param {!Array=} args An array of arguments to call the callback function with
   * @return {void}
   */function afterNextRender(context,callback,args){if(!scheduled){schedule()}afterRenderQueue.push([context,callback,args])}var renderStatus={flush:flush,beforeNextRender:beforeNextRender,afterNextRender:afterNextRender};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$renderStatus=renderStatus;function resolve(){document.body.removeAttribute("unresolved")}if("interactive"===document.readyState||"complete"===document.readyState){resolve()}else{window.addEventListener("DOMContentLoaded",resolve)}function newSplice(index,removed,addedCount){return{index:index,removed:removed,addedCount:addedCount}}const EDIT_LEAVE=0,EDIT_UPDATE=1,EDIT_ADD=2,EDIT_DELETE=3;// Note: This function is *based* on the computation of the Levenshtein
// "edit" distance. The one change is that "updates" are treated as two
// edits - not one. With Array splices, an update is really a delete
// followed by an add. By retaining this, we optimize for "keeping" the
// maximum array items in the original array. For example:
//
//   'xxxx123' -> '123yyyy'
//
// With 1-edit updates, the shortest path would be just to update all seven
// characters. With 2-edit updates, we delete 4, leave 3, and add 4. This
// leaves the substring '123' intact.
function calcEditDistances(current,currentStart,currentEnd,old,oldStart,oldEnd){// "Deletion" columns
let rowCount=oldEnd-oldStart+1,columnCount=currentEnd-currentStart+1,distances=Array(rowCount);// "Addition" rows. Initialize null column.
for(let i=0;i<rowCount;i++){distances[i]=Array(columnCount);distances[i][0]=i}// Initialize null row
for(let j=0;j<columnCount;j++)distances[0][j]=j;for(let i=1;i<rowCount;i++){for(let j=1;j<columnCount;j++){if(equals(current[currentStart+j-1],old[oldStart+i-1]))distances[i][j]=distances[i-1][j-1];else{let north=distances[i-1][j]+1,west=distances[i][j-1]+1;distances[i][j]=north<west?north:west}}}return distances}// This starts at the final weight, and walks "backward" by finding
// the minimum previous weight recursively until the origin of the weight
// matrix.
function spliceOperationsFromEditDistances(distances){let i=distances.length-1,j=distances[0].length-1,current=distances[i][j],edits=[];while(0<i||0<j){if(0==i){edits.push(EDIT_ADD);j--;continue}if(0==j){edits.push(EDIT_DELETE);i--;continue}let northWest=distances[i-1][j-1],west=distances[i-1][j],north=distances[i][j-1],min;if(west<north)min=west<northWest?west:northWest;else min=north<northWest?north:northWest;if(min==northWest){if(northWest==current){edits.push(EDIT_LEAVE)}else{edits.push(EDIT_UPDATE);current=northWest}i--;j--}else if(min==west){edits.push(EDIT_DELETE);i--;current=west}else{edits.push(EDIT_ADD);j--;current=north}}edits.reverse();return edits}/**
   * Splice Projection functions:
   *
   * A splice map is a representation of how a previous array of items
   * was transformed into a new array of items. Conceptually it is a list of
   * tuples of
   *
   *   <index, removed, addedCount>
   *
   * which are kept in ascending index order of. The tuple represents that at
   * the |index|, |removed| sequence of items were removed, and counting forward
   * from |index|, |addedCount| items were added.
   */ /**
       * Lacking individual splice mutation information, the minimal set of
       * splices can be synthesized given the previous state and final state of an
       * array. The basic approach is to calculate the edit distance matrix and
       * choose the shortest path through it.
       *
       * Complexity: O(l * p)
       *   l: The length of the current array
       *   p: The length of the old array
       *
       * @param {!Array} current The current "changed" array for which to
       * calculate splices.
       * @param {number} currentStart Starting index in the `current` array for
       * which splices are calculated.
       * @param {number} currentEnd Ending index in the `current` array for
       * which splices are calculated.
       * @param {!Array} old The original "unchanged" array to compare `current`
       * against to determine splices.
       * @param {number} oldStart Starting index in the `old` array for
       * which splices are calculated.
       * @param {number} oldEnd Ending index in the `old` array for
       * which splices are calculated.
       * @return {!Array} Returns an array of splice record objects. Each of these
       * contains: `index` the location where the splice occurred; `removed`
       * the array of removed items from this location; `addedCount` the number
       * of items added at this location.
       */function calcSplices(current,currentStart,currentEnd,old,oldStart,oldEnd){let prefixCount=0,suffixCount=0,splice,minLength=Math.min(currentEnd-currentStart,oldEnd-oldStart);if(0==currentStart&&0==oldStart)prefixCount=sharedPrefix(current,old,minLength);if(currentEnd==current.length&&oldEnd==old.length)suffixCount=sharedSuffix(current,old,minLength-prefixCount);currentStart+=prefixCount;oldStart+=prefixCount;currentEnd-=suffixCount;oldEnd-=suffixCount;if(0==currentEnd-currentStart&&0==oldEnd-oldStart)return[];if(currentStart==currentEnd){splice=newSplice(currentStart,[],0);while(oldStart<oldEnd)splice.removed.push(old[oldStart++]);return[splice]}else if(oldStart==oldEnd)return[newSplice(currentStart,[],currentEnd-currentStart)];let ops=spliceOperationsFromEditDistances(calcEditDistances(current,currentStart,currentEnd,old,oldStart,oldEnd));splice=void 0;let splices=[],index=currentStart,oldIndex=oldStart;for(let i=0;i<ops.length;i++){switch(ops[i]){case EDIT_LEAVE:if(splice){splices.push(splice);splice=void 0}index++;oldIndex++;break;case EDIT_UPDATE:if(!splice)splice=newSplice(index,[],0);splice.addedCount++;index++;splice.removed.push(old[oldIndex]);oldIndex++;break;case EDIT_ADD:if(!splice)splice=newSplice(index,[],0);splice.addedCount++;index++;break;case EDIT_DELETE:if(!splice)splice=newSplice(index,[],0);splice.removed.push(old[oldIndex]);oldIndex++;break;}}if(splice){splices.push(splice)}return splices}function sharedPrefix(current,old,searchLength){for(let i=0;i<searchLength;i++)if(!equals(current[i],old[i]))return i;return searchLength}function sharedSuffix(current,old,searchLength){let index1=current.length,index2=old.length,count=0;while(count<searchLength&&equals(current[--index1],old[--index2]))count++;return count}/**
   * Returns an array of splice records indicating the minimum edits required
   * to transform the `previous` array into the `current` array.
   *
   * Splice records are ordered by index and contain the following fields:
   * - `index`: index where edit started
   * - `removed`: array of removed items from this index
   * - `addedCount`: number of items added at this index
   *
   * This function is based on the Levenshtein "minimum edit distance"
   * algorithm. Note that updates are treated as removal followed by addition.
   *
   * The worst-case time complexity of this algorithm is `O(l * p)`
   *   l: The length of the current array
   *   p: The length of the previous array
   *
   * However, the worst-case complexity is reduced by an `O(n)` optimization
   * to detect any shared prefix & suffix between the two arrays and only
   * perform the more expensive minimum edit distance calculation over the
   * non-shared portions of the arrays.
   *
   * @function
   * @param {!Array} current The "changed" array for which splices will be
   * calculated.
   * @param {!Array} previous The "unchanged" original array to compare
   * `current` against to determine the splices.
   * @return {!Array} Returns an array of splice record objects. Each of these
   * contains: `index` the location where the splice occurred; `removed`
   * the array of removed items from this location; `addedCount` the number
   * of items added at this location.
   */function calculateSplices(current,previous){return calcSplices(current,0,current.length,previous,0,previous.length)}function equals(currentValue,previousValue){return currentValue===previousValue}var arraySplice={calculateSplices:calculateSplices};_exports.$arraySplice=arraySplice;function isSlot(node){return"slot"===node.localName}/**
   * Class that listens for changes (additions or removals) to
   * "flattened nodes" on a given `node`. The list of flattened nodes consists
   * of a node's children and, for any children that are `<slot>` elements,
   * the expanded flattened list of `assignedNodes`.
   * For example, if the observed node has children `<a></a><slot></slot><b></b>`
   * and the `<slot>` has one `<div>` assigned to it, then the flattened
   * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other
   * `<slot>` elements assigned to it, these are flattened as well.
   *
   * The provided `callback` is called whenever any change to this list
   * of flattened nodes occurs, where an addition or removal of a node is
   * considered a change. The `callback` is called with one argument, an object
   * containing an array of any `addedNodes` and `removedNodes`.
   *
   * Note: the callback is called asynchronous to any changes
   * at a microtask checkpoint. This is because observation is performed using
   * `MutationObserver` and the `<slot>` element's `slotchange` event which
   * are asynchronous.
   *
   * An example:
   * ```js
   * class TestSelfObserve extends PolymerElement {
   *   static get is() { return 'test-self-observe';}
   *   connectedCallback() {
   *     super.connectedCallback();
   *     this._observer = new FlattenedNodesObserver(this, (info) => {
   *       this.info = info;
   *     });
   *   }
   *   disconnectedCallback() {
   *     super.disconnectedCallback();
   *     this._observer.disconnect();
   *   }
   * }
   * customElements.define(TestSelfObserve.is, TestSelfObserve);
   * ```
   *
   * @summary Class that listens for changes (additions or removals) to
   * "flattened nodes" on a given `node`.
   * @implements {PolymerDomApi.ObserveHandle}
   */let FlattenedNodesObserver=class{/**
   * Returns the list of flattened nodes for the given `node`.
   * This list consists of a node's children and, for any children
   * that are `<slot>` elements, the expanded flattened list of `assignedNodes`.
   * For example, if the observed node has children `<a></a><slot></slot><b></b>`
   * and the `<slot>` has one `<div>` assigned to it, then the flattened
   * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other
   * `<slot>` elements assigned to it, these are flattened as well.
   *
   * @param {!HTMLElement|!HTMLSlotElement} node The node for which to
   *      return the list of flattened nodes.
   * @return {!Array<!Node>} The list of flattened nodes for the given `node`.
   * @nocollapse See https://github.com/google/closure-compiler/issues/2763
   */ // eslint-disable-next-line
static getFlattenedNodes(node){const wrapped=wrap$1(node);if(isSlot(node)){node=/** @type {!HTMLSlotElement} */node;// eslint-disable-line no-self-assign
return wrapped.assignedNodes({flatten:!0})}else{return Array.from(wrapped.childNodes).map(node=>{if(isSlot(node)){node=/** @type {!HTMLSlotElement} */node;// eslint-disable-line no-self-assign
return wrap$1(node).assignedNodes({flatten:!0})}else{return[node]}}).reduce((a,b)=>a.concat(b),[])}}/**
     * @param {!HTMLElement} target Node on which to listen for changes.
     * @param {?function(this: Element, { target: !HTMLElement, addedNodes: !Array<!Element>, removedNodes: !Array<!Element> }):void} callback Function called when there are additions
     * or removals from the target's list of flattened nodes.
     */ // eslint-disable-next-line
constructor(target,callback){/**
     * @type {MutationObserver}
     * @private
     */this._shadyChildrenObserver=null;/**
                                            * @type {MutationObserver}
                                            * @private
                                            */this._nativeChildrenObserver=null;this._connected=!1;/**
                              * @type {!HTMLElement}
                              * @private
                              */this._target=target;this.callback=callback;this._effectiveNodes=[];this._observer=null;this._scheduled=!1;/**
                              * @type {function()}
                              * @private
                              */this._boundSchedule=()=>{this._schedule()};this.connect();this._schedule()}/**
     * Activates an observer. This method is automatically called when
     * a `FlattenedNodesObserver` is created. It should only be called to
     * re-activate an observer that has been deactivated via the `disconnect` method.
     *
     * @return {void}
     */connect(){if(isSlot(this._target)){this._listenSlots([this._target])}else if(wrap$1(this._target).children){this._listenSlots(/** @type {!NodeList<!Node>} */wrap$1(this._target).children);if(window.ShadyDOM){this._shadyChildrenObserver=ShadyDOM.observeChildren(this._target,mutations=>{this._processMutations(mutations)})}else{this._nativeChildrenObserver=new MutationObserver(mutations=>{this._processMutations(mutations)});this._nativeChildrenObserver.observe(this._target,{childList:!0})}}this._connected=!0}/**
     * Deactivates the flattened nodes observer. After calling this method
     * the observer callback will not be called when changes to flattened nodes
     * occur. The `connect` method may be subsequently called to reactivate
     * the observer.
     *
     * @return {void}
     * @override
     */disconnect(){if(isSlot(this._target)){this._unlistenSlots([this._target])}else if(wrap$1(this._target).children){this._unlistenSlots(/** @type {!NodeList<!Node>} */wrap$1(this._target).children);if(window.ShadyDOM&&this._shadyChildrenObserver){ShadyDOM.unobserveChildren(this._shadyChildrenObserver);this._shadyChildrenObserver=null}else if(this._nativeChildrenObserver){this._nativeChildrenObserver.disconnect();this._nativeChildrenObserver=null}}this._connected=!1}/**
     * @return {void}
     * @private
     */_schedule(){if(!this._scheduled){this._scheduled=!0;microTask.run(()=>this.flush())}}/**
     * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer
     * @return {void}
     * @private
     */_processMutations(mutations){this._processSlotMutations(mutations);this.flush()}/**
     * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer
     * @return {void}
     * @private
     */_processSlotMutations(mutations){if(mutations){for(let i=0,mutation;i<mutations.length;i++){mutation=mutations[i];if(mutation.addedNodes){this._listenSlots(mutation.addedNodes)}if(mutation.removedNodes){this._unlistenSlots(mutation.removedNodes)}}}}/**
     * Flushes the observer causing any pending changes to be immediately
     * delivered the observer callback. By default these changes are delivered
     * asynchronously at the next microtask checkpoint.
     *
     * @return {boolean} Returns true if any pending changes caused the observer
     * callback to run.
     */flush(){if(!this._connected){return!1}if(window.ShadyDOM){ShadyDOM.flush()}if(this._nativeChildrenObserver){this._processSlotMutations(this._nativeChildrenObserver.takeRecords())}else if(this._shadyChildrenObserver){this._processSlotMutations(this._shadyChildrenObserver.takeRecords())}this._scheduled=!1;let info={target:this._target,addedNodes:[],removedNodes:[]},newNodes=this.constructor.getFlattenedNodes(this._target),splices=calculateSplices(newNodes,this._effectiveNodes);// process removals
for(let i=0,s;i<splices.length&&(s=splices[i]);i++){for(let j=0,n;j<s.removed.length&&(n=s.removed[j]);j++){info.removedNodes.push(n)}}// process adds
for(let i=0,s;i<splices.length&&(s=splices[i]);i++){for(let j=s.index;j<s.index+s.addedCount;j++){info.addedNodes.push(newNodes[j])}}// update cache
this._effectiveNodes=newNodes;let didFlush=!1;if(info.addedNodes.length||info.removedNodes.length){didFlush=!0;this.callback.call(this._target,info)}return didFlush}/**
     * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change
     * @return {void}
     * @private
     */_listenSlots(nodeList){for(let i=0,n;i<nodeList.length;i++){n=nodeList[i];if(isSlot(n)){n.addEventListener("slotchange",this._boundSchedule)}}}/**
     * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change
     * @return {void}
     * @private
     */_unlistenSlots(nodeList){for(let i=0,n;i<nodeList.length;i++){n=nodeList[i];if(isSlot(n)){n.removeEventListener("slotchange",this._boundSchedule)}}}};_exports.FlattenedNodesObserver=FlattenedNodesObserver;var flattenedNodesObserver={FlattenedNodesObserver:FlattenedNodesObserver};_exports.$flattenedNodesObserver=flattenedNodesObserver;const flush$1=function(){let shadyDOM,debouncers;do{shadyDOM=window.ShadyDOM&&ShadyDOM.flush();if(window.ShadyCSS&&window.ShadyCSS.ScopingShim){window.ShadyCSS.ScopingShim.flush()}debouncers=flushDebouncers()}while(shadyDOM||debouncers)};_exports.flush$1=_exports.flush=flush$1;var flush$2={enqueueDebouncer:enqueueDebouncer,flush:flush$1};/* eslint-enable no-unused-vars */_exports.$flush=flush$2;const p=Element.prototype,normalizedMatchesSelector=p.matches||p.matchesSelector||p.mozMatchesSelector||p.msMatchesSelector||p.oMatchesSelector||p.webkitMatchesSelector,matchesSelector=function(node,selector){return normalizedMatchesSelector.call(node,selector)};/**
                              * @const {function(this:Node, string): boolean}
                              */_exports.matchesSelector=matchesSelector;/**
    * Node API wrapper class returned from `Polymer.dom.(target)` when
    * `target` is a `Node`.
    * @implements {PolymerDomApi}
    * @unrestricted
    */class DomApiNative{/**
   * @param {Node} node Node for which to create a Polymer.dom helper object.
   */constructor(node){if(window.ShadyDOM&&window.ShadyDOM.inUse){window.ShadyDOM.patch(node)}this.node=node}/**
     * Returns an instance of `FlattenedNodesObserver` that
     * listens for node changes on this element.
     *
     * @param {function(this:HTMLElement, { target: !HTMLElement, addedNodes: !Array<!Element>, removedNodes: !Array<!Element> }):void} callback Called when direct or distributed children
     *   of this element changes
     * @return {!PolymerDomApi.ObserveHandle} Observer instance
     * @override
     */observeNodes(callback){return new FlattenedNodesObserver(/** @type {!HTMLElement} */this.node,callback)}/**
     * Disconnects an observer previously created via `observeNodes`
     *
     * @param {!PolymerDomApi.ObserveHandle} observerHandle Observer instance
     *   to disconnect.
     * @return {void}
     * @override
     */unobserveNodes(observerHandle){observerHandle.disconnect()}/**
     * Provided as a backwards-compatible API only.  This method does nothing.
     * @return {void}
     */notifyObserver(){}/**
                       * Returns true if the provided node is contained with this element's
                       * light-DOM children or shadow root, including any nested shadow roots
                       * of children therein.
                       *
                       * @param {Node} node Node to test
                       * @return {boolean} Returns true if the given `node` is contained within
                       *   this element's light or shadow DOM.
                       * @override
                       */deepContains(node){if(wrap$1(this.node).contains(node)){return!0}let n=node,doc=node.ownerDocument;// walk from node to `this` or `document`
while(n&&n!==doc&&n!==this.node){// use logical parentnode, or native ShadowRoot host
n=wrap$1(n).parentNode||wrap$1(n).host}return n===this.node}/**
     * Returns the root node of this node.  Equivalent to `getRootNode()`.
     *
     * @return {Node} Top most element in the dom tree in which the node
     * exists. If the node is connected to a document this is either a
     * shadowRoot or the document; otherwise, it may be the node
     * itself or a node or document fragment containing it.
     * @override
     */getOwnerRoot(){return wrap$1(this.node).getRootNode()}/**
     * For slot elements, returns the nodes assigned to the slot; otherwise
     * an empty array. It is equivalent to `<slot>.addignedNodes({flatten:true})`.
     *
     * @return {!Array<!Node>} Array of assigned nodes
     * @override
     */getDistributedNodes(){return"slot"===this.node.localName?wrap$1(this.node).assignedNodes({flatten:!0}):[]}/**
     * Returns an array of all slots this element was distributed to.
     *
     * @return {!Array<!HTMLSlotElement>} Description
     * @override
     */getDestinationInsertionPoints(){let ip$=[],n=wrap$1(this.node).assignedSlot;while(n){ip$.push(n);n=wrap$1(n).assignedSlot}return ip$}/**
     * Calls `importNode` on the `ownerDocument` for this node.
     *
     * @param {!Node} node Node to import
     * @param {boolean} deep True if the node should be cloned deeply during
     *   import
     * @return {Node} Clone of given node imported to this owner document
     */importNode(node,deep){let doc=this.node instanceof Document?this.node:this.node.ownerDocument;return wrap$1(doc).importNode(node,deep)}/**
     * @return {!Array<!Node>} Returns a flattened list of all child nodes and
     * nodes assigned to child slots.
     * @override
     */getEffectiveChildNodes(){return FlattenedNodesObserver.getFlattenedNodes(/** @type {!HTMLElement} */this.node)}/**
     * Returns a filtered list of flattened child elements for this element based
     * on the given selector.
     *
     * @param {string} selector Selector to filter nodes against
     * @return {!Array<!HTMLElement>} List of flattened child elements
     * @override
     */queryDistributedElements(selector){let c$=this.getEffectiveChildNodes(),list=[];for(let i=0,l=c$.length,c;i<l&&(c=c$[i]);i++){if(c.nodeType===Node.ELEMENT_NODE&&matchesSelector(c,selector)){list.push(c)}}return list}/**
     * For shadow roots, returns the currently focused element within this
     * shadow root.
     *
     * return {Node|undefined} Currently focused element
     * @override
     */get activeElement(){let node=this.node;return node._activeElement!==void 0?node._activeElement:node.activeElement}}function forwardMethods(proto,methods){for(let i=0,method;i<methods.length;i++){method=methods[i];/* eslint-disable valid-jsdoc */proto[method]=/** @this {DomApiNative} */function(){return this.node[method].apply(this.node,arguments)};/* eslint-enable */}}function forwardReadOnlyProperties(proto,properties){for(let i=0,name;i<properties.length;i++){name=properties[i];Object.defineProperty(proto,name,{get:function(){const domApi=/** @type {DomApiNative} */this;return domApi.node[name]},configurable:!0})}}function forwardProperties(proto,properties){for(let i=0,name;i<properties.length;i++){name=properties[i];Object.defineProperty(proto,name,{/**
       * @this {DomApiNative}
       * @return {*} .
       */get:function(){return this.node[name]},/**
       * @this {DomApiNative}
       * @param {*} value .
       */set:function(value){this.node[name]=value},configurable:!0})}}/**
   * Event API wrapper class returned from `dom.(target)` when
   * `target` is an `Event`.
   */class EventApi{constructor(event){this.event=event}/**
     * Returns the first node on the `composedPath` of this event.
     *
     * @return {!EventTarget} The node this event was dispatched to
     */get rootTarget(){return this.path[0]}/**
     * Returns the local (re-targeted) target for this event.
     *
     * @return {!EventTarget} The local (re-targeted) target for this event.
     */get localTarget(){return this.event.target}/**
     * Returns the `composedPath` for this event.
     * @return {!Array<!EventTarget>} The nodes this event propagated through
     */get path(){return this.event.composedPath()}}/**
   * @function
   * @param {boolean=} deep
   * @return {!Node}
   */_exports.EventApi=EventApi;DomApiNative.prototype.cloneNode;/**
                                   * @function
                                   * @param {!Node} node
                                   * @return {!Node}
                                   */DomApiNative.prototype.appendChild;/**
                                     * @function
                                     * @param {!Node} newChild
                                     * @param {Node} refChild
                                     * @return {!Node}
                                     */DomApiNative.prototype.insertBefore;/**
                                      * @function
                                      * @param {!Node} node
                                      * @return {!Node}
                                      */DomApiNative.prototype.removeChild;/**
                                     * @function
                                     * @param {!Node} oldChild
                                     * @param {!Node} newChild
                                     * @return {!Node}
                                     */DomApiNative.prototype.replaceChild;/**
                                      * @function
                                      * @param {string} name
                                      * @param {string} value
                                      * @return {void}
                                      */DomApiNative.prototype.setAttribute;/**
                                      * @function
                                      * @param {string} name
                                      * @return {void}
                                      */DomApiNative.prototype.removeAttribute;/**
                                         * @function
                                         * @param {string} selector
                                         * @return {?Element}
                                         */DomApiNative.prototype.querySelector;/**
                                       * @function
                                       * @param {string} selector
                                       * @return {!NodeList<!Element>}
                                       */DomApiNative.prototype.querySelectorAll;/** @type {?Node} */DomApiNative.prototype.parentNode;/** @type {?Node} */DomApiNative.prototype.firstChild;/** @type {?Node} */DomApiNative.prototype.lastChild;/** @type {?Node} */DomApiNative.prototype.nextSibling;/** @type {?Node} */DomApiNative.prototype.previousSibling;/** @type {?HTMLElement} */DomApiNative.prototype.firstElementChild;/** @type {?HTMLElement} */DomApiNative.prototype.lastElementChild;/** @type {?HTMLElement} */DomApiNative.prototype.nextElementSibling;/** @type {?HTMLElement} */DomApiNative.prototype.previousElementSibling;/** @type {!Array<!Node>} */DomApiNative.prototype.childNodes;/** @type {!Array<!HTMLElement>} */DomApiNative.prototype.children;/** @type {?DOMTokenList} */DomApiNative.prototype.classList;/** @type {string} */DomApiNative.prototype.textContent;/** @type {string} */DomApiNative.prototype.innerHTML;let DomApiImpl=DomApiNative;if(window.ShadyDOM&&window.ShadyDOM.inUse&&window.ShadyDOM.noPatch&&window.ShadyDOM.Wrapper){/**
   * @private
   * @extends {HTMLElement}
   */class Wrapper extends window.ShadyDOM.Wrapper{}// copy bespoke API onto wrapper
Object.getOwnPropertyNames(DomApiNative.prototype).forEach(prop=>{if("activeElement"!=prop){Wrapper.prototype[prop]=DomApiNative.prototype[prop]}});// Note, `classList` is here only for legacy compatibility since it does not
// trigger distribution in v1 Shadow DOM.
forwardReadOnlyProperties(Wrapper.prototype,["classList"]);DomApiImpl=Wrapper;Object.defineProperties(EventApi.prototype,{// Returns the "lowest" node in the same root as the event's currentTarget.
// When in `noPatch` mode, this must be calculated by walking the event's
// path.
localTarget:{get(){const current=this.event.currentTarget,currentRoot=current&&dom(current).getOwnerRoot(),p$=this.path;for(let i=0;i<p$.length;i++){const e=p$[i];if(dom(e).getOwnerRoot()===currentRoot){return e}}},configurable:!0},path:{get(){return window.ShadyDOM.composedPath(this.event)},configurable:!0}})}else{// Methods that can provoke distribution or must return the logical, not
// composed tree.
forwardMethods(DomApiNative.prototype,["cloneNode","appendChild","insertBefore","removeChild","replaceChild","setAttribute","removeAttribute","querySelector","querySelectorAll"]);// Properties that should return the logical, not composed tree. Note, `classList`
// is here only for legacy compatibility since it does not trigger distribution
// in v1 Shadow DOM.
forwardReadOnlyProperties(DomApiNative.prototype,["parentNode","firstChild","lastChild","nextSibling","previousSibling","firstElementChild","lastElementChild","nextElementSibling","previousElementSibling","childNodes","children","classList"]);forwardProperties(DomApiNative.prototype,["textContent","innerHTML","className"])}const DomApi=DomApiImpl;/**
                                   * Legacy DOM and Event manipulation API wrapper factory used to abstract
                                   * differences between native Shadow DOM and "Shady DOM" when polyfilling on
                                   * older browsers.
                                   *
                                   * Note that in Polymer 2.x use of `Polymer.dom` is no longer required and
                                   * in the majority of cases simply facades directly to the standard native
                                   * API.
                                   *
                                   * @summary Legacy DOM and Event manipulation API wrapper factory used to
                                   * abstract differences between native Shadow DOM and "Shady DOM."
                                   * @param {(Node|Event|DomApiNative|EventApi)=} obj Node or event to operate on
                                   * @return {!DomApiNative|!EventApi} Wrapper providing either node API or event API
                                   */_exports.DomApi=DomApi;const dom=function(obj){obj=obj||document;if(obj instanceof DomApiImpl){return(/** @type {!DomApi} */obj)}if(obj instanceof EventApi){return(/** @type {!EventApi} */obj)}let helper=obj.__domApi;if(!helper){if(obj instanceof Event){helper=new EventApi(obj)}else{helper=new DomApiImpl(/** @type {Node} */obj)}obj.__domApi=helper}return helper};_exports.dom=dom;var polymer_dom={matchesSelector:matchesSelector,EventApi:EventApi,DomApi:DomApi,dom:dom,flush:flush$1,addDebouncer:enqueueDebouncer};_exports.$polymerDom=polymer_dom;const ShadyDOM$1=window.ShadyDOM,ShadyCSS=window.ShadyCSS;/**
                                   * Return true if node scope is correct.
                                   *
                                   * @param {!Element} node Node to check scope
                                   * @param {!Node} scope Scope reference
                                   * @return {boolean} True if node is in scope
                                   */function sameScope(node,scope){return wrap$1(node).getRootNode()===scope}/**
   * Ensure that elements in a ShadowDOM container are scoped correctly.
   * This function is only needed when ShadyDOM is used and unpatched DOM APIs are used in third party code.
   * This can happen in noPatch mode or when specialized APIs like ranges or tables are used to mutate DOM.
   *
   * @param  {!Element} container Container element to scope
   * @param  {boolean=} shouldObserve if true, start a mutation observer for added nodes to the container
   * @return {?MutationObserver} Returns a new MutationObserver on `container` if `shouldObserve` is true.
   */function scopeSubtree(container,shouldObserve=!1){// If using native ShadowDOM, abort
if(!ShadyDOM$1||!ShadyCSS){return null}// ShadyCSS handles DOM mutations when ShadyDOM does not handle scoping itself
if(!ShadyDOM$1.handlesDynamicScoping){return null}const ScopingShim=ShadyCSS.ScopingShim;// if ScopingShim is not available, abort
if(!ScopingShim){return null}// capture correct scope for container
const containerScope=ScopingShim.scopeForNode(container),root=wrap$1(container).getRootNode(),scopify=node=>{if(!sameScope(node,root)){return}// NOTE: native qSA does not honor scoped DOM, but it is faster, and the same behavior as Polymer v1
const elements=Array.from(ShadyDOM$1.nativeMethods.querySelectorAll.call(node,"*"));elements.push(node);for(let i=0;i<elements.length;i++){const el=elements[i];if(!sameScope(el,root)){continue}const currentScope=ScopingShim.currentScopeForNode(el);if(currentScope!==containerScope){if(""!==currentScope){ScopingShim.unscopeNode(el,currentScope)}ScopingShim.scopeNode(el,containerScope)}}};// scope everything in container
scopify(container);if(shouldObserve){const mo=new MutationObserver(mxns=>{for(let i=0;i<mxns.length;i++){const mxn=mxns[i];for(let j=0;j<mxn.addedNodes.length;j++){const addedNode=mxn.addedNodes[j];if(addedNode.nodeType===Node.ELEMENT_NODE){scopify(addedNode)}}}});mo.observe(container,{childList:!0,subtree:!0});return mo}else{return null}}var scopeSubtree$1={scopeSubtree:scopeSubtree};_exports.$scopeSubtree=scopeSubtree$1;const bundledImportMeta$1=_objectSpread({},meta,{url:new URL("../../node_assets/%40polymer/polymer/lib/legacy/legacy-element-mixin.js",meta.url).href});let styleInterface=window.ShadyCSS;/**
                                       * Element class mixin that provides Polymer's "legacy" API intended to be
                                       * backward-compatible to the greatest extent possible with the API
                                       * found on the Polymer 1.x `Polymer.Base` prototype applied to all elements
                                       * defined using the `Polymer({...})` function.
                                       *
                                       * @mixinFunction
                                       * @polymer
                                       * @appliesMixin ElementMixin
                                       * @appliesMixin GestureEventListeners
                                       * @property isAttached {boolean} Set to `true` in this element's
                                       *   `connectedCallback` and `false` in `disconnectedCallback`
                                       * @summary Element class mixin that provides Polymer's "legacy" API
                                       */const LegacyElementMixin=dedupingMixin(base=>{/**
   * @constructor
   * @implements {Polymer_ElementMixin}
   * @implements {Polymer_GestureEventListeners}
   * @implements {Polymer_DirMixin}
   * @extends {HTMLElement}
   * @private
   */const legacyElementBase=DirMixin(GestureEventListeners(ElementMixin(base))),DIRECTION_MAP={x:"pan-x",y:"pan-y",none:"none",all:"auto"};/**
                                                                                     * Map of simple names to touch action names
                                                                                     * @dict
                                                                                     */ /**
      * @polymer
      * @mixinClass
      * @extends {legacyElementBase}
      * @implements {Polymer_LegacyElementMixin}
      * @unrestricted
      */class LegacyElement extends legacyElementBase{constructor(){super();/** @type {boolean} */this.isAttached;/** @type {?WeakMap<!Element, !Object<string, !Function>>} */this.__boundListeners;/** @type {?Object<string, ?Function>} */this._debouncers}/**
       * Forwards `importMeta` from the prototype (i.e. from the info object
       * passed to `Polymer({...})`) to the static API.
       *
       * @return {!Object} The `import.meta` object set on the prototype
       * @suppress {missingProperties} `this` is always in the instance in
       *  closure for some reason even in a static method, rather than the class
       * @nocollapse
       */static get importMeta(){return this.prototype.importMeta}/**
       * Legacy callback called during the `constructor`, for overriding
       * by the user.
       * @override
       * @return {void}
       */created(){}/**
                  * Provides an implementation of `connectedCallback`
                  * which adds Polymer legacy API's `attached` method.
                  * @return {void}
                  * @override
                  */connectedCallback(){super.connectedCallback();this.isAttached=!0;this.attached()}/**
       * Legacy callback called during `connectedCallback`, for overriding
       * by the user.
       * @override
       * @return {void}
       */attached(){}/**
                   * Provides an implementation of `disconnectedCallback`
                   * which adds Polymer legacy API's `detached` method.
                   * @return {void}
                   * @override
                   */disconnectedCallback(){super.disconnectedCallback();this.isAttached=!1;this.detached()}/**
       * Legacy callback called during `disconnectedCallback`, for overriding
       * by the user.
       * @override
       * @return {void}
       */detached(){}/**
                   * Provides an override implementation of `attributeChangedCallback`
                   * which adds the Polymer legacy API's `attributeChanged` method.
                   * @param {string} name Name of attribute.
                   * @param {?string} old Old value of attribute.
                   * @param {?string} value Current value of attribute.
                   * @param {?string} namespace Attribute namespace.
                   * @return {void}
                   * @override
                   */attributeChangedCallback(name,old,value,namespace){if(old!==value){super.attributeChangedCallback(name,old,value,namespace);this.attributeChanged(name,old,value)}}/**
       * Legacy callback called during `attributeChangedChallback`, for overriding
       * by the user.
       * @param {string} name Name of attribute.
       * @param {?string} old Old value of attribute.
       * @param {?string} value Current value of attribute.
       * @return {void}
       * @override
       */attributeChanged(name,old,value){}// eslint-disable-line no-unused-vars
/**
     * Overrides the default `Polymer.PropertyEffects` implementation to
     * add support for class initialization via the `_registered` callback.
     * This is called only when the first instance of the element is created.
     *
     * @return {void}
     * @override
     * @suppress {invalidCasts}
     */_initializeProperties(){let proto=Object.getPrototypeOf(this);if(!proto.hasOwnProperty("__hasRegisterFinished")){this._registered();// backstop in case the `_registered` implementation does not set this
proto.__hasRegisterFinished=!0}super._initializeProperties();this.root=/** @type {HTMLElement} */this;this.created();// Ensure listeners are applied immediately so that they are
// added before declarative event listeners. This allows an element to
// decorate itself via an event prior to any declarative listeners
// seeing the event. Note, this ensures compatibility with 1.x ordering.
this._applyListeners()}/**
       * Called automatically when an element is initializing.
       * Users may override this method to perform class registration time
       * work. The implementation should ensure the work is performed
       * only once for the class.
       * @protected
       * @return {void}
       * @override
       */_registered(){}/**
                      * Overrides the default `Polymer.PropertyEffects` implementation to
                      * add support for installing `hostAttributes` and `listeners`.
                      *
                      * @return {void}
                      * @override
                      */ready(){this._ensureAttributes();super.ready()}/**
       * Ensures an element has required attributes. Called when the element
       * is being readied via `ready`. Users should override to set the
       * element's required attributes. The implementation should be sure
       * to check and not override existing attributes added by
       * the user of the element. Typically, setting attributes should be left
       * to the element user and not done here; reasonable exceptions include
       * setting aria roles and focusability.
       * @protected
       * @return {void}
       * @override
       */_ensureAttributes(){}/**
                            * Adds element event listeners. Called when the element
                            * is being readied via `ready`. Users should override to
                            * add any required element event listeners.
                            * In performance critical elements, the work done here should be kept
                            * to a minimum since it is done before the element is rendered. In
                            * these elements, consider adding listeners asynchronously so as not to
                            * block render.
                            * @protected
                            * @return {void}
                            * @override
                            */_applyListeners(){}/**
                          * Converts a typed JavaScript value to a string.
                          *
                          * Note this method is provided as backward-compatible legacy API
                          * only.  It is not directly called by any Polymer features. To customize
                          * how properties are serialized to attributes for attribute bindings and
                          * `reflectToAttribute: true` properties as well as this method, override
                          * the `_serializeValue` method provided by `Polymer.PropertyAccessors`.
                          *
                          * @param {*} value Value to deserialize
                          * @return {string | undefined} Serialized value
                          * @override
                          */serialize(value){return this._serializeValue(value)}/**
       * Converts a string to a typed JavaScript value.
       *
       * Note this method is provided as backward-compatible legacy API
       * only.  It is not directly called by any Polymer features.  To customize
       * how attributes are deserialized to properties for in
       * `attributeChangedCallback`, override `_deserializeValue` method
       * provided by `Polymer.PropertyAccessors`.
       *
       * @param {string} value String to deserialize
       * @param {*} type Type to deserialize the string to
       * @return {*} Returns the deserialized value in the `type` given.
       * @override
       */deserialize(value,type){return this._deserializeValue(value,type)}/**
       * Serializes a property to its associated attribute.
       *
       * Note this method is provided as backward-compatible legacy API
       * only.  It is not directly called by any Polymer features.
       *
       * @param {string} property Property name to reflect.
       * @param {string=} attribute Attribute name to reflect.
       * @param {*=} value Property value to reflect.
       * @return {void}
       * @override
       */reflectPropertyToAttribute(property,attribute,value){this._propertyToAttribute(property,attribute,value)}/**
       * Sets a typed value to an HTML attribute on a node.
       *
       * Note this method is provided as backward-compatible legacy API
       * only.  It is not directly called by any Polymer features.
       *
       * @param {*} value Value to serialize.
       * @param {string} attribute Attribute name to serialize to.
       * @param {Element} node Element to set attribute to.
       * @return {void}
       * @override
       */serializeValueToAttribute(value,attribute,node){this._valueToNodeAttribute(/** @type {Element} */node||this,value,attribute)}/**
       * Copies own properties (including accessor descriptors) from a source
       * object to a target object.
       *
       * @param {Object} prototype Target object to copy properties to.
       * @param {Object} api Source object to copy properties from.
       * @return {Object} prototype object that was passed as first argument.
       * @override
       */extend(prototype,api){if(!(prototype&&api)){return prototype||api}let n$=Object.getOwnPropertyNames(api);for(let i=0,n,pd;i<n$.length&&(n=n$[i]);i++){pd=Object.getOwnPropertyDescriptor(api,n);if(pd){Object.defineProperty(prototype,n,pd)}}return prototype}/**
       * Copies props from a source object to a target object.
       *
       * Note, this method uses a simple `for...in` strategy for enumerating
       * properties.  To ensure only `ownProperties` are copied from source
       * to target and that accessor implementations are copied, use `extend`.
       *
       * @param {!Object} target Target object to copy properties to.
       * @param {!Object} source Source object to copy properties from.
       * @return {!Object} Target object that was passed as first argument.
       * @override
       */mixin(target,source){for(let i in source){target[i]=source[i]}return target}/**
       * Sets the prototype of an object.
       *
       * Note this method is provided as backward-compatible legacy API
       * only.  It is not directly called by any Polymer features.
       * @param {Object} object The object on which to set the prototype.
       * @param {Object} prototype The prototype that will be set on the given
       * `object`.
       * @return {Object} Returns the given `object` with its prototype set
       * to the given `prototype` object.
       * @override
       */chainObject(object,prototype){if(object&&prototype&&object!==prototype){object.__proto__=prototype}return object}/* **** Begin Template **** */ /**
                                      * Calls `importNode` on the `content` of the `template` specified and
                                      * returns a document fragment containing the imported content.
                                      *
                                      * @param {HTMLTemplateElement} template HTML template element to instance.
                                      * @return {!DocumentFragment} Document fragment containing the imported
                                      *   template content.
                                      * @override
                                      * @suppress {missingProperties} go/missingfnprops
                                      */instanceTemplate(template){let content=this.constructor._contentForTemplate(template),dom=/** @type {!DocumentFragment} */document.importNode(content,!0);return dom}/* **** Begin Events **** */ /**
                                    * Dispatches a custom event with an optional detail value.
                                    *
                                    * @param {string} type Name of event type.
                                    * @param {*=} detail Detail value containing event-specific
                                    *   payload.
                                    * @param {{ bubbles: (boolean|undefined), cancelable: (boolean|undefined),
                                    *     composed: (boolean|undefined) }=}
                                    *  options Object specifying options.  These may include:
                                    *  `bubbles` (boolean, defaults to `true`),
                                    *  `cancelable` (boolean, defaults to false), and
                                    *  `node` on which to fire the event (HTMLElement, defaults to `this`).
                                    * @return {!Event} The new event that was fired.
                                    * @override
                                    */fire(type,detail,options){options=options||{};detail=null===detail||detail===void 0?{}:detail;let event=new Event(type,{bubbles:options.bubbles===void 0?!0:options.bubbles,cancelable:!!options.cancelable,composed:options.composed===void 0?!0:options.composed});event.detail=detail;let node=options.node||this;wrap$1(node).dispatchEvent(event);return event}/**
       * Convenience method to add an event listener on a given element,
       * late bound to a named method on this element.
       *
       * @param {?EventTarget} node Element to add event listener to.
       * @param {string} eventName Name of event to listen for.
       * @param {string} methodName Name of handler method on `this` to call.
       * @return {void}
       * @override
       */listen(node,eventName,methodName){node=/** @type {!EventTarget} */node||this;let hbl=this.__boundListeners||(this.__boundListeners=new WeakMap),bl=hbl.get(node);if(!bl){bl={};hbl.set(node,bl)}let key=eventName+methodName;if(!bl[key]){bl[key]=this._addMethodEventListenerToNode(/** @type {!Node} */node,eventName,methodName,this)}}/**
       * Convenience method to remove an event listener from a given element,
       * late bound to a named method on this element.
       *
       * @param {?EventTarget} node Element to remove event listener from.
       * @param {string} eventName Name of event to stop listening to.
       * @param {string} methodName Name of handler method on `this` to not call
       anymore.
       * @return {void}
       * @override
       */unlisten(node,eventName,methodName){node=/** @type {!EventTarget} */node||this;let bl=this.__boundListeners&&this.__boundListeners.get(/** @type {!Element} */node),key=eventName+methodName,handler=bl&&bl[key];if(handler){this._removeEventListenerFromNode(/** @type {!Node} */node,eventName,handler);bl[key]=/** @type {?} */null}}/**
       * Override scrolling behavior to all direction, one direction, or none.
       *
       * Valid scroll directions:
       *   - 'all': scroll in any direction
       *   - 'x': scroll only in the 'x' direction
       *   - 'y': scroll only in the 'y' direction
       *   - 'none': disable scrolling for this node
       *
       * @param {string=} direction Direction to allow scrolling
       * Defaults to `all`.
       * @param {Element=} node Element to apply scroll direction setting.
       * Defaults to `this`.
       * @return {void}
       * @override
       */setScrollDirection(direction,node){setTouchAction(/** @type {!Element} */node||this,DIRECTION_MAP[direction]||"auto")}/* **** End Events **** */ /**
                                  * Convenience method to run `querySelector` on this local DOM scope.
                                  *
                                  * This function calls `Polymer.dom(this.root).querySelector(slctr)`.
                                  *
                                  * @param {string} slctr Selector to run on this local DOM scope
                                  * @return {Element} Element found by the selector, or null if not found.
                                  * @override
                                  */$$(slctr){// Note, no need to `wrap` this because root is always patched
return this.root.querySelector(slctr)}/**
       * Return the element whose local dom within which this element
       * is contained. This is a shorthand for
       * `this.getRootNode().host`.
       * @this {Element}
       * @return {?Node} The element whose local dom within which this element is
       * contained.
       * @override
       */get domHost(){let root=wrap$1(this).getRootNode();return root instanceof DocumentFragment?/** @type {ShadowRoot} */root.host:root}/**
       * Force this element to distribute its children to its local dom.
       * This should not be necessary as of Polymer 2.0.2 and is provided only
       * for backwards compatibility.
       * @return {void}
       * @override
       */distributeContent(){const thisEl=/** @type {Element} */this,domApi=/** @type {PolymerDomApi} */dom(thisEl);if(window.ShadyDOM&&domApi.shadowRoot){ShadyDOM.flush()}}/**
       * Returns a list of nodes that are the effective childNodes. The effective
       * childNodes list is the same as the element's childNodes except that
       * any `<content>` elements are replaced with the list of nodes distributed
       * to the `<content>`, the result of its `getDistributedNodes` method.
       * @return {!Array<!Node>} List of effective child nodes.
       * @suppress {invalidCasts} LegacyElementMixin must be applied to an
       *     HTMLElement
       * @override
       */getEffectiveChildNodes(){const thisEl=/** @type {Element} */this,domApi=/** @type {PolymerDomApi} */dom(thisEl);return domApi.getEffectiveChildNodes()}/**
       * Returns a list of nodes distributed within this element that match
       * `selector`. These can be dom children or elements distributed to
       * children that are insertion points.
       * @param {string} selector Selector to run.
       * @return {!Array<!Node>} List of distributed elements that match selector.
       * @suppress {invalidCasts} LegacyElementMixin must be applied to an
       * HTMLElement
       * @override
       */queryDistributedElements(selector){const thisEl=/** @type {Element} */this,domApi=/** @type {PolymerDomApi} */dom(thisEl);return domApi.queryDistributedElements(selector)}/**
       * Returns a list of elements that are the effective children. The effective
       * children list is the same as the element's children except that
       * any `<content>` elements are replaced with the list of elements
       * distributed to the `<content>`.
       *
       * @return {!Array<!Node>} List of effective children.
       * @override
       */getEffectiveChildren(){let list=this.getEffectiveChildNodes();return list.filter(function(/** @type {!Node} */n){return n.nodeType===Node.ELEMENT_NODE})}/**
       * Returns a string of text content that is the concatenation of the
       * text content's of the element's effective childNodes (the elements
       * returned by <a href="#getEffectiveChildNodes>getEffectiveChildNodes</a>.
       *
       * @return {string} List of effective children.
       * @override
       */getEffectiveTextContent(){let cn=this.getEffectiveChildNodes(),tc=[];for(let i=0,c;c=cn[i];i++){if(c.nodeType!==Node.COMMENT_NODE){tc.push(c.textContent)}}return tc.join("")}/**
       * Returns the first effective childNode within this element that
       * match `selector`. These can be dom child nodes or elements distributed
       * to children that are insertion points.
       * @param {string} selector Selector to run.
       * @return {Node} First effective child node that matches selector.
       * @override
       */queryEffectiveChildren(selector){let e$=this.queryDistributedElements(selector);return e$&&e$[0]}/**
       * Returns a list of effective childNodes within this element that
       * match `selector`. These can be dom child nodes or elements distributed
       * to children that are insertion points.
       * @param {string} selector Selector to run.
       * @return {!Array<!Node>} List of effective child nodes that match
       *     selector.
       * @override
       */queryAllEffectiveChildren(selector){return this.queryDistributedElements(selector)}/**
       * Returns a list of nodes distributed to this element's `<slot>`.
       *
       * If this element contains more than one `<slot>` in its local DOM,
       * an optional selector may be passed to choose the desired content.
       *
       * @param {string=} slctr CSS selector to choose the desired
       *   `<slot>`.  Defaults to `content`.
       * @return {!Array<!Node>} List of distributed nodes for the `<slot>`.
       * @override
       */getContentChildNodes(slctr){// Note, no need to `wrap` this because root is always
let content=this.root.querySelector(slctr||"slot");return content?/** @type {PolymerDomApi} */dom(content).getDistributedNodes():[]}/**
       * Returns a list of element children distributed to this element's
       * `<slot>`.
       *
       * If this element contains more than one `<slot>` in its
       * local DOM, an optional selector may be passed to choose the desired
       * content.  This method differs from `getContentChildNodes` in that only
       * elements are returned.
       *
       * @param {string=} slctr CSS selector to choose the desired
       *   `<content>`.  Defaults to `content`.
       * @return {!Array<!HTMLElement>} List of distributed nodes for the
       *   `<slot>`.
       * @suppress {invalidCasts}
       * @override
       */getContentChildren(slctr){let children=/** @type {!Array<!HTMLElement>} */this.getContentChildNodes(slctr).filter(function(n){return n.nodeType===Node.ELEMENT_NODE});return children}/**
       * Checks whether an element is in this element's light DOM tree.
       *
       * @param {?Node} node The element to be checked.
       * @return {boolean} true if node is in this element's light DOM tree.
       * @suppress {invalidCasts} LegacyElementMixin must be applied to an
       * HTMLElement
       * @override
       */isLightDescendant(node){const thisNode=/** @type {Node} */this;return thisNode!==node&&wrap$1(thisNode).contains(node)&&wrap$1(thisNode).getRootNode()===wrap$1(node).getRootNode()}/**
       * Checks whether an element is in this element's local DOM tree.
       *
       * @param {!Element} node The element to be checked.
       * @return {boolean} true if node is in this element's local DOM tree.
       * @override
       */isLocalDescendant(node){return this.root===wrap$1(node).getRootNode()}/**
       * No-op for backwards compatibility. This should now be handled by
       * ShadyCss library.
       * @param  {!Element} container Container element to scope
       * @param  {boolean=} shouldObserve if true, start a mutation observer for added nodes to the container
       * @return {?MutationObserver} Returns a new MutationObserver on `container` if `shouldObserve` is true.
       * @override
       */scopeSubtree(container,shouldObserve=!1){return scopeSubtree(container,shouldObserve)}/**
       * Returns the computed style value for the given property.
       * @param {string} property The css property name.
       * @return {string} Returns the computed css property value for the given
       * `property`.
       * @suppress {invalidCasts} LegacyElementMixin must be applied to an
       *     HTMLElement
       * @override
       */getComputedStyleValue(property){return styleInterface.getComputedStyleValue(/** @type {!Element} */this,property)}// debounce
/**
     * Call `debounce` to collapse multiple requests for a named task into
     * one invocation which is made after the wait time has elapsed with
     * no new request.  If no wait time is given, the callback will be called
     * at microtask timing (guaranteed before paint).
     *
     *     debouncedClickAction(e) {
     *       // will not call `processClick` more than once per 100ms
     *       this.debounce('click', function() {
     *        this.processClick();
     *       } 100);
     *     }
     *
     * @param {string} jobName String to identify the debounce job.
     * @param {function():void} callback Function that is called (with `this`
     *   context) when the wait time elapses.
     * @param {number=} wait Optional wait time in milliseconds (ms) after the
     *   last signal that must elapse before invoking `callback`
     * @return {!Object} Returns a debouncer object on which exists the
     * following methods: `isActive()` returns true if the debouncer is
     * active; `cancel()` cancels the debouncer if it is active;
     * `flush()` immediately invokes the debounced callback if the debouncer
     * is active.
     * @override
     */debounce(jobName,callback,wait){this._debouncers=this._debouncers||{};return this._debouncers[jobName]=Debouncer.debounce(this._debouncers[jobName],0<wait?timeOut.after(wait):microTask,callback.bind(this))}/**
       * Returns whether a named debouncer is active.
       *
       * @param {string} jobName The name of the debouncer started with `debounce`
       * @return {boolean} Whether the debouncer is active (has not yet fired).
       * @override
       */isDebouncerActive(jobName){this._debouncers=this._debouncers||{};let debouncer=this._debouncers[jobName];return!!(debouncer&&debouncer.isActive())}/**
       * Immediately calls the debouncer `callback` and inactivates it.
       *
       * @param {string} jobName The name of the debouncer started with `debounce`
       * @return {void}
       * @override
       */flushDebouncer(jobName){this._debouncers=this._debouncers||{};let debouncer=this._debouncers[jobName];if(debouncer){debouncer.flush()}}/**
       * Cancels an active debouncer.  The `callback` will not be called.
       *
       * @param {string} jobName The name of the debouncer started with `debounce`
       * @return {void}
       * @override
       */cancelDebouncer(jobName){this._debouncers=this._debouncers||{};let debouncer=this._debouncers[jobName];if(debouncer){debouncer.cancel()}}/**
       * Runs a callback function asynchronously.
       *
       * By default (if no waitTime is specified), async callbacks are run at
       * microtask timing, which will occur before paint.
       *
       * @param {!Function} callback The callback function to run, bound to
       *     `this`.
       * @param {number=} waitTime Time to wait before calling the
       *   `callback`.  If unspecified or 0, the callback will be run at microtask
       *   timing (before paint).
       * @return {number} Handle that may be used to cancel the async job.
       * @override
       */async(callback,waitTime){return 0<waitTime?timeOut.run(callback.bind(this),waitTime):~microTask.run(callback.bind(this))}/**
       * Cancels an async operation started with `async`.
       *
       * @param {number} handle Handle returned from original `async` call to
       *   cancel.
       * @return {void}
       * @override
       */cancelAsync(handle){0>handle?microTask.cancel(~handle):timeOut.cancel(handle)}// other
/**
     * Convenience method for creating an element and configuring it.
     *
     * @param {string} tag HTML element tag to create.
     * @param {Object=} props Object of properties to configure on the
     *    instance.
     * @return {!Element} Newly created and configured element.
     * @override
     */create(tag,props){let elt=document.createElement(tag);if(props){if(elt.setProperties){elt.setProperties(props)}else{for(let n in props){elt[n]=props[n]}}}return elt}/**
       * Polyfill for Element.prototype.matches, which is sometimes still
       * prefixed.
       *
       * @param {string} selector Selector to test.
       * @param {!Element=} node Element to test the selector against.
       * @return {boolean} Whether the element matches the selector.
       * @override
       */elementMatches(selector,node){return matchesSelector(node||this,selector)}/**
       * Toggles an HTML attribute on or off.
       *
       * @param {string} name HTML attribute name
       * @param {boolean=} bool Boolean to force the attribute on or off.
       *    When unspecified, the state of the attribute will be reversed.
       * @return {boolean} true if the attribute now exists
       * @override
       */toggleAttribute(name,bool){let node=/** @type {Element} */this;if(3===arguments.length){node=/** @type {Element} */arguments[2]}if(1==arguments.length){bool=!node.hasAttribute(name)}if(bool){wrap$1(node).setAttribute(name,"");return!0}else{wrap$1(node).removeAttribute(name);return!1}}/**
       * Toggles a CSS class on or off.
       *
       * @param {string} name CSS class name
       * @param {boolean=} bool Boolean to force the class on or off.
       *    When unspecified, the state of the class will be reversed.
       * @param {Element=} node Node to target.  Defaults to `this`.
       * @return {void}
       * @override
       */toggleClass(name,bool,node){node=/** @type {Element} */node||this;if(1==arguments.length){bool=!node.classList.contains(name)}if(bool){node.classList.add(name)}else{node.classList.remove(name)}}/**
       * Cross-platform helper for setting an element's CSS `transform` property.
       *
       * @param {string} transformText Transform setting.
       * @param {Element=} node Element to apply the transform to.
       * Defaults to `this`
       * @return {void}
       * @override
       */transform(transformText,node){node=/** @type {Element} */node||this;node.style.webkitTransform=transformText;node.style.transform=transformText}/**
       * Cross-platform helper for setting an element's CSS `translate3d`
       * property.
       *
       * @param {number|string} x X offset.
       * @param {number|string} y Y offset.
       * @param {number|string} z Z offset.
       * @param {Element=} node Element to apply the transform to.
       * Defaults to `this`.
       * @return {void}
       * @override
       */translate3d(x,y,z,node){node=/** @type {Element} */node||this;this.transform("translate3d("+x+","+y+","+z+")",node)}/**
       * Removes an item from an array, if it exists.
       *
       * If the array is specified by path, a change notification is
       * generated, so that observers, data bindings and computed
       * properties watching that path can update.
       *
       * If the array is passed directly, **no change
       * notification is generated**.
       *
       * @param {string | !Array<number|string>} arrayOrPath Path to array from
       *     which to remove the item
       *   (or the array itself).
       * @param {*} item Item to remove.
       * @return {Array} Array containing item removed.
       * @override
       */arrayDelete(arrayOrPath,item){let index;if(Array.isArray(arrayOrPath)){index=arrayOrPath.indexOf(item);if(0<=index){return arrayOrPath.splice(index,1)}}else{let arr=get(this,arrayOrPath);index=arr.indexOf(item);if(0<=index){return this.splice(arrayOrPath,index,1)}}return null}// logging
/**
     * Facades `console.log`/`warn`/`error` as override point.
     *
     * @param {string} level One of 'log', 'warn', 'error'
     * @param {Array} args Array of strings or objects to log
     * @return {void}
     * @override
     */_logger(level,args){// accept ['foo', 'bar'] and [['foo', 'bar']]
if(Array.isArray(args)&&1===args.length&&Array.isArray(args[0])){args=args[0]}switch(level){case"log":case"warn":case"error":console[level](...args);}}/**
       * Facades `console.log` as an override point.
       *
       * @param {...*} args Array of strings or objects to log
       * @return {void}
       * @override
       */_log(...args){this._logger("log",args)}/**
       * Facades `console.warn` as an override point.
       *
       * @param {...*} args Array of strings or objects to log
       * @return {void}
       * @override
       */_warn(...args){this._logger("warn",args)}/**
       * Facades `console.error` as an override point.
       *
       * @param {...*} args Array of strings or objects to log
       * @return {void}
       * @override
       */_error(...args){this._logger("error",args)}/**
       * Formats a message using the element type an a method name.
       *
       * @param {string} methodName Method name to associate with message
       * @param {...*} args Array of strings or objects to log
       * @return {Array} Array with formatting information for `console`
       *   logging.
       * @override
       */_logf(methodName,...args){return["[%s::%s]",this.is,methodName,...args]}}LegacyElement.prototype.is="";return LegacyElement});_exports.LegacyElementMixin=LegacyElementMixin;var legacyElementMixin={LegacyElementMixin:LegacyElementMixin};_exports.$legacyElementMixin=legacyElementMixin;const lifecycleProps={attached:!0,detached:!0,ready:!0,created:!0,beforeRegister:!0,registered:!0,attributeChanged:!0,listeners:!0,hostAttributes:!0},excludeOnInfo={attached:!0,detached:!0,ready:!0,created:!0,beforeRegister:!0,registered:!0,attributeChanged:!0,behaviors:!0,_noAccessors:!0},excludeOnBehaviors=Object.assign({listeners:!0,hostAttributes:!0,properties:!0,observers:!0},excludeOnInfo);function copyProperties(source,target,excludeProps){const noAccessors=source._noAccessors,propertyNames=Object.getOwnPropertyNames(source);for(let i=0,p;i<propertyNames.length;i++){p=propertyNames[i];if(p in excludeProps){continue}if(noAccessors){target[p]=source[p]}else{let pd=Object.getOwnPropertyDescriptor(source,p);if(pd){// ensure property is configurable so that a later behavior can
// re-configure it.
pd.configurable=!0;Object.defineProperty(target,p,pd)}}}}/**
   * Applies a "legacy" behavior or array of behaviors to the provided class.
   *
   * Note: this method will automatically also apply the `LegacyElementMixin`
   * to ensure that any legacy behaviors can rely on legacy Polymer API on
   * the underlying element.
   *
   * @function
   * @template T
   * @param {!Object|!Array<!Object>} behaviors Behavior object or array of behaviors.
   * @param {function(new:T)} klass Element class.
   * @return {?} Returns a new Element class extended by the
   * passed in `behaviors` and also by `LegacyElementMixin`.
   * @suppress {invalidCasts, checkTypes}
   */function mixinBehaviors(behaviors,klass){return GenerateClassFromInfo({},LegacyElementMixin(klass),behaviors)}// NOTE:
// 1.x
// Behaviors were mixed in *in reverse order* and de-duped on the fly.
// The rule was that behavior properties were copied onto the element
// prototype if and only if the property did not already exist.
// Given: Polymer{ behaviors: [A, B, C, A, B]}, property copy order was:
// (1), B, (2), A, (3) C. This means prototype properties win over
// B properties win over A win over C. This mirrors what would happen
// with inheritance if element extended B extended A extended C.
//
// Again given, Polymer{ behaviors: [A, B, C, A, B]}, the resulting
// `behaviors` array was [C, A, B].
// Behavior lifecycle methods were called in behavior array order
// followed by the element, e.g. (1) C.created, (2) A.created,
// (3) B.created, (4) element.created. There was no support for
// super, and "super-behavior" methods were callable only by name).
//
// 2.x
// Behaviors are made into proper mixins which live in the
// element's prototype chain. Behaviors are placed in the element prototype
// eldest to youngest and de-duped youngest to oldest:
// So, first [A, B, C, A, B] becomes [C, A, B] then,
// the element prototype becomes (oldest) (1) PolymerElement, (2) class(C),
// (3) class(A), (4) class(B), (5) class(Polymer({...})).
// Result:
// This means element properties win over B properties win over A win
// over C. (same as 1.x)
// If lifecycle is called (super then me), order is
// (1) C.created, (2) A.created, (3) B.created, (4) element.created
// (again same as 1.x)
function applyBehaviors(proto,behaviors,lifecycle){for(let i=0;i<behaviors.length;i++){applyInfo(proto,behaviors[i],lifecycle,excludeOnBehaviors)}}function applyInfo(proto,info,lifecycle,excludeProps){copyProperties(info,proto,excludeProps);for(let p in lifecycleProps){if(info[p]){lifecycle[p]=lifecycle[p]||[];lifecycle[p].push(info[p])}}}/**
   * @param {Array} behaviors List of behaviors to flatten.
   * @param {Array=} list Target list to flatten behaviors into.
   * @param {Array=} exclude List of behaviors to exclude from the list.
   * @return {!Array} Returns the list of flattened behaviors.
   */function flattenBehaviors(behaviors,list,exclude){list=list||[];for(let i=behaviors.length-1,b;0<=i;i--){b=behaviors[i];if(b){if(Array.isArray(b)){flattenBehaviors(b,list)}else{// dedup
if(0>list.indexOf(b)&&(!exclude||0>exclude.indexOf(b))){list.unshift(b)}}}else{console.warn("behavior is null, check for missing or 404 import")}}return list}/**
   * Copies property descriptors from source to target, overwriting all fields
   * of any previous descriptor for a property *except* for `value`, which is
   * merged in from the target if it does not exist on the source.
   *
   * @param {*} target Target properties object
   * @param {*} source Source properties object
   */function mergeProperties(target,source){for(const p in source){const targetInfo=target[p],sourceInfo=source[p];if(!("value"in sourceInfo)&&targetInfo&&"value"in targetInfo){target[p]=Object.assign({value:targetInfo.value},sourceInfo)}else{target[p]=sourceInfo}}}/* Note about construction and extension of legacy classes.
    [Changed in Q4 2018 to optimize performance.]
  
    When calling `Polymer` or `mixinBehaviors`, the generated class below is
    made. The list of behaviors was previously made into one generated class per
    behavior, but this is no longer the case as behaviors are now called
    manually. Note, there may *still* be multiple generated classes in the
    element's prototype chain if extension is used with `mixinBehaviors`.
  
    The generated class is directly tied to the info object and behaviors
    used to create it. That list of behaviors is filtered so it's only the
    behaviors not active on the superclass. In order to call through to the
    entire list of lifecycle methods, it's important to call `super`.
  
    The element's `properties` and `observers` are controlled via the finalization
    mechanism provided by `PropertiesMixin`. `Properties` and `observers` are
    collected by manually traversing the prototype chain and merging.
  
    To limit changes, the `_registered` method is called via `_initializeProperties`
    and not `_finalizeClass`.
  
  */ /**
      * @param {!PolymerInit} info Polymer info object
      * @param {function(new:HTMLElement)} Base base class to extend with info object
      * @param {Object=} behaviors behaviors to copy into the element
      * @return {function(new:HTMLElement)} Generated class
      * @suppress {checkTypes}
      * @private
      */function GenerateClassFromInfo(info,Base,behaviors){// manages behavior and lifecycle processing (filled in after class definition)
let behaviorList;const lifecycle={};/** @private */class PolymerGenerated extends Base{// explicitly not calling super._finalizeClass
/** @nocollapse */static _finalizeClass(){// if calling via a subclass that hasn't been generated, pass through to super
if(!this.hasOwnProperty(JSCompiler_renameProperty("generatedFrom",this))){// TODO(https://github.com/google/closure-compiler/issues/3240):
//     Change back to just super.methodCall()
Base._finalizeClass.call(this)}else{// interleave properties and observers per behavior and `info`
if(behaviorList){for(let i=0,b;i<behaviorList.length;i++){b=behaviorList[i];if(b.properties){this.createProperties(b.properties)}if(b.observers){this.createObservers(b.observers,b.properties)}}}if(info.properties){this.createProperties(info.properties)}if(info.observers){this.createObservers(info.observers,info.properties)}// make sure to prepare the element template
this._prepareTemplate()}}/** @nocollapse */static get properties(){const properties={};if(behaviorList){for(let i=0;i<behaviorList.length;i++){mergeProperties(properties,behaviorList[i].properties)}}mergeProperties(properties,info.properties);return properties}/** @nocollapse */static get observers(){let observers=[];if(behaviorList){for(let i=0,b;i<behaviorList.length;i++){b=behaviorList[i];if(b.observers){observers=observers.concat(b.observers)}}}if(info.observers){observers=observers.concat(info.observers)}return observers}/**
       * @return {void}
       */created(){super.created();const list=lifecycle.created;if(list){for(let i=0;i<list.length;i++){list[i].call(this)}}}/**
       * @return {void}
       */_registered(){/* NOTE: `beforeRegister` is called here for bc, but the behavior
        is different than in 1.x. In 1.0, the method was called *after*
        mixing prototypes together but *before* processing of meta-objects.
        However, dynamic effects can still be set here and can be done either
        in `beforeRegister` or `registered`. It is no longer possible to set
        `is` in `beforeRegister` as you could in 1.x.
      */ // only proceed if the generated class' prototype has not been registered.
const generatedProto=PolymerGenerated.prototype;if(!generatedProto.hasOwnProperty("__hasRegisterFinished")){generatedProto.__hasRegisterFinished=!0;// ensure superclass is registered first.
super._registered();// copy properties onto the generated class lazily if we're optimizing,
if(legacyOptimizations){copyPropertiesToProto(generatedProto)}// make sure legacy lifecycle is called on the *element*'s prototype
// and not the generated class prototype; if the element has been
// extended, these are *not* the same.
const proto=Object.getPrototypeOf(this);let list=lifecycle.beforeRegister;if(list){for(let i=0;i<list.length;i++){list[i].call(proto)}}list=lifecycle.registered;if(list){for(let i=0;i<list.length;i++){list[i].call(proto)}}}}/**
       * @return {void}
       */_applyListeners(){super._applyListeners();const list=lifecycle.listeners;if(list){for(let i=0;i<list.length;i++){const listeners=list[i];if(listeners){for(let l in listeners){this._addMethodEventListenerToNode(this,l,listeners[l])}}}}}// note: exception to "super then me" rule;
// do work before calling super so that super attributes
// only apply if not already set.
/**
     * @return {void}
     */_ensureAttributes(){const list=lifecycle.hostAttributes;if(list){for(let i=list.length-1;0<=i;i--){const hostAttributes=list[i];for(let a in hostAttributes){this._ensureAttribute(a,hostAttributes[a])}}}super._ensureAttributes()}/**
       * @return {void}
       */ready(){super.ready();let list=lifecycle.ready;if(list){for(let i=0;i<list.length;i++){list[i].call(this)}}}/**
       * @return {void}
       */attached(){super.attached();let list=lifecycle.attached;if(list){for(let i=0;i<list.length;i++){list[i].call(this)}}}/**
       * @return {void}
       */detached(){super.detached();let list=lifecycle.detached;if(list){for(let i=0;i<list.length;i++){list[i].call(this)}}}/**
       * Implements native Custom Elements `attributeChangedCallback` to
       * set an attribute value to a property via `_attributeToProperty`.
       *
       * @param {string} name Name of attribute that changed
       * @param {?string} old Old attribute value
       * @param {?string} value New attribute value
       * @return {void}
       */attributeChanged(name,old,value){super.attributeChanged();let list=lifecycle.attributeChanged;if(list){for(let i=0;i<list.length;i++){list[i].call(this,name,old,value)}}}}// apply behaviors, note actual copying is done lazily at first instance creation
if(behaviors){// NOTE: ensure the behavior is extending a class with
// legacy element api. This is necessary since behaviors expect to be able
// to access 1.x legacy api.
if(!Array.isArray(behaviors)){behaviors=[behaviors]}let superBehaviors=Base.prototype.behaviors;// get flattened, deduped list of behaviors *not* already on super class
behaviorList=flattenBehaviors(behaviors,null,superBehaviors);PolymerGenerated.prototype.behaviors=superBehaviors?superBehaviors.concat(behaviors):behaviorList}const copyPropertiesToProto=proto=>{if(behaviorList){applyBehaviors(proto,behaviorList,lifecycle)}applyInfo(proto,info,lifecycle,excludeOnInfo)};// copy properties if we're not optimizing
if(!legacyOptimizations){copyPropertiesToProto(PolymerGenerated.prototype)}PolymerGenerated.generatedFrom=info;return PolymerGenerated}/**
   * Generates a class that extends `LegacyElement` based on the
   * provided info object.  Metadata objects on the `info` object
   * (`properties`, `observers`, `listeners`, `behaviors`, `is`) are used
   * for Polymer's meta-programming systems, and any functions are copied
   * to the generated class.
   *
   * Valid "metadata" values are as follows:
   *
   * `is`: String providing the tag name to register the element under. In
   * addition, if a `dom-module` with the same id exists, the first template
   * in that `dom-module` will be stamped into the shadow root of this element,
   * with support for declarative event listeners (`on-...`), Polymer data
   * bindings (`[[...]]` and `{{...}}`), and id-based node finding into
   * `this.$`.
   *
   * `properties`: Object describing property-related metadata used by Polymer
   * features (key: property names, value: object containing property metadata).
   * Valid keys in per-property metadata include:
   * - `type` (String|Number|Object|Array|...): Used by
   *   `attributeChangedCallback` to determine how string-based attributes
   *   are deserialized to JavaScript property values.
   * - `notify` (boolean): Causes a change in the property to fire a
   *   non-bubbling event called `<property>-changed`. Elements that have
   *   enabled two-way binding to the property use this event to observe changes.
   * - `readOnly` (boolean): Creates a getter for the property, but no setter.
   *   To set a read-only property, use the private setter method
   *   `_setProperty(property, value)`.
   * - `observer` (string): Observer method name that will be called when
   *   the property changes. The arguments of the method are
   *   `(value, previousValue)`.
   * - `computed` (string): String describing method and dependent properties
   *   for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).
   *   Computed properties are read-only by default and can only be changed
   *   via the return value of the computing method.
   *
   * `observers`: Array of strings describing multi-property observer methods
   *  and their dependent properties (e.g. `'observeABC(a, b, c)'`).
   *
   * `listeners`: Object describing event listeners to be added to each
   *  instance of this element (key: event name, value: method name).
   *
   * `behaviors`: Array of additional `info` objects containing metadata
   * and callbacks in the same format as the `info` object here which are
   * merged into this element.
   *
   * `hostAttributes`: Object listing attributes to be applied to the host
   *  once created (key: attribute name, value: attribute value).  Values
   *  are serialized based on the type of the value.  Host attributes should
   *  generally be limited to attributes such as `tabIndex` and `aria-...`.
   *  Attributes in `hostAttributes` are only applied if a user-supplied
   *  attribute is not already present (attributes in markup override
   *  `hostAttributes`).
   *
   * In addition, the following Polymer-specific callbacks may be provided:
   * - `registered`: called after first instance of this element,
   * - `created`: called during `constructor`
   * - `attached`: called during `connectedCallback`
   * - `detached`: called during `disconnectedCallback`
   * - `ready`: called before first `attached`, after all properties of
   *   this element have been propagated to its template and all observers
   *   have run
   *
   * @param {!PolymerInit} info Object containing Polymer metadata and functions
   *   to become class methods.
   * @template T
   * @param {function(T):T} mixin Optional mixin to apply to legacy base class
   *   before extending with Polymer metaprogramming.
   * @return {function(new:HTMLElement)} Generated class
   */const Class=function(info,mixin){if(!info){console.warn("Polymer.Class requires `info` argument")}let klass=mixin?mixin(LegacyElementMixin(HTMLElement)):LegacyElementMixin(HTMLElement);klass=GenerateClassFromInfo(info,klass,info.behaviors);// decorate klass with registration info
klass.is=klass.prototype.is=info.is;return klass};_exports.Class=Class;var _class={mixinBehaviors:mixinBehaviors,Class:Class};_exports.$class=_class;const Polymer=function(info){// if input is a `class` (aka a function with a prototype), use the prototype
// remember that the `constructor` will never be called
let klass;if("function"===typeof info){klass=info}else{klass=Polymer.Class(info)}customElements.define(klass.is,/** @type {!HTMLElement} */klass);return klass};_exports.Polymer$1=_exports.Polymer=Polymer;Polymer.Class=Class;var polymerFn={Polymer:Polymer};_exports.$polymerFn=polymerFn;function mutablePropertyChange(inst,property,value,old,mutableData){let isObject;if(mutableData){isObject="object"===typeof value&&null!==value;// Pull `old` for Objects from temp cache, but treat `null` as a primitive
if(isObject){old=inst.__dataTemp[property]}}// Strict equality check, but return false for NaN===NaN
let shouldChange=old!==value&&(old===old||value===value);// Objects are stored in temporary cache (cleared at end of
// turn), which is used for dirty-checking
if(isObject&&shouldChange){inst.__dataTemp[property]=value}return shouldChange}/**
   * Element class mixin to skip strict dirty-checking for objects and arrays
   * (always consider them to be "dirty"), for use on elements utilizing
   * `PropertyEffects`
   *
   * By default, `PropertyEffects` performs strict dirty checking on
   * objects, which means that any deep modifications to an object or array will
   * not be propagated unless "immutable" data patterns are used (i.e. all object
   * references from the root to the mutation were changed).
   *
   * Polymer also provides a proprietary data mutation and path notification API
   * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient
   * mutation and notification of deep changes in an object graph to all elements
   * bound to the same object graph.
   *
   * In cases where neither immutable patterns nor the data mutation API can be
   * used, applying this mixin will cause Polymer to skip dirty checking for
   * objects and arrays (always consider them to be "dirty").  This allows a
   * user to make a deep modification to a bound object graph, and then either
   * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`
   * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all
   * elements that wish to be updated based on deep mutations must apply this
   * mixin or otherwise skip strict dirty checking for objects/arrays.
   * Specifically, any elements in the binding tree between the source of a
   * mutation and the consumption of it must apply this mixin or enable the
   * `OptionalMutableData` mixin.
   *
   * In order to make the dirty check strategy configurable, see
   * `OptionalMutableData`.
   *
   * Note, the performance characteristics of propagating large object graphs
   * will be worse as opposed to using strict dirty checking with immutable
   * patterns or Polymer's path notification API.
   *
   * @mixinFunction
   * @polymer
   * @summary Element class mixin to skip strict dirty-checking for objects
   *   and arrays
   * @template T
   * @param {function(new:T)} superClass Class to apply mixin to.
   * @return {function(new:T)} superClass with mixin applied.
   */const MutableData=dedupingMixin(superClass=>{/**
   * @polymer
   * @mixinClass
   * @implements {Polymer_MutableData}
   */class MutableData extends superClass{/**
     * Overrides `PropertyEffects` to provide option for skipping
     * strict equality checking for Objects and Arrays.
     *
     * This method pulls the value to dirty check against from the `__dataTemp`
     * cache (rather than the normal `__data` cache) for Objects.  Since the temp
     * cache is cleared at the end of a turn, this implementation allows
     * side-effects of deep object changes to be processed by re-setting the
     * same object (using the temp cache as an in-turn backstop to prevent
     * cycles due to 2-way notification).
     *
     * @param {string} property Property name
     * @param {*} value New property value
     * @param {*} old Previous property value
     * @return {boolean} Whether the property should be considered a change
     * @protected
     */_shouldPropertyChange(property,value,old){return mutablePropertyChange(this,property,value,old,!0)}}return MutableData});/**
     * Element class mixin to add the optional ability to skip strict
     * dirty-checking for objects and arrays (always consider them to be
     * "dirty") by setting a `mutable-data` attribute on an element instance.
     *
     * By default, `PropertyEffects` performs strict dirty checking on
     * objects, which means that any deep modifications to an object or array will
     * not be propagated unless "immutable" data patterns are used (i.e. all object
     * references from the root to the mutation were changed).
     *
     * Polymer also provides a proprietary data mutation and path notification API
     * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient
     * mutation and notification of deep changes in an object graph to all elements
     * bound to the same object graph.
     *
     * In cases where neither immutable patterns nor the data mutation API can be
     * used, applying this mixin will allow Polymer to skip dirty checking for
     * objects and arrays (always consider them to be "dirty").  This allows a
     * user to make a deep modification to a bound object graph, and then either
     * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`
     * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all
     * elements that wish to be updated based on deep mutations must apply this
     * mixin or otherwise skip strict dirty checking for objects/arrays.
     * Specifically, any elements in the binding tree between the source of a
     * mutation and the consumption of it must enable this mixin or apply the
     * `MutableData` mixin.
     *
     * While this mixin adds the ability to forgo Object/Array dirty checking,
     * the `mutableData` flag defaults to false and must be set on the instance.
     *
     * Note, the performance characteristics of propagating large object graphs
     * will be worse by relying on `mutableData: true` as opposed to using
     * strict dirty checking with immutable patterns or Polymer's path notification
     * API.
     *
     * @mixinFunction
     * @polymer
     * @summary Element class mixin to optionally skip strict dirty-checking
     *   for objects and arrays
     */_exports.MutableData=MutableData;const OptionalMutableData=dedupingMixin(superClass=>{/**
   * @mixinClass
   * @polymer
   * @implements {Polymer_OptionalMutableData}
   */class OptionalMutableData extends superClass{/** @nocollapse */static get properties(){return{/**
         * Instance-level flag for configuring the dirty-checking strategy
         * for this element.  When true, Objects and Arrays will skip dirty
         * checking, otherwise strict equality checking will be used.
         */mutableData:Boolean}}/**
       * Overrides `PropertyEffects` to provide option for skipping
       * strict equality checking for Objects and Arrays.
       *
       * When `this.mutableData` is true on this instance, this method
       * pulls the value to dirty check against from the `__dataTemp` cache
       * (rather than the normal `__data` cache) for Objects.  Since the temp
       * cache is cleared at the end of a turn, this implementation allows
       * side-effects of deep object changes to be processed by re-setting the
       * same object (using the temp cache as an in-turn backstop to prevent
       * cycles due to 2-way notification).
       *
       * @param {string} property Property name
       * @param {*} value New property value
       * @param {*} old Previous property value
       * @return {boolean} Whether the property should be considered a change
       * @protected
       */_shouldPropertyChange(property,value,old){return mutablePropertyChange(this,property,value,old,this.mutableData)}}return OptionalMutableData});// Export for use by legacy behavior
_exports.OptionalMutableData=OptionalMutableData;MutableData._mutablePropertyChange=mutablePropertyChange;var mutableData={MutableData:MutableData,OptionalMutableData:OptionalMutableData};// machinery for propagating host properties to children. This is an ES5
// class only because Babel (incorrectly) requires super() in the class
// constructor even though no `this` is used and it returns an instance.
_exports.$mutableData=mutableData;let newInstance=null;/**
                         * @constructor
                         * @extends {HTMLTemplateElement}
                         * @private
                         */function HTMLTemplateElementExtension(){return newInstance}HTMLTemplateElementExtension.prototype=Object.create(HTMLTemplateElement.prototype,{constructor:{value:HTMLTemplateElementExtension,writable:!0}});/**
     * @constructor
     * @implements {Polymer_PropertyEffects}
     * @extends {HTMLTemplateElementExtension}
     * @private
     */const DataTemplate=PropertyEffects(HTMLTemplateElementExtension),MutableDataTemplate=MutableData(DataTemplate);/**
                                                                     * @constructor
                                                                     * @implements {Polymer_MutableData}
                                                                     * @extends {DataTemplate}
                                                                     * @private
                                                                     */ // Applies a DataTemplate subclass to a <template> instance
function upgradeTemplate(template,constructor){newInstance=template;Object.setPrototypeOf(template,constructor.prototype);new constructor;newInstance=null}/**
   * Base class for TemplateInstance.
   * @constructor
   * @extends {HTMLElement}
   * @implements {Polymer_PropertyEffects}
   * @private
   */const templateInstanceBase=PropertyEffects(// This cast shouldn't be neccessary, but Closure doesn't understand that
// "class {}" is a constructor function.
/** @type {function(new:Object)} */class{});/**
                                               * @polymer
                                               * @customElement
                                               * @appliesMixin PropertyEffects
                                               * @unrestricted
                                               */class TemplateInstanceBase extends templateInstanceBase{constructor(props){super();this._configureProperties(props);/** @type {!StampedTemplate} */this.root=this._stampTemplate(this.__dataHost);// Save list of stamped children
let children=[];/** @suppress {invalidCasts} */this.children=/** @type {!NodeList} */children;// Polymer 1.x did not use `Polymer.dom` here so not bothering.
for(let n=this.root.firstChild;n;n=n.nextSibling){children.push(n);n.__templatizeInstance=this}if(this.__templatizeOwner&&this.__templatizeOwner.__hideTemplateChildren__){this._showHideChildren(!0)}// Flush props only when props are passed if instance props exist
// or when there isn't instance props.
let options=this.__templatizeOptions;if(props&&options.instanceProps||!options.instanceProps){this._enableProperties()}}/**
     * Configure the given `props` by calling `_setPendingProperty`. Also
     * sets any properties stored in `__hostProps`.
     * @private
     * @param {Object} props Object of property name-value pairs to set.
     * @return {void}
     */_configureProperties(props){let options=this.__templatizeOptions;if(options.forwardHostProp){for(let hprop in this.__hostProps){this._setPendingProperty(hprop,this.__dataHost["_host_"+hprop])}}// Any instance props passed in the constructor will overwrite host props;
// normally this would be a user error but we don't specifically filter them
for(let iprop in props){this._setPendingProperty(iprop,props[iprop])}}/**
     * Forwards a host property to this instance.  This method should be
     * called on instances from the `options.forwardHostProp` callback
     * to propagate changes of host properties to each instance.
     *
     * Note this method enqueues the change, which are flushed as a batch.
     *
     * @param {string} prop Property or path name
     * @param {*} value Value of the property to forward
     * @return {void}
     */forwardHostProp(prop,value){if(this._setPendingPropertyOrPath(prop,value,!1,!0)){this.__dataHost._enqueueClient(this)}}/**
     * Override point for adding custom or simulated event handling.
     *
     * @override
     * @param {!Node} node Node to add event listener to
     * @param {string} eventName Name of event
     * @param {function(!Event):void} handler Listener function to add
     * @return {void}
     */_addEventListenerToNode(node,eventName,handler){if(this._methodHost&&this.__templatizeOptions.parentModel){// If this instance should be considered a parent model, decorate
// events this template instance as `model`
this._methodHost._addEventListenerToNode(node,eventName,e=>{e.model=this;handler(e)})}else{// Otherwise delegate to the template's host (which could be)
// another template instance
let templateHost=this.__dataHost.__dataHost;if(templateHost){templateHost._addEventListenerToNode(node,eventName,handler)}}}/**
     * Shows or hides the template instance top level child elements. For
     * text nodes, `textContent` is removed while "hidden" and replaced when
     * "shown."
     * @param {boolean} hide Set to true to hide the children;
     * set to false to show them.
     * @return {void}
     * @protected
     */_showHideChildren(hide){let c=this.children;for(let i=0,n;i<c.length;i++){n=c[i];// Ignore non-changes
if(!!hide!=!!n.__hideTemplateChildren__){if(n.nodeType===Node.TEXT_NODE){if(hide){n.__polymerTextContent__=n.textContent;n.textContent=""}else{n.textContent=n.__polymerTextContent__}// remove and replace slot
}else if("slot"===n.localName){if(hide){n.__polymerReplaced__=document.createComment("hidden-slot");wrap$1(wrap$1(n).parentNode).replaceChild(n.__polymerReplaced__,n)}else{const replace=n.__polymerReplaced__;if(replace){wrap$1(wrap$1(replace).parentNode).replaceChild(n,replace)}}}else if(n.style){if(hide){n.__polymerDisplay__=n.style.display;n.style.display="none"}else{n.style.display=n.__polymerDisplay__}}}n.__hideTemplateChildren__=hide;if(n._showHideChildren){n._showHideChildren(hide)}}}/**
     * Overrides default property-effects implementation to intercept
     * textContent bindings while children are "hidden" and cache in
     * private storage for later retrieval.
     *
     * @override
     * @param {!Node} node The node to set a property on
     * @param {string} prop The property to set
     * @param {*} value The value to set
     * @return {void}
     * @protected
     */_setUnmanagedPropertyToNode(node,prop,value){if(node.__hideTemplateChildren__&&node.nodeType==Node.TEXT_NODE&&"textContent"==prop){node.__polymerTextContent__=value}else{super._setUnmanagedPropertyToNode(node,prop,value)}}/**
     * Find the parent model of this template instance.  The parent model
     * is either another templatize instance that had option `parentModel: true`,
     * or else the host element.
     *
     * @return {!Polymer_PropertyEffects} The parent model of this instance
     */get parentModel(){let model=this.__parentModel;if(!model){let options;model=this;do{// A template instance's `__dataHost` is a <template>
// `model.__dataHost.__dataHost` is the template's host
model=model.__dataHost.__dataHost}while((options=model.__templatizeOptions)&&!options.parentModel);this.__parentModel=model}return model}/**
     * Stub of HTMLElement's `dispatchEvent`, so that effects that may
     * dispatch events safely no-op.
     *
     * @param {Event} event Event to dispatch
     * @return {boolean} Always true.
     * @override
     */dispatchEvent(event){// eslint-disable-line no-unused-vars
return!0}}/** @type {!DataTemplate} */_exports.TemplateInstanceBase=TemplateInstanceBase;TemplateInstanceBase.prototype.__dataHost;/** @type {!TemplatizeOptions} */TemplateInstanceBase.prototype.__templatizeOptions;/** @type {!Polymer_PropertyEffects} */TemplateInstanceBase.prototype._methodHost;/** @type {!Object} */TemplateInstanceBase.prototype.__templatizeOwner;/** @type {!Object} */TemplateInstanceBase.prototype.__hostProps;/**
                                             * @constructor
                                             * @extends {TemplateInstanceBase}
                                             * @implements {Polymer_MutableData}
                                             * @private
                                             */const MutableTemplateInstanceBase=MutableData(// This cast shouldn't be necessary, but Closure doesn't seem to understand
// this constructor.
/** @type {function(new:TemplateInstanceBase)} */TemplateInstanceBase);function findMethodHost(template){// Technically this should be the owner of the outermost template.
// In shadow dom, this is always getRootNode().host, but we can
// approximate this via cooperation with our dataHost always setting
// `_methodHost` as long as there were bindings (or id's) on this
// instance causing it to get a dataHost.
let templateHost=template.__dataHost;return templateHost&&templateHost._methodHost||templateHost}/* eslint-disable valid-jsdoc */ /**
                                    * @suppress {missingProperties} class.prototype is not defined for some reason
                                    */function createTemplatizerClass(template,templateInfo,options){/**
   * @constructor
   * @extends {TemplateInstanceBase}
   */let templatizerBase=options.mutableData?MutableTemplateInstanceBase:TemplateInstanceBase;// Affordance for global mixins onto TemplatizeInstance
if(templatize.mixin){templatizerBase=templatize.mixin(templatizerBase)}/**
     * Anonymous class created by the templatize
     * @constructor
     * @private
     */let klass=class extends templatizerBase{};/** @override */klass.prototype.__templatizeOptions=options;klass.prototype._bindTemplate(template);addNotifyEffects(klass,template,templateInfo,options);return klass}/**
   * Adds propagate effects from the template to the template instance for
   * properties that the host binds to the template using the `_host_` prefix.
   * 
   * @suppress {missingProperties} class.prototype is not defined for some reason
   */function addPropagateEffects(template,templateInfo,options){let userForwardHostProp=options.forwardHostProp;if(userForwardHostProp&&templateInfo.hasHostProps){// Provide data API and property effects on memoized template class
let klass=templateInfo.templatizeTemplateClass;if(!klass){/**
       * @constructor
       * @extends {DataTemplate}
       */let templatizedBase=options.mutableData?MutableDataTemplate:DataTemplate;/** @private */klass=templateInfo.templatizeTemplateClass=class TemplatizedTemplate extends templatizedBase{};// Add template - >instances effects
// and host <- template effects
let hostProps=templateInfo.hostProps;for(let prop in hostProps){klass.prototype._addPropertyEffect("_host_"+prop,klass.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE,{fn:createForwardHostPropEffect(prop,userForwardHostProp)});klass.prototype._createNotifyingProperty("_host_"+prop)}}upgradeTemplate(template,klass);// Mix any pre-bound data into __data; no need to flush this to
// instances since they pull from the template at instance-time
if(template.__dataProto){// Note, generally `__dataProto` could be chained, but it's guaranteed
// to not be since this is a vanilla template we just added effects to
Object.assign(template.__data,template.__dataProto)}// Clear any pending data for performance
template.__dataTemp={};template.__dataPending=null;template.__dataOld=null;template._enableProperties()}}/* eslint-enable valid-jsdoc */function createForwardHostPropEffect(hostProp,userForwardHostProp){return function forwardHostProp(template,prop,props){userForwardHostProp.call(template.__templatizeOwner,prop.substring("_host_".length),props[prop])}}function addNotifyEffects(klass,template,templateInfo,options){let hostProps=templateInfo.hostProps||{};for(let iprop in options.instanceProps){delete hostProps[iprop];let userNotifyInstanceProp=options.notifyInstanceProp;if(userNotifyInstanceProp){klass.prototype._addPropertyEffect(iprop,klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,{fn:createNotifyInstancePropEffect(iprop,userNotifyInstanceProp)})}}if(options.forwardHostProp&&template.__dataHost){for(let hprop in hostProps){// As we're iterating hostProps in this function, note whether
// there were any, for an optimization in addPropagateEffects
if(!templateInfo.hasHostProps){templateInfo.hasHostProps=!0}klass.prototype._addPropertyEffect(hprop,klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,{fn:createNotifyHostPropEffect()})}}}function createNotifyInstancePropEffect(instProp,userNotifyInstanceProp){return function notifyInstanceProp(inst,prop,props){userNotifyInstanceProp.call(inst.__templatizeOwner,inst,prop,props[prop])}}function createNotifyHostPropEffect(){return function notifyHostProp(inst,prop,props){inst.__dataHost._setPendingPropertyOrPath("_host_"+prop,props[prop],!0,!0)}}/**
   * Returns an anonymous `PropertyEffects` class bound to the
   * `<template>` provided.  Instancing the class will result in the
   * template being stamped into a document fragment stored as the instance's
   * `root` property, after which it can be appended to the DOM.
   *
   * Templates may utilize all Polymer data-binding features as well as
   * declarative event listeners.  Event listeners and inline computing
   * functions in the template will be called on the host of the template.
   *
   * The constructor returned takes a single argument dictionary of initial
   * property values to propagate into template bindings.  Additionally
   * host properties can be forwarded in, and instance properties can be
   * notified out by providing optional callbacks in the `options` dictionary.
   *
   * Valid configuration in `options` are as follows:
   *
   * - `forwardHostProp(property, value)`: Called when a property referenced
   *   in the template changed on the template's host. As this library does
   *   not retain references to templates instanced by the user, it is the
   *   templatize owner's responsibility to forward host property changes into
   *   user-stamped instances.  The `instance.forwardHostProp(property, value)`
   *    method on the generated class should be called to forward host
   *   properties into the template to prevent unnecessary property-changed
   *   notifications. Any properties referenced in the template that are not
   *   defined in `instanceProps` will be notified up to the template's host
   *   automatically.
   * - `instanceProps`: Dictionary of property names that will be added
   *   to the instance by the templatize owner.  These properties shadow any
   *   host properties, and changes within the template to these properties
   *   will result in `notifyInstanceProp` being called.
   * - `mutableData`: When `true`, the generated class will skip strict
   *   dirty-checking for objects and arrays (always consider them to be
   *   "dirty").
   * - `notifyInstanceProp(instance, property, value)`: Called when
   *   an instance property changes.  Users may choose to call `notifyPath`
   *   on e.g. the owner to notify the change.
   * - `parentModel`: When `true`, events handled by declarative event listeners
   *   (`on-event="handler"`) will be decorated with a `model` property pointing
   *   to the template instance that stamped it.  It will also be returned
   *   from `instance.parentModel` in cases where template instance nesting
   *   causes an inner model to shadow an outer model.
   *
   * All callbacks are called bound to the `owner`. Any context
   * needed for the callbacks (such as references to `instances` stamped)
   * should be stored on the `owner` such that they can be retrieved via
   * `this`.
   *
   * When `options.forwardHostProp` is declared as an option, any properties
   * referenced in the template will be automatically forwarded from the host of
   * the `<template>` to instances, with the exception of any properties listed in
   * the `options.instanceProps` object.  `instanceProps` are assumed to be
   * managed by the owner of the instances, either passed into the constructor
   * or set after the fact.  Note, any properties passed into the constructor will
   * always be set to the instance (regardless of whether they would normally
   * be forwarded from the host).
   *
   * Note that `templatize()` can be run only once for a given `<template>`.
   * Further calls will result in an error. Also, there is a special
   * behavior if the template was duplicated through a mechanism such as
   * `<dom-repeat>` or `<test-fixture>`. In this case, all calls to
   * `templatize()` return the same class for all duplicates of a template.
   * The class returned from `templatize()` is generated only once using
   * the `options` from the first call. This means that any `options`
   * provided to subsequent calls will be ignored. Therefore, it is very
   * important not to close over any variables inside the callbacks. Also,
   * arrow functions must be avoided because they bind the outer `this`.
   * Inside the callbacks, any contextual information can be accessed
   * through `this`, which points to the `owner`.
   *
   * @param {!HTMLTemplateElement} template Template to templatize
   * @param {Polymer_PropertyEffects=} owner Owner of the template instances;
   *   any optional callbacks will be bound to this owner.
   * @param {Object=} options Options dictionary (see summary for details)
   * @return {function(new:TemplateInstanceBase, Object=)} Generated class bound
   *   to the template provided
   * @suppress {invalidCasts}
   */function templatize(template,owner,options){// Under strictTemplatePolicy, the templatized element must be owned
// by a (trusted) Polymer element, indicated by existence of _methodHost;
// e.g. for dom-if & dom-repeat in main document, _methodHost is null
if(strictTemplatePolicy&&!findMethodHost(template)){throw new Error("strictTemplatePolicy: template owner not trusted")}options=/** @type {!TemplatizeOptions} */options||{};if(template.__templatizeOwner){throw new Error("A <template> can only be templatized once")}template.__templatizeOwner=owner;const ctor=owner?owner.constructor:TemplateInstanceBase;let templateInfo=ctor._parseTemplate(template),baseClass=templateInfo.templatizeInstanceClass;// Get memoized base class for the prototypical template, which
// includes property effects for binding template & forwarding
/**
   * @constructor
   * @extends {TemplateInstanceBase}
   */if(!baseClass){baseClass=createTemplatizerClass(template,templateInfo,options);templateInfo.templatizeInstanceClass=baseClass}// Host property forwarding must be installed onto template instance
addPropagateEffects(template,templateInfo,options);// Subclass base class and add reference for this specific template
/** @private */let klass=class TemplateInstance extends baseClass{};/** @override */klass.prototype._methodHost=findMethodHost(template);/** @override */klass.prototype.__dataHost=/** @type {!DataTemplate} */template;/** @override */klass.prototype.__templatizeOwner=/** @type {!Object} */owner;/** @override */klass.prototype.__hostProps=templateInfo.hostProps;klass=/** @type {function(new:TemplateInstanceBase)} */klass;//eslint-disable-line no-self-assign
return klass}/**
   * Returns the template "model" associated with a given element, which
   * serves as the binding scope for the template instance the element is
   * contained in. A template model is an instance of
   * `TemplateInstanceBase`, and should be used to manipulate data
   * associated with this template instance.
   *
   * Example:
   *
   *   let model = modelForElement(el);
   *   if (model.index < 10) {
   *     model.set('item.checked', true);
   *   }
   *
   * @param {HTMLTemplateElement} template The model will be returned for
   *   elements stamped from this template
   * @param {Node=} node Node for which to return a template model.
   * @return {TemplateInstanceBase} Template instance representing the
   *   binding scope for the element
   */function modelForElement(template,node){let model;while(node){// An element with a __templatizeInstance marks the top boundary
// of a scope; walk up until we find one, and then ensure that
// its __dataHost matches `this`, meaning this dom-repeat stamped it
if(model=node.__templatizeInstance){// Found an element stamped by another template; keep walking up
// from its __dataHost
if(model.__dataHost!=template){node=model.__dataHost}else{return model}}else{// Still in a template scope, keep going up until
// a __templatizeInstance is found
node=wrap$1(node).parentNode}}return null}var templatize$1={templatize:templatize,modelForElement:modelForElement,TemplateInstanceBase:TemplateInstanceBase};/**
    * @typedef {{
    *   _templatizerTemplate: HTMLTemplateElement,
    *   _parentModel: boolean,
    *   _instanceProps: Object,
    *   _forwardHostPropV2: Function,
    *   _notifyInstancePropV2: Function,
    *   ctor: function(new:TemplateInstanceBase, Object=)
    * }}
    */_exports.$templatize=templatize$1;let TemplatizerUser;// eslint-disable-line
/**
 * The `Templatizer` behavior adds methods to generate instances of
 * templates that are each managed by an anonymous `PropertyEffects`
 * instance where data-bindings in the stamped template content are bound to
 * accessors on itself.
 *
 * This behavior is provided in Polymer 2.x-3.x as a hybrid-element convenience
 * only.  For non-hybrid usage, the `Templatize` library
 * should be used instead.
 *
 * Example:
 *
 *     import {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';
 *     // Get a template from somewhere, e.g. light DOM
 *     let template = this.querySelector('template');
 *     // Prepare the template
 *     this.templatize(template);
 *     // Instance the template with an initial data model
 *     let instance = this.stamp({myProp: 'initial'});
 *     // Insert the instance's DOM somewhere, e.g. light DOM
 *     dom(this).appendChild(instance.root);
 *     // Changing a property on the instance will propagate to bindings
 *     // in the template
 *     instance.myProp = 'new value';
 *
 * Users of `Templatizer` may need to implement the following abstract
 * API's to determine how properties and paths from the host should be
 * forwarded into to instances:
 *
 *     _forwardHostPropV2: function(prop, value)
 *
 * Likewise, users may implement these additional abstract API's to determine
 * how instance-specific properties that change on the instance should be
 * forwarded out to the host, if necessary.
 *
 *     _notifyInstancePropV2: function(inst, prop, value)
 *
 * In order to determine which properties are instance-specific and require
 * custom notification via `_notifyInstanceProp`, define an `_instanceProps`
 * object containing keys for each instance prop, for example:
 *
 *     _instanceProps: {
 *       item: true,
 *       index: true
 *     }
 *
 * Any properties used in the template that are not defined in _instanceProp
 * will be forwarded out to the Templatize `owner` automatically.
 *
 * Users may also implement the following abstract function to show or
 * hide any DOM generated using `stamp`:
 *
 *     _showHideChildren: function(shouldHide)
 *
 * Note that some callbacks are suffixed with `V2` in the Polymer 2.x behavior
 * as the implementations will need to differ from the callbacks required
 * by the 1.x Templatizer API due to changes in the `TemplateInstance` API
 * between versions 1.x and 2.x.
 *
 * @polymerBehavior
 */const Templatizer={/**
   * Generates an anonymous `TemplateInstance` class (stored as `this.ctor`)
   * for the provided template.  This method should be called once per
   * template to prepare an element for stamping the template, followed
   * by `stamp` to create new instances of the template.
   *
   * @param {!HTMLTemplateElement} template Template to prepare
   * @param {boolean=} mutableData When `true`, the generated class will skip
   *   strict dirty-checking for objects and arrays (always consider them to
   *   be "dirty"). Defaults to false.
   * @return {void}
   * @this {TemplatizerUser}
   */templatize(template,mutableData){this._templatizerTemplate=template;this.ctor=templatize(template,/** @type {!Polymer_PropertyEffects} */this,{mutableData:!!mutableData,parentModel:this._parentModel,instanceProps:this._instanceProps,forwardHostProp:this._forwardHostPropV2,notifyInstanceProp:this._notifyInstancePropV2})},/**
   * Creates an instance of the template prepared by `templatize`.  The object
   * returned is an instance of the anonymous class generated by `templatize`
   * whose `root` property is a document fragment containing newly cloned
   * template content, and which has property accessors corresponding to
   * properties referenced in template bindings.
   *
   * @param {Object=} model Object containing initial property values to
   *   populate into the template bindings.
   * @return {TemplateInstanceBase} Returns the created instance of
   * the template prepared by `templatize`.
   * @this {TemplatizerUser}
   */stamp(model){return new this.ctor(model)},/**
   * Returns the template "model" (`TemplateInstance`) associated with
   * a given element, which serves as the binding scope for the template
   * instance the element is contained in.  A template model should be used
   * to manipulate data associated with this template instance.
   *
   * @param {HTMLElement} el Element for which to return a template model.
   * @return {TemplateInstanceBase} Model representing the binding scope for
   *   the element.
   * @this {TemplatizerUser}
   */modelForElement(el){return modelForElement(this._templatizerTemplate,el)}};_exports.Templatizer=Templatizer;var templatizerBehavior={Templatizer:Templatizer};_exports.$templatizerBehavior=templatizerBehavior;let elementsHidden=!1;/**
                             * @return {boolean} True if elements will be hidden globally
                             */function hideElementsGlobally(){if(legacyOptimizations&&!useShadow){if(!elementsHidden){elementsHidden=!0;const style=document.createElement("style");style.textContent="dom-bind,dom-if,dom-repeat{display:none;}";document.head.appendChild(style)}return!0}return!1}var hideTemplateControls={hideElementsGlobally:hideElementsGlobally};_exports.$hideTemplateControls=hideTemplateControls;const domBindBase=GestureEventListeners(OptionalMutableData(PropertyEffects(HTMLElement)));/**
                                                                                               * Custom element to allow using Polymer's template features (data binding,
                                                                                               * declarative event listeners, etc.) in the main document without defining
                                                                                               * a new custom element.
                                                                                               *
                                                                                               * `<template>` tags utilizing bindings may be wrapped with the `<dom-bind>`
                                                                                               * element, which will immediately stamp the wrapped template into the main
                                                                                               * document and bind elements to the `dom-bind` element itself as the
                                                                                               * binding scope.
                                                                                               *
                                                                                               * @polymer
                                                                                               * @customElement
                                                                                               * @appliesMixin PropertyEffects
                                                                                               * @appliesMixin OptionalMutableData
                                                                                               * @appliesMixin GestureEventListeners
                                                                                               * @extends {domBindBase}
                                                                                               * @summary Custom element to allow using Polymer's template features (data
                                                                                               *   binding, declarative event listeners, etc.) in the main document.
                                                                                               */class DomBind extends domBindBase{static get observedAttributes(){return["mutable-data"]}constructor(){super();if(strictTemplatePolicy){throw new Error(`strictTemplatePolicy: dom-bind not allowed`)}this.root=null;this.$=null;this.__children=null}/* eslint-disable no-unused-vars */ /**
                                         * @override
                                         * @param {string} name Name of attribute that changed
                                         * @param {?string} old Old attribute value
                                         * @param {?string} value New attribute value
                                         * @param {?string} namespace Attribute namespace.
                                         * @return {void}
                                         */attributeChangedCallback(name,old,value,namespace){// assumes only one observed attribute
this.mutableData=!0}/**
     * @override
     * @return {void}
     */connectedCallback(){if(!hideElementsGlobally()){this.style.display="none"}this.render()}/**
     * @override
     * @return {void}
     */disconnectedCallback(){this.__removeChildren()}__insertChildren(){wrap$1(wrap$1(this).parentNode).insertBefore(this.root,this)}__removeChildren(){if(this.__children){for(let i=0;i<this.__children.length;i++){this.root.appendChild(this.__children[i])}}}/**
     * Forces the element to render its content. This is typically only
     * necessary to call if HTMLImports with the async attribute are used.
     * @return {void}
     */render(){let template;if(!this.__children){template=/** @type {HTMLTemplateElement} */template||this.querySelector("template");if(!template){// Wait until childList changes and template should be there by then
let observer=new MutationObserver(()=>{template=/** @type {HTMLTemplateElement} */this.querySelector("template");if(template){observer.disconnect();this.render()}else{throw new Error("dom-bind requires a <template> child")}});observer.observe(this,{childList:!0});return}this.root=this._stampTemplate(/** @type {!HTMLTemplateElement} */template);this.$=this.root.$;this.__children=[];for(let n=this.root.firstChild;n;n=n.nextSibling){this.__children[this.__children.length]=n}this._enableProperties()}this.__insertChildren();this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0}))}}_exports.DomBind=DomBind;customElements.define("dom-bind",DomBind);var domBind={DomBind:DomBind};_exports.$domBind=domBind;class LiteralString{constructor(string){/** @type {string} */this.value=string.toString()}/**
     * @return {string} LiteralString string value
     * @override
     */toString(){return this.value}}/**
   * @param {*} value Object to stringify into HTML
   * @return {string} HTML stringified form of `obj`
   */function literalValue(value){if(value instanceof LiteralString){return(/** @type {!LiteralString} */value.value)}else{throw new Error(`non-literal value passed to Polymer's htmlLiteral function: ${value}`)}}/**
   * @param {*} value Object to stringify into HTML
   * @return {string} HTML stringified form of `obj`
   */function htmlValue(value){if(value instanceof HTMLTemplateElement){return(/** @type {!HTMLTemplateElement } */value.innerHTML)}else if(value instanceof LiteralString){return literalValue(value)}else{throw new Error(`non-template value passed to Polymer's html function: ${value}`)}}/**
   * A template literal tag that creates an HTML <template> element from the
   * contents of the string.
   *
   * This allows you to write a Polymer Template in JavaScript.
   *
   * Templates can be composed by interpolating `HTMLTemplateElement`s in
   * expressions in the JavaScript template literal. The nested template's
   * `innerHTML` is included in the containing template.  The only other
   * values allowed in expressions are those returned from `htmlLiteral`
   * which ensures only literal values from JS source ever reach the HTML, to
   * guard against XSS risks.
   *
   * All other values are disallowed in expressions to help prevent XSS
   * attacks; however, `htmlLiteral` can be used to compose static
   * string values into templates. This is useful to compose strings into
   * places that do not accept html, like the css text of a `style`
   * element.
   *
   * Example:
   *
   *     static get template() {
   *       return html`
   *         <style>:host{ content:"..." }</style>
   *         <div class="shadowed">${this.partialTemplate}</div>
   *         ${super.template}
   *       `;
   *     }
   *     static get partialTemplate() { return html`<span>Partial!</span>`; }
   *
   * @param {!ITemplateArray} strings Constant parts of tagged template literal
   * @param {...*} values Variable parts of tagged template literal
   * @return {!HTMLTemplateElement} Constructed HTMLTemplateElement
   */const html=function html(strings,...values){const template=/** @type {!HTMLTemplateElement} */document.createElement("template");template.innerHTML=values.reduce((acc,v,idx)=>acc+htmlValue(v)+strings[idx+1],strings[0]);return template};/**
    * An html literal tag that can be used with `html` to compose.
    * a literal string.
    *
    * Example:
    *
    *     static get template() {
    *       return html`
    *         <style>
    *           :host { display: block; }
    *           ${this.styleTemplate()}
    *         </style>
    *         <div class="shadowed">${staticValue}</div>
    *         ${super.template}
    *       `;
    *     }
    *     static get styleTemplate() {
    *        return htmlLiteral`.shadowed { background: gray; }`;
    *     }
    *
    * @param {!ITemplateArray} strings Constant parts of tagged template literal
    * @param {...*} values Variable parts of tagged template literal
    * @return {!LiteralString} Constructed literal string
    */_exports.html$3=_exports.html$2=_exports.html$1=html;const htmlLiteral=function(strings,...values){return new LiteralString(values.reduce((acc,v,idx)=>acc+literalValue(v)+strings[idx+1],strings[0]))};_exports.htmlLiteral=htmlLiteral;var htmlTag={html:html,htmlLiteral:htmlLiteral};_exports.$htmlTag=htmlTag;const PolymerElement=ElementMixin(HTMLElement);_exports.PolymerElement=PolymerElement;var polymerElement={version:version,PolymerElement:PolymerElement,html:html};_exports.$polymerElement=polymerElement;const domRepeatBase=OptionalMutableData(PolymerElement);/**
                                                            * The `<dom-repeat>` element will automatically stamp and binds one instance
                                                            * of template content to each object in a user-provided array.
                                                            * `dom-repeat` accepts an `items` property, and one instance of the template
                                                            * is stamped for each item into the DOM at the location of the `dom-repeat`
                                                            * element.  The `item` property will be set on each instance's binding
                                                            * scope, thus templates should bind to sub-properties of `item`.
                                                            *
                                                            * Example:
                                                            *
                                                            * ```html
                                                            * <dom-module id="employee-list">
                                                            *
                                                            *   <template>
                                                            *
                                                            *     <div> Employee list: </div>
                                                            *     <dom-repeat items="{{employees}}">
                                                            *       <template>
                                                            *         <div>First name: <span>{{item.first}}</span></div>
                                                            *         <div>Last name: <span>{{item.last}}</span></div>
                                                            *       </template>
                                                            *     </dom-repeat>
                                                            *
                                                            *   </template>
                                                            *
                                                            * </dom-module>
                                                            * ```
                                                            *
                                                            * With the following custom element definition:
                                                            *
                                                            * ```js
                                                            * class EmployeeList extends PolymerElement {
                                                            *   static get is() { return 'employee-list'; }
                                                            *   static get properties() {
                                                            *     return {
                                                            *       employees: {
                                                            *         value() {
                                                            *           return [
                                                            *             {first: 'Bob', last: 'Smith'},
                                                            *             {first: 'Sally', last: 'Johnson'},
                                                            *             ...
                                                            *           ];
                                                            *         }
                                                            *       }
                                                            *     };
                                                            *   }
                                                            * }
                                                            * ```
                                                            *
                                                            * Notifications for changes to items sub-properties will be forwarded to template
                                                            * instances, which will update via the normal structured data notification system.
                                                            *
                                                            * Mutations to the `items` array itself should be made using the Array
                                                            * mutation API's on the PropertyEffects mixin (`push`, `pop`, `splice`,
                                                            * `shift`, `unshift`), and template instances will be kept in sync with the
                                                            * data in the array.
                                                            *
                                                            * Events caught by event handlers within the `dom-repeat` template will be
                                                            * decorated with a `model` property, which represents the binding scope for
                                                            * each template instance.  The model should be used to manipulate data on the
                                                            * instance, for example `event.model.set('item.checked', true);`.
                                                            *
                                                            * Alternatively, the model for a template instance for an element stamped by
                                                            * a `dom-repeat` can be obtained using the `modelForElement` API on the
                                                            * `dom-repeat` that stamped it, for example
                                                            * `this.$.domRepeat.modelForElement(event.target).set('item.checked', true);`.
                                                            * This may be useful for manipulating instance data of event targets obtained
                                                            * by event handlers on parents of the `dom-repeat` (event delegation).
                                                            *
                                                            * A view-specific filter/sort may be applied to each `dom-repeat` by supplying a
                                                            * `filter` and/or `sort` property.  This may be a string that names a function on
                                                            * the host, or a function may be assigned to the property directly.  The functions
                                                            * should implemented following the standard `Array` filter/sort API.
                                                            *
                                                            * In order to re-run the filter or sort functions based on changes to sub-fields
                                                            * of `items`, the `observe` property may be set as a space-separated list of
                                                            * `item` sub-fields that should cause a re-filter/sort when modified.  If
                                                            * the filter or sort function depends on properties not contained in `items`,
                                                            * the user should observe changes to those properties and call `render` to update
                                                            * the view based on the dependency change.
                                                            *
                                                            * For example, for an `dom-repeat` with a filter of the following:
                                                            *
                                                            * ```js
                                                            * isEngineer(item) {
                                                            *   return item.type == 'engineer' || item.manager.type == 'engineer';
                                                            * }
                                                            * ```
                                                            *
                                                            * Then the `observe` property should be configured as follows:
                                                            *
                                                            * ```html
                                                            * <dom-repeat items="{{employees}}" filter="isEngineer" observe="type manager.type">
                                                            * ```
                                                            *
                                                            * @customElement
                                                            * @polymer
                                                            * @extends {domRepeatBase}
                                                            * @appliesMixin OptionalMutableData
                                                            * @summary Custom element for stamping instance of a template bound to
                                                            *   items in an array.
                                                            */class DomRepeat extends domRepeatBase{// Not needed to find template; can be removed once the analyzer
// can find the tag name from customElements.define call
static get is(){return"dom-repeat"}static get template(){return null}static get properties(){/**
     * Fired whenever DOM is added or removed by this template (by
     * default, rendering occurs lazily).  To force immediate rendering, call
     * `render`.
     *
     * @event dom-change
     */return{/**
       * An array containing items determining how many instances of the template
       * to stamp and that that each template instance should bind to.
       */items:{type:Array},/**
       * The name of the variable to add to the binding scope for the array
       * element associated with a given template instance.
       */as:{type:String,value:"item"},/**
       * The name of the variable to add to the binding scope with the index
       * of the instance in the sorted and filtered list of rendered items.
       * Note, for the index in the `this.items` array, use the value of the
       * `itemsIndexAs` property.
       */indexAs:{type:String,value:"index"},/**
       * The name of the variable to add to the binding scope with the index
       * of the instance in the `this.items` array. Note, for the index of
       * this instance in the sorted and filtered list of rendered items,
       * use the value of the `indexAs` property.
       */itemsIndexAs:{type:String,value:"itemsIndex"},/**
       * A function that should determine the sort order of the items.  This
       * property should either be provided as a string, indicating a method
       * name on the element's host, or else be an actual function.  The
       * function should match the sort function passed to `Array.sort`.
       * Using a sort function has no effect on the underlying `items` array.
       */sort:{type:Function,observer:"__sortChanged"},/**
       * A function that can be used to filter items out of the view.  This
       * property should either be provided as a string, indicating a method
       * name on the element's host, or else be an actual function.  The
       * function should match the sort function passed to `Array.filter`.
       * Using a filter function has no effect on the underlying `items` array.
       */filter:{type:Function,observer:"__filterChanged"},/**
       * When using a `filter` or `sort` function, the `observe` property
       * should be set to a space-separated list of the names of item
       * sub-fields that should trigger a re-sort or re-filter when changed.
       * These should generally be fields of `item` that the sort or filter
       * function depends on.
       */observe:{type:String,observer:"__observeChanged"},/**
       * When using a `filter` or `sort` function, the `delay` property
       * determines a debounce time in ms after a change to observed item
       * properties that must pass before the filter or sort is re-run.
       * This is useful in rate-limiting shuffling of the view when
       * item changes may be frequent.
       */delay:Number,/**
       * Count of currently rendered items after `filter` (if any) has been applied.
       * If "chunking mode" is enabled, `renderedItemCount` is updated each time a
       * set of template instances is rendered.
       *
       */renderedItemCount:{type:Number,notify:!0,readOnly:!0},/**
       * Defines an initial count of template instances to render after setting
       * the `items` array, before the next paint, and puts the `dom-repeat`
       * into "chunking mode".  The remaining items will be created and rendered
       * incrementally at each animation frame therof until all instances have
       * been rendered.
       */initialCount:{type:Number,observer:"__initializeChunking"},/**
       * When `initialCount` is used, this property defines a frame rate (in
       * fps) to target by throttling the number of instances rendered each
       * frame to not exceed the budget for the target frame rate.  The
       * framerate is effectively the number of `requestAnimationFrame`s that
       * it tries to allow to actually fire in a given second. It does this
       * by measuring the time between `rAF`s and continuously adjusting the
       * number of items created each `rAF` to maintain the target framerate.
       * Setting this to a higher number allows lower latency and higher
       * throughput for event handlers and other tasks, but results in a
       * longer time for the remaining items to complete rendering.
       */targetFramerate:{type:Number,value:20},_targetFrameTime:{type:Number,computed:"__computeFrameTime(targetFramerate)"}}}static get observers(){return["__itemsChanged(items.*)"]}constructor(){super();this.__instances=[];this.__limit=1/0;this.__pool=[];this.__renderDebouncer=null;this.__itemsIdxToInstIdx={};this.__chunkCount=null;this.__lastChunkTime=null;this.__sortFn=null;this.__filterFn=null;this.__observePaths=null;/** @type {?function(new:TemplateInstanceBase, Object=)} */this.__ctor=null;this.__isDetached=!0;this.template=null}/**
     * @override
     * @return {void}
     */disconnectedCallback(){super.disconnectedCallback();this.__isDetached=!0;for(let i=0;i<this.__instances.length;i++){this.__detachInstance(i)}}/**
     * @override
     * @return {void}
     */connectedCallback(){super.connectedCallback();if(!hideElementsGlobally()){this.style.display="none"}// only perform attachment if the element was previously detached.
if(this.__isDetached){this.__isDetached=!1;let wrappedParent=wrap$1(wrap$1(this).parentNode);for(let i=0;i<this.__instances.length;i++){this.__attachInstance(i,wrappedParent)}}}__ensureTemplatized(){// Templatizing (generating the instance constructor) needs to wait
// until ready, since won't have its template content handed back to
// it until then
if(!this.__ctor){let template=this.template=/** @type {HTMLTemplateElement} */this.querySelector("template");if(!template){// // Wait until childList changes and template should be there by then
let observer=new MutationObserver(()=>{if(this.querySelector("template")){observer.disconnect();this.__render()}else{throw new Error("dom-repeat requires a <template> child")}});observer.observe(this,{childList:!0});return!1}// Template instance props that should be excluded from forwarding
let instanceProps={};instanceProps[this.as]=!0;instanceProps[this.indexAs]=!0;instanceProps[this.itemsIndexAs]=!0;this.__ctor=templatize(template,this,{mutableData:this.mutableData,parentModel:!0,instanceProps:instanceProps,/**
         * @this {DomRepeat}
         * @param {string} prop Property to set
         * @param {*} value Value to set property to
         */forwardHostProp:function(prop,value){let i$=this.__instances;for(let i=0,inst;i<i$.length&&(inst=i$[i]);i++){inst.forwardHostProp(prop,value)}},/**
         * @this {DomRepeat}
         * @param {Object} inst Instance to notify
         * @param {string} prop Property to notify
         * @param {*} value Value to notify
         */notifyInstanceProp:function(inst,prop,value){if(matches(this.as,prop)){let idx=inst[this.itemsIndexAs];if(prop==this.as){this.items[idx]=value}let path=translate(this.as,`${JSCompiler_renameProperty("items",this)}.${idx}`,prop);this.notifyPath(path,value)}}})}return!0}__getMethodHost(){// Technically this should be the owner of the outermost template.
// In shadow dom, this is always getRootNode().host, but we can
// approximate this via cooperation with our dataHost always setting
// `_methodHost` as long as there were bindings (or id's) on this
// instance causing it to get a dataHost.
return this.__dataHost._methodHost||this.__dataHost}__functionFromPropertyValue(functionOrMethodName){if("string"===typeof functionOrMethodName){let methodName=functionOrMethodName,obj=this.__getMethodHost();return function(){return obj[methodName].apply(obj,arguments)}}return functionOrMethodName}__sortChanged(sort){this.__sortFn=this.__functionFromPropertyValue(sort);if(this.items){this.__debounceRender(this.__render)}}__filterChanged(filter){this.__filterFn=this.__functionFromPropertyValue(filter);if(this.items){this.__debounceRender(this.__render)}}__computeFrameTime(rate){return Math.ceil(1e3/rate)}__initializeChunking(){if(this.initialCount){this.__limit=this.initialCount;this.__chunkCount=this.initialCount;this.__lastChunkTime=performance.now()}}__tryRenderChunk(){// Debounced so that multiple calls through `_render` between animation
// frames only queue one new rAF (e.g. array mutation & chunked render)
if(this.items&&this.__limit<this.items.length){this.__debounceRender(this.__requestRenderChunk)}}__requestRenderChunk(){requestAnimationFrame(()=>this.__renderChunk())}__renderChunk(){// Simple auto chunkSize throttling algorithm based on feedback loop:
// measure actual time between frames and scale chunk count by ratio
// of target/actual frame time
let currChunkTime=performance.now(),ratio=this._targetFrameTime/(currChunkTime-this.__lastChunkTime);this.__chunkCount=Math.round(this.__chunkCount*ratio)||1;this.__limit+=this.__chunkCount;this.__lastChunkTime=currChunkTime;this.__debounceRender(this.__render)}__observeChanged(){this.__observePaths=this.observe&&this.observe.replace(".*",".").split(" ")}__itemsChanged(change){if(this.items&&!Array.isArray(this.items)){console.warn("dom-repeat expected array for `items`, found",this.items)}// If path was to an item (e.g. 'items.3' or 'items.3.foo'), forward the
// path to that instance synchronously (returns false for non-item paths)
if(!this.__handleItemPath(change.path,change.value)){// Otherwise, the array was reset ('items') or spliced ('items.splices'),
// so queue a full refresh
this.__initializeChunking();this.__debounceRender(this.__render)}}__handleObservedPaths(path){// Handle cases where path changes should cause a re-sort/filter
if(this.__sortFn||this.__filterFn){if(!path){// Always re-render if the item itself changed
this.__debounceRender(this.__render,this.delay)}else if(this.__observePaths){// Otherwise, re-render if the path changed matches an observed path
let paths=this.__observePaths;for(let i=0;i<paths.length;i++){if(0===path.indexOf(paths[i])){this.__debounceRender(this.__render,this.delay)}}}}}/**
     * @param {function(this:DomRepeat)} fn Function to debounce.
     * @param {number=} delay Delay in ms to debounce by.
     */__debounceRender(fn,delay=0){this.__renderDebouncer=Debouncer.debounce(this.__renderDebouncer,0<delay?timeOut.after(delay):microTask,fn.bind(this));enqueueDebouncer(this.__renderDebouncer)}/**
     * Forces the element to render its content. Normally rendering is
     * asynchronous to a provoking change. This is done for efficiency so
     * that multiple changes trigger only a single render. The render method
     * should be called if, for example, template rendering is required to
     * validate application state.
     * @return {void}
     */render(){// Queue this repeater, then flush all in order
this.__debounceRender(this.__render);flush$1()}__render(){if(!this.__ensureTemplatized()){// No template found yet
return}this.__applyFullRefresh();// Reset the pool
// TODO(kschaaf): Reuse pool across turns and nested templates
// Now that objects/arrays are re-evaluated when set, we can safely
// reuse pooled instances across turns, however we still need to decide
// semantics regarding how long to hold, how many to hold, etc.
this.__pool.length=0;// Set rendered item count
this._setRenderedItemCount(this.__instances.length);// Notify users
this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0}));// Check to see if we need to render more items
this.__tryRenderChunk()}__applyFullRefresh(){let items=this.items||[],isntIdxToItemsIdx=Array(items.length);for(let i=0;i<items.length;i++){isntIdxToItemsIdx[i]=i}// Apply user filter
if(this.__filterFn){isntIdxToItemsIdx=isntIdxToItemsIdx.filter((i,idx,array)=>this.__filterFn(items[i],idx,array))}// Apply user sort
if(this.__sortFn){isntIdxToItemsIdx.sort((a,b)=>this.__sortFn(items[a],items[b]))}// items->inst map kept for item path forwarding
const itemsIdxToInstIdx=this.__itemsIdxToInstIdx={};let instIdx=0;// Generate instances and assign items
const limit=Math.min(isntIdxToItemsIdx.length,this.__limit);for(;instIdx<limit;instIdx++){let inst=this.__instances[instIdx],itemIdx=isntIdxToItemsIdx[instIdx],item=items[itemIdx];itemsIdxToInstIdx[itemIdx]=instIdx;if(inst){inst._setPendingProperty(this.as,item);inst._setPendingProperty(this.indexAs,instIdx);inst._setPendingProperty(this.itemsIndexAs,itemIdx);inst._flushProperties()}else{this.__insertInstance(item,instIdx,itemIdx)}}// Remove any extra instances from previous state
for(let i=this.__instances.length-1;i>=instIdx;i--){this.__detachAndRemoveInstance(i)}}__detachInstance(idx){let inst=this.__instances[idx];const wrappedRoot=wrap$1(inst.root);for(let i=0,el;i<inst.children.length;i++){el=inst.children[i];wrappedRoot.appendChild(el)}return inst}__attachInstance(idx,parent){let inst=this.__instances[idx];// Note, this is pre-wrapped as an optimization
parent.insertBefore(inst.root,this)}__detachAndRemoveInstance(idx){let inst=this.__detachInstance(idx);if(inst){this.__pool.push(inst)}this.__instances.splice(idx,1)}__stampInstance(item,instIdx,itemIdx){let model={};model[this.as]=item;model[this.indexAs]=instIdx;model[this.itemsIndexAs]=itemIdx;return new this.__ctor(model)}__insertInstance(item,instIdx,itemIdx){let inst=this.__pool.pop();if(inst){// TODO(kschaaf): If the pool is shared across turns, hostProps
// need to be re-set to reused instances in addition to item
inst._setPendingProperty(this.as,item);inst._setPendingProperty(this.indexAs,instIdx);inst._setPendingProperty(this.itemsIndexAs,itemIdx);inst._flushProperties()}else{inst=this.__stampInstance(item,instIdx,itemIdx)}let beforeRow=this.__instances[instIdx+1],beforeNode=beforeRow?beforeRow.children[0]:this;wrap$1(wrap$1(this).parentNode).insertBefore(inst.root,beforeNode);this.__instances[instIdx]=inst;return inst}// Implements extension point from Templatize mixin
/**
   * Shows or hides the template instance top level child elements. For
   * text nodes, `textContent` is removed while "hidden" and replaced when
   * "shown."
   * @param {boolean} hidden Set to true to hide the children;
   * set to false to show them.
   * @return {void}
   * @protected
   */_showHideChildren(hidden){for(let i=0;i<this.__instances.length;i++){this.__instances[i]._showHideChildren(hidden)}}// Called as a side effect of a host items.<key>.<path> path change,
// responsible for notifying item.<path> changes to inst for key
__handleItemPath(path,value){let itemsPath=path.slice(6),dot=itemsPath.indexOf("."),itemsIdx=0>dot?itemsPath:itemsPath.substring(0,dot);// 'items.'.length == 6
// If path was index into array...
if(itemsIdx==parseInt(itemsIdx,10)){let itemSubPath=0>dot?"":itemsPath.substring(dot+1);// If the path is observed, it will trigger a full refresh
this.__handleObservedPaths(itemSubPath);// Note, even if a rull refresh is triggered, always do the path
// notification because unless mutableData is used for dom-repeat
// and all elements in the instance subtree, a full refresh may
// not trigger the proper update.
let instIdx=this.__itemsIdxToInstIdx[itemsIdx],inst=this.__instances[instIdx];if(inst){let itemPath=this.as+(itemSubPath?"."+itemSubPath:"");// This is effectively `notifyPath`, but avoids some of the overhead
// of the public API
inst._setPendingPropertyOrPath(itemPath,value,!1,!0);inst._flushProperties()}return!0}}/**
     * Returns the item associated with a given element stamped by
     * this `dom-repeat`.
     *
     * Note, to modify sub-properties of the item,
     * `modelForElement(el).set('item.<sub-prop>', value)`
     * should be used.
     *
     * @param {!HTMLElement} el Element for which to return the item.
     * @return {*} Item associated with the element.
     */itemForElement(el){let instance=this.modelForElement(el);return instance&&instance[this.as]}/**
     * Returns the inst index for a given element stamped by this `dom-repeat`.
     * If `sort` is provided, the index will reflect the sorted order (rather
     * than the original array order).
     *
     * @param {!HTMLElement} el Element for which to return the index.
     * @return {?number} Row index associated with the element (note this may
     *   not correspond to the array index if a user `sort` is applied).
     */indexForElement(el){let instance=this.modelForElement(el);return instance&&instance[this.indexAs]}/**
     * Returns the template "model" associated with a given element, which
     * serves as the binding scope for the template instance the element is
     * contained in. A template model
     * should be used to manipulate data associated with this template instance.
     *
     * Example:
     *
     *   let model = modelForElement(el);
     *   if (model.index < 10) {
     *     model.set('item.checked', true);
     *   }
     *
     * @param {!HTMLElement} el Element for which to return a template model.
     * @return {TemplateInstanceBase} Model representing the binding scope for
     *   the element.
     */modelForElement(el){return modelForElement(this.template,el)}}_exports.DomRepeat=DomRepeat;customElements.define(DomRepeat.is,DomRepeat);var domRepeat={DomRepeat:DomRepeat};_exports.$domRepeat=domRepeat;class DomIf extends PolymerElement{// Not needed to find template; can be removed once the analyzer
// can find the tag name from customElements.define call
static get is(){return"dom-if"}static get template(){return null}static get properties(){return{/**
       * Fired whenever DOM is added or removed/hidden by this template (by
       * default, rendering occurs lazily).  To force immediate rendering, call
       * `render`.
       *
       * @event dom-change
       */ /**
           * A boolean indicating whether this template should stamp.
           */if:{type:Boolean,observer:"__debounceRender"},/**
       * When true, elements will be removed from DOM and discarded when `if`
       * becomes false and re-created and added back to the DOM when `if`
       * becomes true.  By default, stamped elements will be hidden but left
       * in the DOM when `if` becomes false, which is generally results
       * in better performance.
       */restamp:{type:Boolean,observer:"__debounceRender"}}}constructor(){super();this.__renderDebouncer=null;this.__invalidProps=null;this.__instance=null;this._lastIf=!1;this.__ctor=null;this.__hideTemplateChildren__=!1}__debounceRender(){// Render is async for 2 reasons:
// 1. To eliminate dom creation trashing if user code thrashes `if` in the
//    same turn. This was more common in 1.x where a compound computed
//    property could result in the result changing multiple times, but is
//    mitigated to a large extent by batched property processing in 2.x.
// 2. To avoid double object propagation when a bag including values bound
//    to the `if` property as well as one or more hostProps could enqueue
//    the <dom-if> to flush before the <template>'s host property
//    forwarding. In that scenario creating an instance would result in
//    the host props being set once, and then the enqueued changes on the
//    template would set properties a second time, potentially causing an
//    object to be set to an instance more than once.  Creating the
//    instance async from flushing data ensures this doesn't happen. If
//    we wanted a sync option in the future, simply having <dom-if> flush
//    (or clear) its template's pending host properties before creating
//    the instance would also avoid the problem.
this.__renderDebouncer=Debouncer.debounce(this.__renderDebouncer,microTask,()=>this.__render());enqueueDebouncer(this.__renderDebouncer)}/**
     * @override
     * @return {void}
     */disconnectedCallback(){super.disconnectedCallback();const parent=wrap$1(this).parentNode;if(!parent||parent.nodeType==Node.DOCUMENT_FRAGMENT_NODE&&!wrap$1(parent).host){this.__teardownInstance()}}/**
     * @override
     * @return {void}
     */connectedCallback(){super.connectedCallback();if(!hideElementsGlobally()){this.style.display="none"}if(this.if){this.__debounceRender()}}/**
     * Forces the element to render its content. Normally rendering is
     * asynchronous to a provoking change. This is done for efficiency so
     * that multiple changes trigger only a single render. The render method
     * should be called if, for example, template rendering is required to
     * validate application state.
     * @return {void}
     */render(){flush$1()}__render(){if(this.if){if(!this.__ensureInstance()){// No template found yet
return}this._showHideChildren()}else if(this.restamp){this.__teardownInstance()}if(!this.restamp&&this.__instance){this._showHideChildren()}if(this.if!=this._lastIf){this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0}));this._lastIf=this.if}}__ensureInstance(){let parentNode=wrap$1(this).parentNode;// Guard against element being detached while render was queued
if(parentNode){if(!this.__ctor){let template=/** @type {HTMLTemplateElement} */wrap$1(this).querySelector("template");if(!template){// Wait until childList changes and template should be there by then
let observer=new MutationObserver(()=>{if(wrap$1(this).querySelector("template")){observer.disconnect();this.__render()}else{throw new Error("dom-if requires a <template> child")}});observer.observe(this,{childList:!0});return!1}this.__ctor=templatize(template,this,{// dom-if templatizer instances require `mutable: true`, as
// `__syncHostProperties` relies on that behavior to sync objects
mutableData:!0,/**
           * @param {string} prop Property to forward
           * @param {*} value Value of property
           * @this {DomIf}
           */forwardHostProp:function(prop,value){if(this.__instance){if(this.if){this.__instance.forwardHostProp(prop,value)}else{// If we have an instance but are squelching host property
// forwarding due to if being false, note the invalidated
// properties so `__syncHostProperties` can sync them the next
// time `if` becomes true
this.__invalidProps=this.__invalidProps||Object.create(null);this.__invalidProps[root(prop)]=!0}}}})}if(!this.__instance){this.__instance=new this.__ctor;wrap$1(parentNode).insertBefore(this.__instance.root,this)}else{this.__syncHostProperties();let c$=this.__instance.children;if(c$&&c$.length){// Detect case where dom-if was re-attached in new position
let lastChild=wrap$1(this).previousSibling;if(lastChild!==c$[c$.length-1]){for(let i=0,n;i<c$.length&&(n=c$[i]);i++){wrap$1(parentNode).insertBefore(n,this)}}}}}return!0}__syncHostProperties(){let props=this.__invalidProps;if(props){for(let prop in props){this.__instance._setPendingProperty(prop,this.__dataHost[prop])}this.__invalidProps=null;this.__instance._flushProperties()}}__teardownInstance(){if(this.__instance){let c$=this.__instance.children;if(c$&&c$.length){// use first child parent, for case when dom-if may have been detached
let parent=wrap$1(c$[0]).parentNode;// Instance children may be disconnected from parents when dom-if
// detaches if a tree was innerHTML'ed
if(parent){parent=wrap$1(parent);for(let i=0,n;i<c$.length&&(n=c$[i]);i++){parent.removeChild(n)}}}this.__instance=null;this.__invalidProps=null}}/**
     * Shows or hides the template instance top level child elements. For
     * text nodes, `textContent` is removed while "hidden" and replaced when
     * "shown."
     * @return {void}
     * @protected
     * @suppress {visibility}
     */_showHideChildren(){let hidden=this.__hideTemplateChildren__||!this.if;if(this.__instance){this.__instance._showHideChildren(hidden)}}}_exports.DomIf=DomIf;customElements.define(DomIf.is,DomIf);var domIf={DomIf:DomIf};_exports.$domIf=domIf;let ArraySelectorMixin=dedupingMixin(superClass=>{/**
   * @constructor
   * @implements {Polymer_ElementMixin}
   * @private
   */let elementBase=ElementMixin(superClass);/**
                                                  * @polymer
                                                  * @mixinClass
                                                  * @implements {Polymer_ArraySelectorMixin}
                                                  * @unrestricted
                                                  */class ArraySelectorMixin extends elementBase{static get properties(){return{/**
         * An array containing items from which selection will be made.
         */items:{type:Array},/**
         * When `true`, multiple items may be selected at once (in this case,
         * `selected` is an array of currently selected items).  When `false`,
         * only one item may be selected at a time.
         */multi:{type:Boolean,value:!1},/**
         * When `multi` is true, this is an array that contains any selected.
         * When `multi` is false, this is the currently selected item, or `null`
         * if no item is selected.
         * @type {?Object|?Array<!Object>}
         */selected:{type:Object,notify:!0},/**
         * When `multi` is false, this is the currently selected item, or `null`
         * if no item is selected.
         * @type {?Object}
         */selectedItem:{type:Object,notify:!0},/**
         * When `true`, calling `select` on an item that is already selected
         * will deselect the item.
         */toggle:{type:Boolean,value:!1}}}static get observers(){return["__updateSelection(multi, items.*)"]}constructor(){super();this.__lastItems=null;this.__lastMulti=null;this.__selectedMap=null}__updateSelection(multi,itemsInfo){let path=itemsInfo.path;if(path==JSCompiler_renameProperty("items",this)){// Case 1 - items array changed, so diff against previous array and
// deselect any removed items and adjust selected indices
let newItems=itemsInfo.base||[],lastItems=this.__lastItems,lastMulti=this.__lastMulti;if(multi!==lastMulti){this.clearSelection()}if(lastItems){let splices=calculateSplices(newItems,lastItems);this.__applySplices(splices)}this.__lastItems=newItems;this.__lastMulti=multi}else if(`${JSCompiler_renameProperty("items",this)}.splices`==itemsInfo.path){// Case 2 - got specific splice information describing the array mutation:
// deselect any removed items and adjust selected indices
this.__applySplices(itemsInfo.value.indexSplices)}else{// Case 3 - an array element was changed, so deselect the previous
// item for that index if it was previously selected
let part=path.slice(`${JSCompiler_renameProperty("items",this)}.`.length),idx=parseInt(part,10);if(0>part.indexOf(".")&&part==idx){this.__deselectChangedIdx(idx)}}}__applySplices(splices){let selected=this.__selectedMap;// Adjust selected indices and mark removals
for(let i=0,s;i<splices.length;i++){s=splices[i];selected.forEach((idx,item)=>{if(idx<s.index){// no change
}else if(idx>=s.index+s.removed.length){// adjust index
selected.set(item,idx+s.addedCount-s.removed.length)}else{// remove index
selected.set(item,-1)}});for(let j=0,idx;j<s.addedCount;j++){idx=s.index+j;if(selected.has(this.items[idx])){selected.set(this.items[idx],idx)}}}// Update linked paths
this.__updateLinks();// Remove selected items that were removed from the items array
let sidx=0;selected.forEach((idx,item)=>{if(0>idx){if(this.multi){this.splice(JSCompiler_renameProperty("selected",this),sidx,1)}else{this.selected=this.selectedItem=null}selected.delete(item)}else{sidx++}})}__updateLinks(){this.__dataLinkedPaths={};if(this.multi){let sidx=0;this.__selectedMap.forEach(idx=>{if(0<=idx){this.linkPaths(`${JSCompiler_renameProperty("items",this)}.${idx}`,`${JSCompiler_renameProperty("selected",this)}.${sidx++}`)}})}else{this.__selectedMap.forEach(idx=>{this.linkPaths(JSCompiler_renameProperty("selected",this),`${JSCompiler_renameProperty("items",this)}.${idx}`);this.linkPaths(JSCompiler_renameProperty("selectedItem",this),`${JSCompiler_renameProperty("items",this)}.${idx}`)})}}/**
       * Clears the selection state.
       * @override
       * @return {void}
       */clearSelection(){// Unbind previous selection
this.__dataLinkedPaths={};// The selected map stores 3 pieces of information:
// key: items array object
// value: items array index
// order: selected array index
this.__selectedMap=new Map;// Initialize selection
this.selected=this.multi?[]:null;this.selectedItem=null}/**
       * Returns whether the item is currently selected.
       *
       * @override
       * @param {*} item Item from `items` array to test
       * @return {boolean} Whether the item is selected
       */isSelected(item){return this.__selectedMap.has(item)}/**
       * Returns whether the item is currently selected.
       *
       * @override
       * @param {number} idx Index from `items` array to test
       * @return {boolean} Whether the item is selected
       */isIndexSelected(idx){return this.isSelected(this.items[idx])}__deselectChangedIdx(idx){let sidx=this.__selectedIndexForItemIndex(idx);if(0<=sidx){let i=0;this.__selectedMap.forEach((idx,item)=>{if(sidx==i++){this.deselect(item)}})}}__selectedIndexForItemIndex(idx){let selected=this.__dataLinkedPaths[`${JSCompiler_renameProperty("items",this)}.${idx}`];if(selected){return parseInt(selected.slice(`${JSCompiler_renameProperty("selected",this)}.`.length),10)}}/**
       * Deselects the given item if it is already selected.
       *
       * @override
       * @param {*} item Item from `items` array to deselect
       * @return {void}
       */deselect(item){let idx=this.__selectedMap.get(item);if(0<=idx){this.__selectedMap.delete(item);let sidx;if(this.multi){sidx=this.__selectedIndexForItemIndex(idx)}this.__updateLinks();if(this.multi){this.splice(JSCompiler_renameProperty("selected",this),sidx,1)}else{this.selected=this.selectedItem=null}}}/**
       * Deselects the given index if it is already selected.
       *
       * @override
       * @param {number} idx Index from `items` array to deselect
       * @return {void}
       */deselectIndex(idx){this.deselect(this.items[idx])}/**
       * Selects the given item.  When `toggle` is true, this will automatically
       * deselect the item if already selected.
       *
       * @override
       * @param {*} item Item from `items` array to select
       * @return {void}
       */select(item){this.selectIndex(this.items.indexOf(item))}/**
       * Selects the given index.  When `toggle` is true, this will automatically
       * deselect the item if already selected.
       *
       * @override
       * @param {number} idx Index from `items` array to select
       * @return {void}
       */selectIndex(idx){let item=this.items[idx];if(!this.isSelected(item)){if(!this.multi){this.__selectedMap.clear()}this.__selectedMap.set(item,idx);this.__updateLinks();if(this.multi){this.push(JSCompiler_renameProperty("selected",this),item)}else{this.selected=this.selectedItem=item}}else if(this.toggle){this.deselectIndex(idx)}}}return ArraySelectorMixin});// export mixin
_exports.ArraySelectorMixin=ArraySelectorMixin;let baseArraySelector=ArraySelectorMixin(PolymerElement);/**
                                                             * Element implementing the `ArraySelector` mixin, which records
                                                             * dynamic associations between item paths in a master `items` array and a
                                                             * `selected` array such that path changes to the master array (at the host)
                                                             * element or elsewhere via data-binding) are correctly propagated to items
                                                             * in the selected array and vice-versa.
                                                             *
                                                             * The `items` property accepts an array of user data, and via the
                                                             * `select(item)` and `deselect(item)` API, updates the `selected` property
                                                             * which may be bound to other parts of the application, and any changes to
                                                             * sub-fields of `selected` item(s) will be kept in sync with items in the
                                                             * `items` array.  When `multi` is false, `selected` is a property
                                                             * representing the last selected item.  When `multi` is true, `selected`
                                                             * is an array of multiply selected items.
                                                             *
                                                             * Example:
                                                             *
                                                             * ```js
                                                             * import {PolymerElement} from '@polymer/polymer';
                                                             * import '@polymer/polymer/lib/elements/array-selector.js';
                                                             *
                                                             * class EmployeeList extends PolymerElement {
                                                             *   static get _template() {
                                                             *     return html`
                                                             *         <div> Employee list: </div>
                                                             *         <dom-repeat id="employeeList" items="{{employees}}">
                                                             *           <template>
                                                             *             <div>First name: <span>{{item.first}}</span></div>
                                                             *               <div>Last name: <span>{{item.last}}</span></div>
                                                             *               <button on-click="toggleSelection">Select</button>
                                                             *           </template>
                                                             *         </dom-repeat>
                                                             *
                                                             *         <array-selector id="selector"
                                                             *                         items="{{employees}}"
                                                             *                         selected="{{selected}}"
                                                             *                         multi toggle></array-selector>
                                                             *
                                                             *         <div> Selected employees: </div>
                                                             *         <dom-repeat items="{{selected}}">
                                                             *           <template>
                                                             *             <div>First name: <span>{{item.first}}</span></div>
                                                             *             <div>Last name: <span>{{item.last}}</span></div>
                                                             *           </template>
                                                             *         </dom-repeat>`;
                                                             *   }
                                                             *   static get is() { return 'employee-list'; }
                                                             *   static get properties() {
                                                             *     return {
                                                             *       employees: {
                                                             *         value() {
                                                             *           return [
                                                             *             {first: 'Bob', last: 'Smith'},
                                                             *             {first: 'Sally', last: 'Johnson'},
                                                             *             ...
                                                             *           ];
                                                             *         }
                                                             *       }
                                                             *     };
                                                             *   }
                                                             *   toggleSelection(e) {
                                                             *     const item = this.$.employeeList.itemForElement(e.target);
                                                             *     this.$.selector.select(item);
                                                             *   }
                                                             * }
                                                             * ```
                                                             *
                                                             * @polymer
                                                             * @customElement
                                                             * @extends {baseArraySelector}
                                                             * @appliesMixin ArraySelectorMixin
                                                             * @summary Custom element that links paths between an input `items` array and
                                                             *   an output `selected` item or array based on calls to its selection API.
                                                             */class ArraySelector extends baseArraySelector{// Not needed to find template; can be removed once the analyzer
// can find the tag name from customElements.define call
static get is(){return"array-selector"}static get template(){return null}}_exports.ArraySelector=ArraySelector;customElements.define(ArraySelector.is,ArraySelector);var arraySelector={ArraySelectorMixin:ArraySelectorMixin,ArraySelector:ArraySelector};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$arraySelector=arraySelector;"use strict";const customStyleInterface$1=new CustomStyleInterface;if(!window.ShadyCSS){window.ShadyCSS={/**
     * @param {!HTMLTemplateElement} template
     * @param {string} elementName
     * @param {string=} elementExtends
     */prepareTemplate(template,elementName,elementExtends){},// eslint-disable-line no-unused-vars
/**
     * @param {!HTMLTemplateElement} template
     * @param {string} elementName
     */prepareTemplateDom(template,elementName){},// eslint-disable-line no-unused-vars
/**
     * @param {!HTMLTemplateElement} template
     * @param {string} elementName
     * @param {string=} elementExtends
     */prepareTemplateStyles(template,elementName,elementExtends){},// eslint-disable-line no-unused-vars
/**
     * @param {Element} element
     * @param {Object=} properties
     */styleSubtree(element,properties){customStyleInterface$1.processStyles();updateNativeProperties(element,properties)},/**
     * @param {Element} element
     */styleElement(element){// eslint-disable-line no-unused-vars
customStyleInterface$1.processStyles()},/**
     * @param {Object=} properties
     */styleDocument(properties){customStyleInterface$1.processStyles();updateNativeProperties(document.body,properties)},/**
     * @param {Element} element
     * @param {string} property
     * @return {string}
     */getComputedStyleValue(element,property){return getComputedStyleValue(element,property)},flushCustomStyles(){},nativeCss:nativeCssVariables,nativeShadow:nativeShadow,cssBuild:cssBuild,disableRuntime:disableRuntime}}window.ShadyCSS.CustomStyleInterface=customStyleInterface$1;const attr="include",CustomStyleInterface$1=window.ShadyCSS.CustomStyleInterface;/**
                                                                     * Custom element for defining styles in the main document that can take
                                                                     * advantage of [shady DOM](https://github.com/webcomponents/shadycss) shims
                                                                     * for style encapsulation, custom properties, and custom mixins.
                                                                     *
                                                                     * - Document styles defined in a `<custom-style>` are shimmed to ensure they
                                                                     *   do not leak into local DOM when running on browsers without native
                                                                     *   Shadow DOM.
                                                                     * - Custom properties can be defined in a `<custom-style>`. Use the `html` selector
                                                                     *   to define custom properties that apply to all custom elements.
                                                                     * - Custom mixins can be defined in a `<custom-style>`, if you import the optional
                                                                     *   [apply shim](https://github.com/webcomponents/shadycss#about-applyshim)
                                                                     *   (`shadycss/apply-shim.html`).
                                                                     *
                                                                     * To use:
                                                                     *
                                                                     * - Import `custom-style.html`.
                                                                     * - Place a `<custom-style>` element in the main document, wrapping an inline `<style>` tag that
                                                                     *   contains the CSS rules you want to shim.
                                                                     *
                                                                     * For example:
                                                                     *
                                                                     * ```html
                                                                     * <!-- import apply shim--only required if using mixins -->
                                                                     * <link rel="import" href="bower_components/shadycss/apply-shim.html">
                                                                     * <!-- import custom-style element -->
                                                                     * <link rel="import" href="bower_components/polymer/lib/elements/custom-style.html">
                                                                     *
                                                                     * <custom-style>
                                                                     *   <style>
                                                                     *     html {
                                                                     *       --custom-color: blue;
                                                                     *       --custom-mixin: {
                                                                     *         font-weight: bold;
                                                                     *         color: red;
                                                                     *       };
                                                                     *     }
                                                                     *   </style>
                                                                     * </custom-style>
                                                                     * ```
                                                                     *
                                                                     * @customElement
                                                                     * @extends HTMLElement
                                                                     * @summary Custom element for defining styles in the main document that can
                                                                     *   take advantage of Polymer's style scoping and custom properties shims.
                                                                     */class CustomStyle extends HTMLElement{constructor(){super();this._style=null;CustomStyleInterface$1.addCustomStyle(this)}/**
     * Returns the light-DOM `<style>` child this element wraps.  Upon first
     * call any style modules referenced via the `include` attribute will be
     * concatenated to this element's `<style>`.
     *
     * @export
     * @return {HTMLStyleElement} This element's light-DOM `<style>`
     */getStyle(){if(this._style){return this._style}const style=/** @type {HTMLStyleElement} */this.querySelector("style");if(!style){return null}this._style=style;const include=style.getAttribute(attr);if(include){style.removeAttribute(attr);/** @suppress {deprecated} */style.textContent=cssFromModules(include)+style.textContent}/*
      HTML Imports styling the main document are deprecated in Chrome
      https://crbug.com/523952
       If this element is not in the main document, then it must be in an HTML Import document.
      In that case, move the custom style to the main document.
       The ordering of `<custom-style>` should stay the same as when loaded by HTML Imports, but there may be odd
      cases of ordering w.r.t the main document styles.
      */if(this.ownerDocument!==window.document){window.document.head.appendChild(this)}return this._style}}_exports.CustomStyle=CustomStyle;window.customElements.define("custom-style",CustomStyle);var customStyle={CustomStyle:CustomStyle};_exports.$customStyle=customStyle;let mutablePropertyChange$1;/** @suppress {missingProperties} */(()=>{mutablePropertyChange$1=MutableData._mutablePropertyChange})();/**
       * Legacy element behavior to skip strict dirty-checking for objects and arrays,
       * (always consider them to be "dirty") for use on legacy API Polymer elements.
       *
       * By default, `Polymer.PropertyEffects` performs strict dirty checking on
       * objects, which means that any deep modifications to an object or array will
       * not be propagated unless "immutable" data patterns are used (i.e. all object
       * references from the root to the mutation were changed).
       *
       * Polymer also provides a proprietary data mutation and path notification API
       * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient
       * mutation and notification of deep changes in an object graph to all elements
       * bound to the same object graph.
       *
       * In cases where neither immutable patterns nor the data mutation API can be
       * used, applying this mixin will cause Polymer to skip dirty checking for
       * objects and arrays (always consider them to be "dirty").  This allows a
       * user to make a deep modification to a bound object graph, and then either
       * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`
       * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all
       * elements that wish to be updated based on deep mutations must apply this
       * mixin or otherwise skip strict dirty checking for objects/arrays.
       * Specifically, any elements in the binding tree between the source of a
       * mutation and the consumption of it must apply this behavior or enable the
       * `Polymer.OptionalMutableDataBehavior`.
       *
       * In order to make the dirty check strategy configurable, see
       * `Polymer.OptionalMutableDataBehavior`.
       *
       * Note, the performance characteristics of propagating large object graphs
       * will be worse as opposed to using strict dirty checking with immutable
       * patterns or Polymer's path notification API.
       *
       * @polymerBehavior
       * @summary Behavior to skip strict dirty-checking for objects and
       *   arrays
       */const MutableDataBehavior={/**
   * Overrides `Polymer.PropertyEffects` to provide option for skipping
   * strict equality checking for Objects and Arrays.
   *
   * This method pulls the value to dirty check against from the `__dataTemp`
   * cache (rather than the normal `__data` cache) for Objects.  Since the temp
   * cache is cleared at the end of a turn, this implementation allows
   * side-effects of deep object changes to be processed by re-setting the
   * same object (using the temp cache as an in-turn backstop to prevent
   * cycles due to 2-way notification).
   *
   * @param {string} property Property name
   * @param {*} value New property value
   * @param {*} old Previous property value
   * @return {boolean} Whether the property should be considered a change
   * @protected
   * @override
   */_shouldPropertyChange(property,value,old){return mutablePropertyChange$1(this,property,value,old,!0)}};/**
    * Legacy element behavior to add the optional ability to skip strict
    * dirty-checking for objects and arrays (always consider them to be
    * "dirty") by setting a `mutable-data` attribute on an element instance.
    *
    * By default, `Polymer.PropertyEffects` performs strict dirty checking on
    * objects, which means that any deep modifications to an object or array will
    * not be propagated unless "immutable" data patterns are used (i.e. all object
    * references from the root to the mutation were changed).
    *
    * Polymer also provides a proprietary data mutation and path notification API
    * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient
    * mutation and notification of deep changes in an object graph to all elements
    * bound to the same object graph.
    *
    * In cases where neither immutable patterns nor the data mutation API can be
    * used, applying this mixin will allow Polymer to skip dirty checking for
    * objects and arrays (always consider them to be "dirty").  This allows a
    * user to make a deep modification to a bound object graph, and then either
    * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`
    * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all
    * elements that wish to be updated based on deep mutations must apply this
    * mixin or otherwise skip strict dirty checking for objects/arrays.
    * Specifically, any elements in the binding tree between the source of a
    * mutation and the consumption of it must enable this behavior or apply the
    * `Polymer.OptionalMutableDataBehavior`.
    *
    * While this behavior adds the ability to forgo Object/Array dirty checking,
    * the `mutableData` flag defaults to false and must be set on the instance.
    *
    * Note, the performance characteristics of propagating large object graphs
    * will be worse by relying on `mutableData: true` as opposed to using
    * strict dirty checking with immutable patterns or Polymer's path notification
    * API.
    *
    * @polymerBehavior
    * @summary Behavior to optionally skip strict dirty-checking for objects and
    *   arrays
    */_exports.MutableDataBehavior=MutableDataBehavior;const OptionalMutableDataBehavior={properties:{/**
     * Instance-level flag for configuring the dirty-checking strategy
     * for this element.  When true, Objects and Arrays will skip dirty
     * checking, otherwise strict equality checking will be used.
     */mutableData:Boolean},/**
   * Overrides `Polymer.PropertyEffects` to skip strict equality checking
   * for Objects and Arrays.
   *
   * Pulls the value to dirty check against from the `__dataTemp` cache
   * (rather than the normal `__data` cache) for Objects.  Since the temp
   * cache is cleared at the end of a turn, this implementation allows
   * side-effects of deep object changes to be processed by re-setting the
   * same object (using the temp cache as an in-turn backstop to prevent
   * cycles due to 2-way notification).
   *
   * @param {string} property Property name
   * @param {*} value New property value
   * @param {*} old Previous property value
   * @return {boolean} Whether the property should be considered a change
   * @protected
   * @override
   */_shouldPropertyChange(property,value,old){return mutablePropertyChange$1(this,property,value,old,this.mutableData)}};_exports.OptionalMutableDataBehavior=OptionalMutableDataBehavior;var mutableDataBehavior={MutableDataBehavior:MutableDataBehavior,OptionalMutableDataBehavior:OptionalMutableDataBehavior};_exports.$mutableDataBehavior=mutableDataBehavior;const Base=LegacyElementMixin(HTMLElement).prototype;_exports.Base=Base;var polymerLegacy={Base:Base,Polymer:Polymer,html:html};_exports.$polymerLegacy=polymerLegacy;const template=html`
<custom-style>
  <style is="custom-style">
    [hidden] {
      display: none !important;
    }
  </style>
</custom-style>
<custom-style>
  <style is="custom-style">
    html {

      --layout: {
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
      };

      --layout-inline: {
        display: -ms-inline-flexbox;
        display: -webkit-inline-flex;
        display: inline-flex;
      };

      --layout-horizontal: {
        @apply --layout;

        -ms-flex-direction: row;
        -webkit-flex-direction: row;
        flex-direction: row;
      };

      --layout-horizontal-reverse: {
        @apply --layout;

        -ms-flex-direction: row-reverse;
        -webkit-flex-direction: row-reverse;
        flex-direction: row-reverse;
      };

      --layout-vertical: {
        @apply --layout;

        -ms-flex-direction: column;
        -webkit-flex-direction: column;
        flex-direction: column;
      };

      --layout-vertical-reverse: {
        @apply --layout;

        -ms-flex-direction: column-reverse;
        -webkit-flex-direction: column-reverse;
        flex-direction: column-reverse;
      };

      --layout-wrap: {
        -ms-flex-wrap: wrap;
        -webkit-flex-wrap: wrap;
        flex-wrap: wrap;
      };

      --layout-wrap-reverse: {
        -ms-flex-wrap: wrap-reverse;
        -webkit-flex-wrap: wrap-reverse;
        flex-wrap: wrap-reverse;
      };

      --layout-flex-auto: {
        -ms-flex: 1 1 auto;
        -webkit-flex: 1 1 auto;
        flex: 1 1 auto;
      };

      --layout-flex-none: {
        -ms-flex: none;
        -webkit-flex: none;
        flex: none;
      };

      --layout-flex: {
        -ms-flex: 1 1 0.000000001px;
        -webkit-flex: 1;
        flex: 1;
        -webkit-flex-basis: 0.000000001px;
        flex-basis: 0.000000001px;
      };

      --layout-flex-2: {
        -ms-flex: 2;
        -webkit-flex: 2;
        flex: 2;
      };

      --layout-flex-3: {
        -ms-flex: 3;
        -webkit-flex: 3;
        flex: 3;
      };

      --layout-flex-4: {
        -ms-flex: 4;
        -webkit-flex: 4;
        flex: 4;
      };

      --layout-flex-5: {
        -ms-flex: 5;
        -webkit-flex: 5;
        flex: 5;
      };

      --layout-flex-6: {
        -ms-flex: 6;
        -webkit-flex: 6;
        flex: 6;
      };

      --layout-flex-7: {
        -ms-flex: 7;
        -webkit-flex: 7;
        flex: 7;
      };

      --layout-flex-8: {
        -ms-flex: 8;
        -webkit-flex: 8;
        flex: 8;
      };

      --layout-flex-9: {
        -ms-flex: 9;
        -webkit-flex: 9;
        flex: 9;
      };

      --layout-flex-10: {
        -ms-flex: 10;
        -webkit-flex: 10;
        flex: 10;
      };

      --layout-flex-11: {
        -ms-flex: 11;
        -webkit-flex: 11;
        flex: 11;
      };

      --layout-flex-12: {
        -ms-flex: 12;
        -webkit-flex: 12;
        flex: 12;
      };

      /* alignment in cross axis */

      --layout-start: {
        -ms-flex-align: start;
        -webkit-align-items: flex-start;
        align-items: flex-start;
      };

      --layout-center: {
        -ms-flex-align: center;
        -webkit-align-items: center;
        align-items: center;
      };

      --layout-end: {
        -ms-flex-align: end;
        -webkit-align-items: flex-end;
        align-items: flex-end;
      };

      --layout-baseline: {
        -ms-flex-align: baseline;
        -webkit-align-items: baseline;
        align-items: baseline;
      };

      /* alignment in main axis */

      --layout-start-justified: {
        -ms-flex-pack: start;
        -webkit-justify-content: flex-start;
        justify-content: flex-start;
      };

      --layout-center-justified: {
        -ms-flex-pack: center;
        -webkit-justify-content: center;
        justify-content: center;
      };

      --layout-end-justified: {
        -ms-flex-pack: end;
        -webkit-justify-content: flex-end;
        justify-content: flex-end;
      };

      --layout-around-justified: {
        -ms-flex-pack: distribute;
        -webkit-justify-content: space-around;
        justify-content: space-around;
      };

      --layout-justified: {
        -ms-flex-pack: justify;
        -webkit-justify-content: space-between;
        justify-content: space-between;
      };

      --layout-center-center: {
        @apply --layout-center;
        @apply --layout-center-justified;
      };

      /* self alignment */

      --layout-self-start: {
        -ms-align-self: flex-start;
        -webkit-align-self: flex-start;
        align-self: flex-start;
      };

      --layout-self-center: {
        -ms-align-self: center;
        -webkit-align-self: center;
        align-self: center;
      };

      --layout-self-end: {
        -ms-align-self: flex-end;
        -webkit-align-self: flex-end;
        align-self: flex-end;
      };

      --layout-self-stretch: {
        -ms-align-self: stretch;
        -webkit-align-self: stretch;
        align-self: stretch;
      };

      --layout-self-baseline: {
        -ms-align-self: baseline;
        -webkit-align-self: baseline;
        align-self: baseline;
      };

      /* multi-line alignment in main axis */

      --layout-start-aligned: {
        -ms-flex-line-pack: start;  /* IE10 */
        -ms-align-content: flex-start;
        -webkit-align-content: flex-start;
        align-content: flex-start;
      };

      --layout-end-aligned: {
        -ms-flex-line-pack: end;  /* IE10 */
        -ms-align-content: flex-end;
        -webkit-align-content: flex-end;
        align-content: flex-end;
      };

      --layout-center-aligned: {
        -ms-flex-line-pack: center;  /* IE10 */
        -ms-align-content: center;
        -webkit-align-content: center;
        align-content: center;
      };

      --layout-between-aligned: {
        -ms-flex-line-pack: justify;  /* IE10 */
        -ms-align-content: space-between;
        -webkit-align-content: space-between;
        align-content: space-between;
      };

      --layout-around-aligned: {
        -ms-flex-line-pack: distribute;  /* IE10 */
        -ms-align-content: space-around;
        -webkit-align-content: space-around;
        align-content: space-around;
      };

      /*******************************
                Other Layout
      *******************************/

      --layout-block: {
        display: block;
      };

      --layout-invisible: {
        visibility: hidden !important;
      };

      --layout-relative: {
        position: relative;
      };

      --layout-fit: {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
      };

      --layout-scroll: {
        -webkit-overflow-scrolling: touch;
        overflow: auto;
      };

      --layout-fullbleed: {
        margin: 0;
        height: 100vh;
      };

      /* fixed position */

      --layout-fixed-top: {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
      };

      --layout-fixed-right: {
        position: fixed;
        top: 0;
        right: 0;
        bottom: 0;
      };

      --layout-fixed-bottom: {
        position: fixed;
        right: 0;
        bottom: 0;
        left: 0;
      };

      --layout-fixed-left: {
        position: fixed;
        top: 0;
        bottom: 0;
        left: 0;
      };

    }
  </style>
</custom-style>`;template.setAttribute("style","display: none;");document.head.appendChild(template.content);var style=document.createElement("style");style.textContent="[hidden] { display: none !important; }";document.head.appendChild(style);Polymer({/** @override */_template:html`
    <style>
      :host {
        position: fixed;
        top: -120px;
        right: 0;
        bottom: -120px;
        left: 0;

        visibility: hidden;

        transition-property: visibility;
      }

      :host([opened]) {
        visibility: visible;
      }

      :host([persistent]) {
        width: var(--app-drawer-width, 256px);
      }

      :host([persistent][position=left]) {
        right: auto;
      }

      :host([persistent][position=right]) {
        left: auto;
      }

      #contentContainer {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;

        width: var(--app-drawer-width, 256px);
        padding: var(--app-drawer-content-padding, 120px 0);

        transition-property: -webkit-transform;
        transition-property: transform;
        -webkit-transform: translate3d(-100%, 0, 0);
        transform: translate3d(-100%, 0, 0);

        background-color: #FFF;

        @apply --app-drawer-content-container;
      }

      #contentContainer[persistent] {
        width: 100%;
      }

      #contentContainer[position=right] {
        right: 0;
        left: auto;

        -webkit-transform: translate3d(100%, 0, 0);
        transform: translate3d(100%, 0, 0);
      }

      #contentContainer[swipe-open]::after {
        position: fixed;
        top: 0;
        bottom: 0;
        left: 100%;

        visibility: visible;

        width: 20px;

        content: '';
      }

      #contentContainer[swipe-open][position=right]::after {
        right: 100%;
        left: auto;
      }

      #contentContainer[opened] {
        -webkit-transform: translate3d(0, 0, 0);
        transform: translate3d(0, 0, 0);
      }

      #scrim {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;

        transition-property: opacity;
        -webkit-transform: translateZ(0);
        transform:  translateZ(0);

        opacity: 0;
        background: var(--app-drawer-scrim-background, rgba(0, 0, 0, 0.5));
      }

      #scrim.visible {
        opacity: 1;
      }

      :host([no-transition]) #contentContainer {
        transition-property: none;
      }
    </style>

    <div id="scrim" on-click="close"></div>

    <!-- HACK(keanulee): Bind attributes here (in addition to :host) for styling to workaround Safari
    bug. https://bugs.webkit.org/show_bug.cgi?id=170762 -->
    <div id="contentContainer" opened\$="[[opened]]" persistent\$="[[persistent]]" position\$="[[position]]" swipe-open\$="[[swipeOpen]]">
      <slot></slot>
    </div>
`,is:"app-drawer",properties:{/**
     * The opened state of the drawer.
     */opened:{type:Boolean,value:!1,notify:!0,reflectToAttribute:!0},/**
     * The drawer does not have a scrim and cannot be swiped close.
     */persistent:{type:Boolean,value:!1,reflectToAttribute:!0},/**
     * The transition duration of the drawer in milliseconds.
     */transitionDuration:{type:Number,value:200},/**
     * The alignment of the drawer on the screen ('left', 'right', 'start' or
     * 'end'). 'start' computes to left and 'end' to right in LTR layout and
     * vice versa in RTL layout.
     */align:{type:String,value:"left"},/**
     * The computed, read-only position of the drawer on the screen ('left' or
     * 'right').
     */position:{type:String,readOnly:!0,reflectToAttribute:!0},/**
     * Create an area at the edge of the screen to swipe open the drawer.
     */swipeOpen:{type:Boolean,value:!1,reflectToAttribute:!0},/**
     * Trap keyboard focus when the drawer is opened and not persistent.
     */noFocusTrap:{type:Boolean,value:!1},/**
     * Disables swiping on the drawer.
     */disableSwipe:{type:Boolean,value:!1}},observers:["resetLayout(position, isAttached)","_resetPosition(align, isAttached)","_styleTransitionDuration(transitionDuration)","_openedPersistentChanged(opened, persistent)"],_translateOffset:0,_trackDetails:null,_drawerState:0,_boundEscKeydownHandler:null,_firstTabStop:null,_lastTabStop:null,/** @override */attached:function(){afterNextRender(this,function(){this._boundEscKeydownHandler=this._escKeydownHandler.bind(this);this.addEventListener("keydown",this._tabKeydownHandler.bind(this));// Only listen for horizontal track so you can vertically scroll
// inside the drawer.
this.listen(this,"track","_track");this.setScrollDirection("y")});this.fire("app-reset-layout")},/** @override */detached:function(){document.removeEventListener("keydown",this._boundEscKeydownHandler)},/**
   * Opens the drawer.
   */open:function(){this.opened=!0},/**
   * Closes the drawer.
   */close:function(){this.opened=!1},/**
   * Toggles the drawer open and close.
   */toggle:function(){this.opened=!this.opened},/**
   * Gets the width of the drawer.
   *
   * @return {number} The width of the drawer in pixels.
   */getWidth:function(){return this._savedWidth||this.$.contentContainer.offsetWidth},_isRTL:function(){return"rtl"===window.getComputedStyle(this).direction},_resetPosition:function(){switch(this.align){case"start":this._setPosition(this._isRTL()?"right":"left");return;case"end":this._setPosition(this._isRTL()?"left":"right");return;}this._setPosition(this.align)},_escKeydownHandler:function(event){var ESC_KEYCODE=27;if(event.keyCode===ESC_KEYCODE){// Prevent any side effects if app-drawer closes.
event.preventDefault();this.close()}},_track:function(event){if(this.persistent||this.disableSwipe){return}// Disable user selection on desktop.
event.preventDefault();switch(event.detail.state){case"start":this._trackStart(event);break;case"track":this._trackMove(event);break;case"end":this._trackEnd(event);break;}},_trackStart:function(event){this._drawerState=this._DRAWER_STATE.TRACKING;var rect=this.$.contentContainer.getBoundingClientRect();this._savedWidth=rect.width;if("left"===this.position){this._translateOffset=rect.left}else{this._translateOffset=rect.right-window.innerWidth}this._trackDetails=[];// Disable transitions since style attributes will reflect user track
// events.
this._styleTransitionDuration(0);this.style.visibility="visible"},_trackMove:function(event){this._translateDrawer(event.detail.dx+this._translateOffset);// Use Date.now() since event.timeStamp is inconsistent across browsers
// (e.g. most browsers use milliseconds but FF 44 uses microseconds).
this._trackDetails.push({dx:event.detail.dx,timeStamp:Date.now()})},_trackEnd:function(event){var x=event.detail.dx+this._translateOffset,drawerWidth=this.getWidth(),isPositionLeft="left"===this.position,isInEndState=isPositionLeft?0<=x||x<=-drawerWidth:0>=x||x>=drawerWidth;if(!isInEndState){// No longer need the track events after this method returns - allow them
// to be GC'd.
var trackDetails=this._trackDetails;this._trackDetails=null;this._flingDrawer(event,trackDetails);if(this._drawerState===this._DRAWER_STATE.FLINGING){return}}// If the drawer is not flinging, toggle the opened state based on the
// position of the drawer.
var halfWidth=drawerWidth/2;if(event.detail.dx<-halfWidth){this.opened="right"===this.position}else if(event.detail.dx>halfWidth){this.opened="left"===this.position}if(isInEndState){this.debounce("_resetDrawerState",this._resetDrawerState)}else{this.debounce("_resetDrawerState",this._resetDrawerState,this.transitionDuration)}this._styleTransitionDuration(this.transitionDuration);this._resetDrawerTranslate();this.style.visibility=""},_calculateVelocity:function(event,trackDetails){// Find the oldest track event that is within 100ms using binary search.
var now=Date.now(),timeLowerBound=now-100,trackDetail,min=0,max=trackDetails.length-1;while(min<=max){// Floor of average of min and max.
var mid=min+max>>1,d=trackDetails[mid];if(d.timeStamp>=timeLowerBound){trackDetail=d;max=mid-1}else{min=mid+1}}if(trackDetail){var dx=event.detail.dx-trackDetail.dx,dt=now-trackDetail.timeStamp||1;return dx/dt}return 0},_flingDrawer:function(event,trackDetails){var velocity=this._calculateVelocity(event,trackDetails);// Do not fling if velocity is not above a threshold.
if(Math.abs(velocity)<this._MIN_FLING_THRESHOLD){return}this._drawerState=this._DRAWER_STATE.FLINGING;var x=event.detail.dx+this._translateOffset,drawerWidth=this.getWidth(),isPositionLeft="left"===this.position,isVelocityPositive=0<velocity,isClosingLeft=!isVelocityPositive&&isPositionLeft,isClosingRight=isVelocityPositive&&!isPositionLeft,dx;if(isClosingLeft){dx=-(x+drawerWidth)}else if(isClosingRight){dx=drawerWidth-x}else{dx=-x}// Enforce a minimum transition velocity to make the drawer feel snappy.
if(isVelocityPositive){velocity=Math.max(velocity,this._MIN_TRANSITION_VELOCITY);this.opened="left"===this.position}else{velocity=Math.min(velocity,-this._MIN_TRANSITION_VELOCITY);this.opened="right"===this.position}// Calculate the amount of time needed to finish the transition based on the
// initial slope of the timing function.
var t=this._FLING_INITIAL_SLOPE*dx/velocity;this._styleTransitionDuration(t);this._styleTransitionTimingFunction(this._FLING_TIMING_FUNCTION);this._resetDrawerTranslate();this.debounce("_resetDrawerState",this._resetDrawerState,t)},_styleTransitionDuration:function(duration){this.style.transitionDuration=duration+"ms";this.$.contentContainer.style.transitionDuration=duration+"ms";this.$.scrim.style.transitionDuration=duration+"ms"},_styleTransitionTimingFunction:function(timingFunction){this.$.contentContainer.style.transitionTimingFunction=timingFunction;this.$.scrim.style.transitionTimingFunction=timingFunction},_translateDrawer:function(x){var drawerWidth=this.getWidth();if("left"===this.position){x=Math.max(-drawerWidth,Math.min(x,0));this.$.scrim.style.opacity=1+x/drawerWidth}else{x=Math.max(0,Math.min(x,drawerWidth));this.$.scrim.style.opacity=1-x/drawerWidth}this.translate3d(x+"px","0","0",this.$.contentContainer)},_resetDrawerTranslate:function(){this.$.scrim.style.opacity="";this.transform("",this.$.contentContainer)},_resetDrawerState:function(){var oldState=this._drawerState;// If the drawer was flinging, we need to reset the style attributes.
if(oldState===this._DRAWER_STATE.FLINGING){this._styleTransitionDuration(this.transitionDuration);this._styleTransitionTimingFunction("");this.style.visibility=""}this._savedWidth=null;if(this.opened){this._drawerState=this.persistent?this._DRAWER_STATE.OPENED_PERSISTENT:this._DRAWER_STATE.OPENED}else{this._drawerState=this._DRAWER_STATE.CLOSED}if(oldState!==this._drawerState){if(this._drawerState===this._DRAWER_STATE.OPENED){this._setKeyboardFocusTrap();document.addEventListener("keydown",this._boundEscKeydownHandler);document.body.style.overflow="hidden"}else{document.removeEventListener("keydown",this._boundEscKeydownHandler);document.body.style.overflow=""}// Don't fire the event on initial load.
if(oldState!==this._DRAWER_STATE.INIT){this.fire("app-drawer-transitioned")}}},/**
   * Resets the layout.
   *
   * @method resetLayout
   */resetLayout:function(){this.fire("app-reset-layout")},_setKeyboardFocusTrap:function(){if(this.noFocusTrap){return}// NOTE: Unless we use /deep/ (which we shouldn't since it's deprecated),
// this will not select focusable elements inside shadow roots.
var focusableElementsSelector=["a[href]:not([tabindex=\"-1\"])","area[href]:not([tabindex=\"-1\"])","input:not([disabled]):not([tabindex=\"-1\"])","select:not([disabled]):not([tabindex=\"-1\"])","textarea:not([disabled]):not([tabindex=\"-1\"])","button:not([disabled]):not([tabindex=\"-1\"])","iframe:not([tabindex=\"-1\"])","[tabindex]:not([tabindex=\"-1\"])","[contentEditable=true]:not([tabindex=\"-1\"])"].join(","),focusableElements=dom(this).querySelectorAll(focusableElementsSelector);if(0<focusableElements.length){this._firstTabStop=focusableElements[0];this._lastTabStop=focusableElements[focusableElements.length-1]}else{// Reset saved tab stops when there are no focusable elements in the
// drawer.
this._firstTabStop=null;this._lastTabStop=null}// Focus on app-drawer if it has non-zero tabindex. Otherwise, focus the
// first focusable element in the drawer, if it exists. Use the tabindex
// attribute since the this.tabIndex property in IE/Edge returns 0 (instead
// of -1) when the attribute is not set.
var tabindex=this.getAttribute("tabindex");if(tabindex&&-1<parseInt(tabindex,10)){this.focus()}else if(this._firstTabStop){this._firstTabStop.focus()}},_tabKeydownHandler:function(event){if(this.noFocusTrap){return}var TAB_KEYCODE=9;if(this._drawerState===this._DRAWER_STATE.OPENED&&event.keyCode===TAB_KEYCODE){if(event.shiftKey){if(this._firstTabStop&&dom(event).localTarget===this._firstTabStop){event.preventDefault();this._lastTabStop.focus()}}else{if(this._lastTabStop&&dom(event).localTarget===this._lastTabStop){event.preventDefault();this._firstTabStop.focus()}}}},_openedPersistentChanged:function(opened,persistent){this.toggleClass("visible",opened&&!persistent,this.$.scrim);// Use a debounce timer instead of transitionend since transitionend won't
// fire when app-drawer is display: none.
this.debounce("_resetDrawerState",this._resetDrawerState,this.transitionDuration)},_MIN_FLING_THRESHOLD:.2,_MIN_TRANSITION_VELOCITY:1.2,_FLING_TIMING_FUNCTION:"cubic-bezier(0.667, 1, 0.667, 1)",_FLING_INITIAL_SLOPE:1.5,_DRAWER_STATE:{INIT:0,OPENED:1,OPENED_PERSISTENT:2,CLOSED:3,TRACKING:4,FLINGING:5/**
                 * Fired when the layout of app-drawer has changed.
                 *
                 * @event app-reset-layout
                 */ /**
                     * Fired when app-drawer has finished transitioning.
                     *
                     * @event app-drawer-transitioned
                     */}});var ORPHANS=new Set;/**
                          * `IronResizableBehavior` is a behavior that can be used in Polymer elements to
                          * coordinate the flow of resize events between "resizers" (elements that
                          *control the size or hidden state of their children) and "resizables" (elements
                          *that need to be notified when they are resized or un-hidden by their parents
                          *in order to take action on their new measurements).
                          *
                          * Elements that perform measurement should add the `IronResizableBehavior`
                          *behavior to their element definition and listen for the `iron-resize` event on
                          *themselves. This event will be fired when they become showing after having
                          *been hidden, when they are resized explicitly by another resizable, or when
                          *the window has been resized.
                          *
                          * Note, the `iron-resize` event is non-bubbling.
                          *
                          * @polymerBehavior
                          * @demo demo/index.html
                          **/const IronResizableBehavior={properties:{/**
     * The closest ancestor element that implements `IronResizableBehavior`.
     */_parentResizable:{type:Object,observer:"_parentResizableChanged"},/**
     * True if this element is currently notifying its descendant elements of
     * resize.
     */_notifyingDescendant:{type:Boolean,value:!1}},listeners:{"iron-request-resize-notifications":"_onIronRequestResizeNotifications"},created:function(){// We don't really need property effects on these, and also we want them
// to be created before the `_parentResizable` observer fires:
this._interestedResizables=[];this._boundNotifyResize=this.notifyResize.bind(this);this._boundOnDescendantIronResize=this._onDescendantIronResize.bind(this)},attached:function(){this._requestResizeNotifications()},detached:function(){if(this._parentResizable){this._parentResizable.stopResizeNotificationsFor(this)}else{ORPHANS.delete(this);window.removeEventListener("resize",this._boundNotifyResize)}this._parentResizable=null},/**
   * Can be called to manually notify a resizable and its descendant
   * resizables of a resize change.
   */notifyResize:function(){if(!this.isAttached){return}this._interestedResizables.forEach(function(resizable){if(this.resizerShouldNotify(resizable)){this._notifyDescendant(resizable)}},this);this._fireResize()},/**
   * Used to assign the closest resizable ancestor to this resizable
   * if the ancestor detects a request for notifications.
   */assignParentResizable:function(parentResizable){if(this._parentResizable){this._parentResizable.stopResizeNotificationsFor(this)}this._parentResizable=parentResizable;if(parentResizable&&-1===parentResizable._interestedResizables.indexOf(this)){parentResizable._interestedResizables.push(this);parentResizable._subscribeIronResize(this)}},/**
   * Used to remove a resizable descendant from the list of descendants
   * that should be notified of a resize change.
   */stopResizeNotificationsFor:function(target){var index=this._interestedResizables.indexOf(target);if(-1<index){this._interestedResizables.splice(index,1);this._unsubscribeIronResize(target)}},/**
   * Subscribe this element to listen to iron-resize events on the given target.
   *
   * Preferred over target.listen because the property renamer does not
   * understand to rename when the target is not specifically "this"
   *
   * @param {!HTMLElement} target Element to listen to for iron-resize events.
   */_subscribeIronResize:function(target){target.addEventListener("iron-resize",this._boundOnDescendantIronResize)},/**
   * Unsubscribe this element from listening to to iron-resize events on the
   * given target.
   *
   * Preferred over target.unlisten because the property renamer does not
   * understand to rename when the target is not specifically "this"
   *
   * @param {!HTMLElement} target Element to listen to for iron-resize events.
   */_unsubscribeIronResize:function(target){target.removeEventListener("iron-resize",this._boundOnDescendantIronResize)},/**
   * This method can be overridden to filter nested elements that should or
   * should not be notified by the current element. Return true if an element
   * should be notified, or false if it should not be notified.
   *
   * @param {HTMLElement} element A candidate descendant element that
   * implements `IronResizableBehavior`.
   * @return {boolean} True if the `element` should be notified of resize.
   */resizerShouldNotify:function(element){return!0},_onDescendantIronResize:function(event){if(this._notifyingDescendant){event.stopPropagation();return}// no need to use this during shadow dom because of event retargeting
if(!useShadow){this._fireResize()}},_fireResize:function(){this.fire("iron-resize",null,{node:this,bubbles:!1})},_onIronRequestResizeNotifications:function(event){var target=/** @type {!EventTarget} */dom(event).rootTarget;if(target===this){return}target.assignParentResizable(this);this._notifyDescendant(target);event.stopPropagation()},_parentResizableChanged:function(parentResizable){if(parentResizable){window.removeEventListener("resize",this._boundNotifyResize)}},_notifyDescendant:function(descendant){// NOTE(cdata): In IE10, attached is fired on children first, so it's
// important not to notify them if the parent is not attached yet (or
// else they will get redundantly notified when the parent attaches).
if(!this.isAttached){return}this._notifyingDescendant=!0;descendant.notifyResize();this._notifyingDescendant=!1},_requestResizeNotifications:function(){if(!this.isAttached){return}if("loading"===document.readyState){var _requestResizeNotifications=this._requestResizeNotifications.bind(this);document.addEventListener("readystatechange",function readystatechanged(){document.removeEventListener("readystatechange",readystatechanged);_requestResizeNotifications()})}else{this._findParent();if(!this._parentResizable){// If this resizable is an orphan, tell other orphans to try to find
// their parent again, in case it's this resizable.
ORPHANS.forEach(function(orphan){if(orphan!==this){orphan._findParent()}},this);window.addEventListener("resize",this._boundNotifyResize);this.notifyResize()}else{// If this resizable has a parent, tell other child resizables of
// that parent to try finding their parent again, in case it's this
// resizable.
this._parentResizable._interestedResizables.forEach(function(resizable){if(resizable!==this){resizable._findParent()}},this)}}},_findParent:function(){this.assignParentResizable(null);this.fire("iron-request-resize-notifications",null,{node:this,bubbles:!0,cancelable:!0});if(!this._parentResizable){ORPHANS.add(this)}else{ORPHANS.delete(this)}}};_exports.IronResizableBehavior=IronResizableBehavior;var ironResizableBehavior={IronResizableBehavior:IronResizableBehavior};_exports.$ironResizableBehavior=ironResizableBehavior;const AppLayoutBehavior=[IronResizableBehavior,{listeners:{"app-reset-layout":"_appResetLayoutHandler","iron-resize":"resetLayout"},attached:function(){this.fire("app-reset-layout")},_appResetLayoutHandler:function(e){if(dom(e).path[0]===this){return}this.resetLayout();e.stopPropagation()},_updateLayoutStates:function(){console.error("unimplemented")},/**
   * Resets the layout. If you changed the size of this element via CSS
   * you can notify the changes by either firing the `iron-resize` event
   * or calling `resetLayout` directly.
   *
   * @method resetLayout
   */resetLayout:function(){var self=this,cb=this._updateLayoutStates.bind(this);this._layoutDebouncer=Debouncer.debounce(this._layoutDebouncer,animationFrame,cb);enqueueDebouncer(this._layoutDebouncer);this._notifyDescendantResize()},_notifyLayoutChanged:function(){var self=this;// TODO: the event `app-reset-layout` can be fired synchronously
// as long as `_updateLayoutStates` waits for all the microtasks after
// rAF. E.g. requestAnimationFrame(setTimeOut())
requestAnimationFrame(function(){self.fire("app-reset-layout")})},_notifyDescendantResize:function(){if(!this.isAttached){return}this._interestedResizables.forEach(function(resizable){if(this.resizerShouldNotify(resizable)){this._notifyDescendant(resizable)}},this)}}];_exports.AppLayoutBehavior=AppLayoutBehavior;var appLayoutBehavior={AppLayoutBehavior:AppLayoutBehavior};_exports.$appLayoutBehavior=appLayoutBehavior;const IronScrollTargetBehavior={properties:{/**
     * Specifies the element that will handle the scroll event
     * on the behalf of the current element. This is typically a reference to an
     *element, but there are a few more posibilities:
     *
     * ### Elements id
     *
     *```html
     * <div id="scrollable-element" style="overflow: auto;">
     *  <x-element scroll-target="scrollable-element">
     *    <!-- Content-->
     *  </x-element>
     * </div>
     *```
     * In this case, the `scrollTarget` will point to the outer div element.
     *
     * ### Document scrolling
     *
     * For document scrolling, you can use the reserved word `document`:
     *
     *```html
     * <x-element scroll-target="document">
     *   <!-- Content -->
     * </x-element>
     *```
     *
     * ### Elements reference
     *
     *```js
     * appHeader.scrollTarget = document.querySelector('#scrollable-element');
     *```
     *
     * @type {HTMLElement}
     * @default document
     */scrollTarget:{type:HTMLElement,value:function(){return this._defaultScrollTarget}}},observers:["_scrollTargetChanged(scrollTarget, isAttached)"],/**
   * True if the event listener should be installed.
   */_shouldHaveListener:!0,_scrollTargetChanged:function(scrollTarget,isAttached){var eventTarget;if(this._oldScrollTarget){this._toggleScrollListener(!1,this._oldScrollTarget);this._oldScrollTarget=null}if(!isAttached){return}// Support element id references
if("document"===scrollTarget){this.scrollTarget=this._doc}else if("string"===typeof scrollTarget){var domHost=this.domHost;this.scrollTarget=domHost&&domHost.$?domHost.$[scrollTarget]:dom(this.ownerDocument).querySelector("#"+scrollTarget)}else if(this._isValidScrollTarget()){this._oldScrollTarget=scrollTarget;this._toggleScrollListener(this._shouldHaveListener,scrollTarget)}},/**
   * Runs on every scroll event. Consumer of this behavior may override this
   * method.
   *
   * @protected
   */_scrollHandler:function scrollHandler(){},/**
   * The default scroll target. Consumers of this behavior may want to customize
   * the default scroll target.
   *
   * @type {Element}
   */get _defaultScrollTarget(){return this._doc},/**
   * Shortcut for the document element
   *
   * @type {Element}
   */get _doc(){return this.ownerDocument.documentElement},/**
   * Gets the number of pixels that the content of an element is scrolled
   * upward.
   *
   * @type {number}
   */get _scrollTop(){if(this._isValidScrollTarget()){return this.scrollTarget===this._doc?window.pageYOffset:this.scrollTarget.scrollTop}return 0},/**
   * Gets the number of pixels that the content of an element is scrolled to the
   * left.
   *
   * @type {number}
   */get _scrollLeft(){if(this._isValidScrollTarget()){return this.scrollTarget===this._doc?window.pageXOffset:this.scrollTarget.scrollLeft}return 0},/**
   * Sets the number of pixels that the content of an element is scrolled
   * upward.
   *
   * @type {number}
   */set _scrollTop(top){if(this.scrollTarget===this._doc){window.scrollTo(window.pageXOffset,top)}else if(this._isValidScrollTarget()){this.scrollTarget.scrollTop=top}},/**
   * Sets the number of pixels that the content of an element is scrolled to the
   * left.
   *
   * @type {number}
   */set _scrollLeft(left){if(this.scrollTarget===this._doc){window.scrollTo(left,window.pageYOffset)}else if(this._isValidScrollTarget()){this.scrollTarget.scrollLeft=left}},/**
   * Scrolls the content to a particular place.
   *
   * @method scroll
   * @param {number|!{left: number, top: number}} leftOrOptions The left position or scroll options
   * @param {number=} top The top position
   * @return {void}
   */scroll:function(leftOrOptions,top){var left;if("object"===typeof leftOrOptions){left=leftOrOptions.left;top=leftOrOptions.top}else{left=leftOrOptions}left=left||0;top=top||0;if(this.scrollTarget===this._doc){window.scrollTo(left,top)}else if(this._isValidScrollTarget()){this.scrollTarget.scrollLeft=left;this.scrollTarget.scrollTop=top}},/**
   * Gets the width of the scroll target.
   *
   * @type {number}
   */get _scrollTargetWidth(){if(this._isValidScrollTarget()){return this.scrollTarget===this._doc?window.innerWidth:this.scrollTarget.offsetWidth}return 0},/**
   * Gets the height of the scroll target.
   *
   * @type {number}
   */get _scrollTargetHeight(){if(this._isValidScrollTarget()){return this.scrollTarget===this._doc?window.innerHeight:this.scrollTarget.offsetHeight}return 0},/**
   * Returns true if the scroll target is a valid HTMLElement.
   *
   * @return {boolean}
   */_isValidScrollTarget:function(){return this.scrollTarget instanceof HTMLElement},_toggleScrollListener:function(yes,scrollTarget){var eventTarget=scrollTarget===this._doc?window:scrollTarget;if(yes){if(!this._boundScrollHandler){this._boundScrollHandler=this._scrollHandler.bind(this);eventTarget.addEventListener("scroll",this._boundScrollHandler)}}else{if(this._boundScrollHandler){eventTarget.removeEventListener("scroll",this._boundScrollHandler);this._boundScrollHandler=null}}},/**
   * Enables or disables the scroll event listener.
   *
   * @param {boolean} yes True to add the event, False to remove it.
   */toggleScrollListener:function(yes){this._shouldHaveListener=yes;this._toggleScrollListener(yes,this.scrollTarget)}};_exports.IronScrollTargetBehavior=IronScrollTargetBehavior;var ironScrollTargetBehavior={IronScrollTargetBehavior:IronScrollTargetBehavior};_exports.$ironScrollTargetBehavior=ironScrollTargetBehavior;const _scrollEffects={};_exports._scrollEffects=_scrollEffects;let _scrollTimer=null;_exports._scrollTimer=_scrollTimer;const scrollTimingFunction=function easeOutQuad(t,b,c,d){t/=d;return-c*t*(t-2)+b};/**
    * Registers a scroll effect to be used in elements that implement the
    * `Polymer.AppScrollEffectsBehavior` behavior.
    *
    * @param {string} effectName The effect name.
    * @param {Object} effectDef The effect definition.
    */_exports.scrollTimingFunction=scrollTimingFunction;const registerEffect=function registerEffect(effectName,effectDef){if(null!=_scrollEffects[effectName]){throw new Error("effect `"+effectName+"` is already registered.")}_scrollEffects[effectName]=effectDef};_exports.registerEffect=registerEffect;const queryAllRoot=function(selector,root){var queue=[root],matches=[];while(0<queue.length){var node=queue.shift();matches.push.apply(matches,node.querySelectorAll(selector));for(var i=0;node.children[i];i++){if(node.children[i].shadowRoot){queue.push(node.children[i].shadowRoot)}}}return matches};/**
    * Scrolls to a particular set of coordinates in a scroll target.
    * If the scroll target is not defined, then it would use the main document as
    * the target.
    *
    * To scroll in a smooth fashion, you can set the option `behavior: 'smooth'`.
    * e.g.
    *
    * ```js
    * Polymer.AppLayout.scroll({top: 0, behavior: 'smooth'});
    * ```
    *
    * To scroll in a silent mode, without notifying scroll changes to any
    * app-layout elements, you can set the option `behavior: 'silent'`. This is
    * particularly useful we you are using `app-header` and you desire to scroll to
    * the top of a scrolling region without running scroll effects. e.g.
    *
    * ```js
    * Polymer.AppLayout.scroll({top: 0, behavior: 'silent'});
    * ```
    *
    * @param {Object} options {top: Number, left: Number, behavior: String(smooth | silent)}
    */_exports.queryAllRoot=queryAllRoot;const scroll=function scroll(options){options=options||{};var docEl=document.documentElement,target=options.target||docEl,hasNativeScrollBehavior="scrollBehavior"in target.style&&target.scroll,scrollClassName="app-layout-silent-scroll",scrollTop=options.top||0,scrollLeft=options.left||0,scrollTo=target===docEl?window.scrollTo:function scrollTo(scrollLeft,scrollTop){target.scrollLeft=scrollLeft;target.scrollTop=scrollTop};if("smooth"===options.behavior){if(hasNativeScrollBehavior){target.scroll(options)}else{var timingFn=scrollTimingFunction,startTime=Date.now(),currentScrollTop=target===docEl?window.pageYOffset:target.scrollTop,currentScrollLeft=target===docEl?window.pageXOffset:target.scrollLeft,deltaScrollTop=scrollTop-currentScrollTop,deltaScrollLeft=scrollLeft-currentScrollLeft,duration=300,updateFrame=function updateFrame(){var now=Date.now(),elapsedTime=now-startTime;if(elapsedTime<duration){scrollTo(timingFn(elapsedTime,currentScrollLeft,deltaScrollLeft,duration),timingFn(elapsedTime,currentScrollTop,deltaScrollTop,duration));requestAnimationFrame(updateFrame)}else{scrollTo(scrollLeft,scrollTop)}}.bind(this);updateFrame()}}else if("silent"===options.behavior){var headers=queryAllRoot("app-header",document.body);headers.forEach(function(header){header.setAttribute("silent-scroll","")});// Browsers keep the scroll momentum even if the bottom of the scrolling
// content was reached. This means that calling scroll({top: 0, behavior:
// 'silent'}) when the momentum is still going will result in more scroll
// events and thus scroll effects. This seems to only apply when using
// document scrolling. Therefore, when should we remove the class from the
// document element?
if(_scrollTimer){window.cancelAnimationFrame(_scrollTimer)}_exports._scrollTimer=_scrollTimer=window.requestAnimationFrame(function(){headers.forEach(function(header){header.removeAttribute("silent-scroll")});_exports._scrollTimer=_scrollTimer=null});scrollTo(scrollLeft,scrollTop)}else{scrollTo(scrollLeft,scrollTop)}};/**
    * @interface
    * @extends {Polymer_LegacyElementMixin}
    */_exports.scroll=scroll;class ElementWithBackground{/** @return {boolean} True if there's content below the current element */isContentBelow(){}/** @return {boolean} true if the element is on screen */isOnScreen(){}/**
                   * @param {string} title
                   * @return {?Element} Element in local dom by id.
                   */_getDOMRef(title){}}_exports.ElementWithBackground=ElementWithBackground;var helpers={_scrollEffects:_scrollEffects,get _scrollTimer(){return _scrollTimer},scrollTimingFunction:scrollTimingFunction,registerEffect:registerEffect,queryAllRoot:queryAllRoot,scroll:scroll,ElementWithBackground:ElementWithBackground};_exports.$helpers=helpers;const AppScrollEffectsBehavior=[IronScrollTargetBehavior,{properties:{/**
     * A space-separated list of the effects names that will be triggered when
     * the user scrolls. e.g. `waterfall parallax-background` installs the
     * `waterfall` and `parallax-background`.
     */effects:{type:String},/**
     * An object that configurates the effects installed via the `effects`
     * property. e.g.
     * ```js
     *  element.effectsConfig = {
     *   "blend-background": {
     *     "startsAt": 0.5
     *   }
     * };
     * ```
     * Every effect has at least two config properties: `startsAt` and
     * `endsAt`. These properties indicate when the event should start and end
     * respectively and relative to the overall element progress. So for
     * example, if `blend-background` starts at `0.5`, the effect will only
     * start once the current element reaches 0.5 of its progress. In this
     * context, the progress is a value in the range of `[0, 1]` that
     * indicates where this element is on the screen relative to the viewport.
     */effectsConfig:{type:Object,value:function(){return{}}},/**
     * Disables CSS transitions and scroll effects on the element.
     */disabled:{type:Boolean,reflectToAttribute:!0,value:!1},/**
     * Allows to set a `scrollTop` threshold. When greater than 0,
     * `thresholdTriggered` is true only when the scroll target's `scrollTop`
     * has reached this value.
     *
     * For example, if `threshold = 100`, `thresholdTriggered` is true when
     * the `scrollTop` is at least `100`.
     */threshold:{type:Number,value:0},/**
     * True if the `scrollTop` threshold (set in `scrollTopThreshold`) has
     * been reached.
     */thresholdTriggered:{type:Boolean,notify:!0,readOnly:!0,reflectToAttribute:!0}},observers:["_effectsChanged(effects, effectsConfig, isAttached)"],/**
   * Updates the scroll state. This method should be overridden
   * by the consumer of this behavior.
   *
   * @method _updateScrollState
   * @param {number} scrollTop
   */_updateScrollState:function(scrollTop){},/**
   * Returns true if the current element is on the screen.
   * That is, visible in the current viewport. This method should be
   * overridden by the consumer of this behavior.
   *
   * @method isOnScreen
   * @return {boolean}
   */isOnScreen:function(){return!1},/**
   * Returns true if there's content below the current element. This method
   * should be overridden by the consumer of this behavior.
   *
   * @method isContentBelow
   * @return {boolean}
   */isContentBelow:function(){return!1},/**
   * List of effects handlers that will take place during scroll.
   *
   * @type {Array<Function>}
   */_effectsRunFn:null,/**
   * List of the effects definitions installed via the `effects` property.
   *
   * @type {Array<Object>}
   */_effects:null,/**
   * The clamped value of `_scrollTop`.
   * @type number
   */get _clampedScrollTop(){return Math.max(0,this._scrollTop)},attached:function(){this._scrollStateChanged()},detached:function(){this._tearDownEffects()},/**
   * Creates an effect object from an effect's name that can be used to run
   * effects programmatically.
   *
   * @method createEffect
   * @param {string} effectName The effect's name registered via `Polymer.AppLayout.registerEffect`.
   * @param {Object=} effectConfig The effect config object. (Optional)
   * @return {Object} An effect object with the following functions:
   *
   *  * `effect.setUp()`, Sets up the requirements for the effect.
   *       This function is called automatically before the `effect` function
   * returns.
   *  * `effect.run(progress, y)`, Runs the effect given a `progress`.
   *  * `effect.tearDown()`, Cleans up any DOM nodes or element references
   * used by the effect.
   *
   * Example:
   * ```js
   * var parallax = element.createEffect('parallax-background');
   * // runs the effect
   * parallax.run(0.5, 0);
   * ```
   */createEffect:function(effectName,effectConfig){var effectDef=_scrollEffects[effectName];if(!effectDef){throw new ReferenceError(this._getUndefinedMsg(effectName))}var prop=this._boundEffect(effectDef,effectConfig||{});prop.setUp();return prop},/**
   * Called when `effects` or `effectsConfig` changes.
   */_effectsChanged:function(effects,effectsConfig,isAttached){this._tearDownEffects();if(!effects||!isAttached){return}effects.split(" ").forEach(function(effectName){var effectDef;if(""!==effectName){if(effectDef=_scrollEffects[effectName]){this._effects.push(this._boundEffect(effectDef,effectsConfig[effectName]))}else{console.warn(this._getUndefinedMsg(effectName))}}},this);this._setUpEffect()},/**
   * Forces layout
   */_layoutIfDirty:function(){return this.offsetWidth},/**
   * Returns an effect object bound to the current context.
   *
   * @param {Object} effectDef
   * @param {Object=} effectsConfig The effect config object if the effect accepts config values. (Optional)
   */_boundEffect:function(effectDef,effectsConfig){effectsConfig=effectsConfig||{};var startsAt=parseFloat(effectsConfig.startsAt||0),endsAt=parseFloat(effectsConfig.endsAt||1),deltaS=endsAt-startsAt,noop=function(){},runFn=0===startsAt&&1===endsAt?effectDef.run:function(progress,y){effectDef.run.call(this,Math.max(0,(progress-startsAt)/deltaS),y)};return{setUp:effectDef.setUp?effectDef.setUp.bind(this,effectsConfig):noop,run:effectDef.run?runFn.bind(this):noop,tearDown:effectDef.tearDown?effectDef.tearDown.bind(this):noop}},/**
   * Sets up the effects.
   */_setUpEffect:function(){if(this.isAttached&&this._effects){this._effectsRunFn=[];this._effects.forEach(function(effectDef){// install the effect only if no error was reported
if(!1!==effectDef.setUp()){this._effectsRunFn.push(effectDef.run)}},this)}},/**
   * Tears down the effects.
   */_tearDownEffects:function(){if(this._effects){this._effects.forEach(function(effectDef){effectDef.tearDown()})}this._effectsRunFn=[];this._effects=[]},/**
   * Runs the effects.
   *
   * @param {number} p The progress
   * @param {number} y The top position of the current element relative to the viewport.
   */_runEffects:function(p,y){if(this._effectsRunFn){this._effectsRunFn.forEach(function(run){run(p,y)})}},/**
   * Overrides the `_scrollHandler`.
   */_scrollHandler:function(){this._scrollStateChanged()},_scrollStateChanged:function(){if(!this.disabled){var scrollTop=this._clampedScrollTop;this._updateScrollState(scrollTop);if(0<this.threshold){this._setThresholdTriggered(scrollTop>=this.threshold)}}},/**
   * Override this method to return a reference to a node in the local DOM.
   * The node is consumed by a scroll effect.
   *
   * @param {string} id The id for the node.
   */_getDOMRef:function(id){console.warn("_getDOMRef","`"+id+"` is undefined")},_getUndefinedMsg:function(effectName){return"Scroll effect `"+effectName+"` is undefined. "+"Did you forget to import app-layout/app-scroll-effects/effects/"+effectName+".html ?"}}];_exports.AppScrollEffectsBehavior=AppScrollEffectsBehavior;var appScrollEffectsBehavior={AppScrollEffectsBehavior:AppScrollEffectsBehavior};_exports.$appScrollEffectsBehavior=appScrollEffectsBehavior;Polymer({/** @override */_template:html`
    <style>
      :host {
        position: relative;
        display: block;
        transition-timing-function: linear;
        transition-property: -webkit-transform;
        transition-property: transform;
      }

      :host::before {
        position: absolute;
        right: 0px;
        bottom: -5px;
        left: 0px;
        width: 100%;
        height: 5px;
        content: "";
        transition: opacity 0.4s;
        pointer-events: none;
        opacity: 0;
        box-shadow: inset 0px 5px 6px -3px rgba(0, 0, 0, 0.4);
        will-change: opacity;
        @apply --app-header-shadow;
      }

      :host([shadow])::before {
        opacity: 1;
      }

      #background {
        @apply --layout-fit;
        overflow: hidden;
      }

      #backgroundFrontLayer,
      #backgroundRearLayer {
        @apply --layout-fit;
        height: 100%;
        pointer-events: none;
        background-size: cover;
      }

      #backgroundFrontLayer {
        @apply --app-header-background-front-layer;
      }

      #backgroundRearLayer {
        opacity: 0;
        @apply --app-header-background-rear-layer;
      }

      #contentContainer {
        position: relative;
        width: 100%;
        height: 100%;
      }

      :host([disabled]),
      :host([disabled])::after,
      :host([disabled]) #backgroundFrontLayer,
      :host([disabled]) #backgroundRearLayer,
      /* Silent scrolling should not run CSS transitions */
      :host([silent-scroll]),
      :host([silent-scroll])::after,
      :host([silent-scroll]) #backgroundFrontLayer,
      :host([silent-scroll]) #backgroundRearLayer {
        transition: none !important;
      }

      :host([disabled]) ::slotted(app-toolbar:first-of-type),
      :host([disabled]) ::slotted([sticky]),
      /* Silent scrolling should not run CSS transitions */
      :host([silent-scroll]) ::slotted(app-toolbar:first-of-type),
      :host([silent-scroll]) ::slotted([sticky]) {
        transition: none !important;
      }

    </style>
    <div id="contentContainer">
      <slot id="slot"></slot>
    </div>
`,is:"app-header",behaviors:[AppScrollEffectsBehavior,AppLayoutBehavior],properties:{/**
     * If true, the header will automatically collapse when scrolling down.
     * That is, the `sticky` element remains visible when the header is fully
     *condensed whereas the rest of the elements will collapse below `sticky`
     *element.
     *
     * By default, the `sticky` element is the first toolbar in the light DOM:
     *
     *```html
     * <app-header condenses>
     *   <app-toolbar>This toolbar remains on top</app-toolbar>
     *   <app-toolbar></app-toolbar>
     *   <app-toolbar></app-toolbar>
     * </app-header>
     * ```
     *
     * Additionally, you can specify which toolbar or element remains visible in
     *condensed mode by adding the `sticky` attribute to that element. For
     *example: if we want the last toolbar to remain visible, we can add the
     *`sticky` attribute to it.
     *
     *```html
     * <app-header condenses>
     *   <app-toolbar></app-toolbar>
     *   <app-toolbar></app-toolbar>
     *   <app-toolbar sticky>This toolbar remains on top</app-toolbar>
     * </app-header>
     * ```
     *
     * Note the `sticky` element must be a direct child of `app-header`.
     */condenses:{type:Boolean,value:!1},/**
     * Mantains the header fixed at the top so it never moves away.
     */fixed:{type:Boolean,value:!1},/**
     * Slides back the header when scrolling back up.
     */reveals:{type:Boolean,value:!1},/**
     * Displays a shadow below the header.
     */shadow:{type:Boolean,reflectToAttribute:!0,value:!1}},observers:["_configChanged(isAttached, condenses, fixed)"],/**
   * A cached offsetHeight of the current element.
   *
   * @type {number}
   */_height:0,/**
   * The distance in pixels the header will be translated to when scrolling.
   *
   * @type {number}
   */_dHeight:0,/**
   * The offsetTop of `_stickyEl`
   *
   * @type {number}
   */_stickyElTop:0,/**
   * A reference to the element that remains visible when the header condenses.
   *
   * @type {HTMLElement}
   */_stickyElRef:null,/**
   * The header's top value used for the `transformY`
   *
   * @type {number}
   */_top:0,/**
   * The current scroll progress.
   *
   * @type {number}
   */_progress:0,_wasScrollingDown:!1,_initScrollTop:0,_initTimestamp:0,_lastTimestamp:0,_lastScrollTop:0,/**
   * The distance the header is allowed to move away.
   *
   * @type {number}
   */get _maxHeaderTop(){return this.fixed?this._dHeight:this._height+5},/**
   * Returns a reference to the sticky element.
   *
   * @return {HTMLElement}?
   */get _stickyEl(){if(this._stickyElRef){return this._stickyElRef}// Get the element with the sticky attribute on it or the first element in
// the light DOM.
for(var nodes=dom(this.$.slot).getDistributedNodes(),i=0,node;node=/** @type {!HTMLElement} */nodes[i];i++){if(node.nodeType===Node.ELEMENT_NODE){if(node.hasAttribute("sticky")){this._stickyElRef=node;break}else if(!this._stickyElRef){this._stickyElRef=node}}}return this._stickyElRef},_configChanged:function(){this.resetLayout();this._notifyLayoutChanged()},_updateLayoutStates:function(){if(0===this.offsetWidth&&0===this.offsetHeight){return}var scrollTop=this._clampedScrollTop,firstSetup=0===this._height||0===scrollTop,currentDisabled=this.disabled;this._height=this.offsetHeight;this._stickyElRef=null;this.disabled=!0;// prepare for measurement
if(!firstSetup){this._updateScrollState(0,!0)}if(this._mayMove()){this._dHeight=this._stickyEl?this._height-this._stickyEl.offsetHeight:0}else{this._dHeight=0}this._stickyElTop=this._stickyEl?this._stickyEl.offsetTop:0;this._setUpEffect();if(firstSetup){this._updateScrollState(scrollTop,!0)}else{this._updateScrollState(this._lastScrollTop,!0);this._layoutIfDirty()}// restore no transition
this.disabled=currentDisabled},/**
   * Updates the scroll state.
   *
   * @param {number} scrollTop
   * @param {boolean=} forceUpdate (default: false)
   */_updateScrollState:function(scrollTop,forceUpdate){if(0===this._height){return}var progress=0,top=0,lastTop=this._top,lastScrollTop=this._lastScrollTop,maxHeaderTop=this._maxHeaderTop,dScrollTop=scrollTop-this._lastScrollTop,absDScrollTop=Math.abs(dScrollTop),isScrollingDown=scrollTop>this._lastScrollTop,now=performance.now();if(this._mayMove()){top=this._clamp(this.reveals?lastTop+dScrollTop:scrollTop,0,maxHeaderTop)}if(scrollTop>=this._dHeight){top=this.condenses&&!this.fixed?Math.max(this._dHeight,top):top;this.style.transitionDuration="0ms"}if(this.reveals&&!this.disabled&&100>absDScrollTop){// set the initial scroll position
if(300<now-this._initTimestamp||this._wasScrollingDown!==isScrollingDown){this._initScrollTop=scrollTop;this._initTimestamp=now}if(scrollTop>=maxHeaderTop){// check if the header is allowed to snap
if(30<Math.abs(this._initScrollTop-scrollTop)||10<absDScrollTop){if(isScrollingDown&&scrollTop>=maxHeaderTop){top=maxHeaderTop}else if(!isScrollingDown&&scrollTop>=this._dHeight){top=this.condenses&&!this.fixed?this._dHeight:0}var scrollVelocity=dScrollTop/(now-this._lastTimestamp);this.style.transitionDuration=this._clamp((top-lastTop)/scrollVelocity,0,300)+"ms"}else{top=this._top}}}if(0===this._dHeight){progress=0<scrollTop?1:0}else{progress=top/this._dHeight}if(!forceUpdate){this._lastScrollTop=scrollTop;this._top=top;this._wasScrollingDown=isScrollingDown;this._lastTimestamp=now}if(forceUpdate||progress!==this._progress||lastTop!==top||0===scrollTop){this._progress=progress;this._runEffects(progress,top);this._transformHeader(top)}},/**
   * Returns true if the current header is allowed to move as the user scrolls.
   *
   * @return {boolean}
   */_mayMove:function(){return this.condenses||!this.fixed},/**
   * Returns true if the current header will condense based on the size of the
   * header and the `consenses` property.
   *
   * @return {boolean}
   */willCondense:function(){return 0<this._dHeight&&this.condenses},/**
   * Returns true if the current element is on the screen.
   * That is, visible in the current viewport.
   *
   * @method isOnScreen
   * @return {boolean}
   */isOnScreen:function(){return 0!==this._height&&this._top<this._height},/**
   * Returns true if there's content below the current element.
   *
   * @method isContentBelow
   * @return {boolean}
   */isContentBelow:function(){return 0===this._top?0<this._clampedScrollTop:0<=this._clampedScrollTop-this._maxHeaderTop},/**
   * Transforms the header.
   *
   * @param {number} y
   */_transformHeader:function(y){this.translate3d(0,-y+"px",0);if(this._stickyEl){this.translate3d(0,this.condenses&&y>=this._stickyElTop?Math.min(y,this._dHeight)-this._stickyElTop+"px":0,0,this._stickyEl)}},_clamp:function(v,min,max){return Math.min(max,Math.max(min,v))},_ensureBgContainers:function(){if(!this._bgContainer){this._bgContainer=document.createElement("div");this._bgContainer.id="background";this._bgRear=document.createElement("div");this._bgRear.id="backgroundRearLayer";this._bgContainer.appendChild(this._bgRear);this._bgFront=document.createElement("div");this._bgFront.id="backgroundFrontLayer";this._bgContainer.appendChild(this._bgFront);dom(this.root).insertBefore(this._bgContainer,this.$.contentContainer)}},_getDOMRef:function(id){switch(id){case"backgroundFrontLayer":this._ensureBgContainers();return this._bgFront;case"backgroundRearLayer":this._ensureBgContainers();return this._bgRear;case"background":this._ensureBgContainers();return this._bgContainer;case"mainTitle":return dom(this).querySelector("[main-title]");case"condensedTitle":return dom(this).querySelector("[condensed-title]");}return null},/**
   * Returns an object containing the progress value of the scroll effects
   * and the top position of the header.
   *
   * @method getScrollState
   * @return {Object}
   */getScrollState:function(){return{progress:this._progress,top:this._top}}});registerEffect("waterfall",{/** @this {Waterfall} */run:function run(){this.shadow=this.isOnScreen()&&this.isContentBelow()}});/**
     * @interface
     * @extends {ElementWithBackground}
     */class Waterfall{constructor(){/** @type {boolean} */this.shadow}}Polymer({/** @override */_template:html`
    <style>

      :host {
        @apply --layout-horizontal;
        @apply --layout-center;
        position: relative;
        height: 64px;
        padding: 0 16px;
        pointer-events: none;
        font-size: var(--app-toolbar-font-size, 20px);
      }

      :host ::slotted(*) {
        pointer-events: auto;
      }

      :host ::slotted(paper-icon-button) {
        /* paper-icon-button/issues/33 */
        font-size: 0;
      }

      :host ::slotted([main-title]),
      :host ::slotted([condensed-title]) {
        pointer-events: none;
        @apply --layout-flex;
      }

      :host ::slotted([bottom-item]) {
        position: absolute;
        right: 0;
        bottom: 0;
        left: 0;
      }

      :host ::slotted([top-item]) {
        position: absolute;
        top: 0;
        right: 0;
        left: 0;
      }

      :host ::slotted([spacer]) {
        margin-left: 64px;
      }
    </style>

    <slot></slot>
`,is:"app-toolbar"});function addLeadingZeros(number,targetLength){var sign=0>number?"-":"",output=Math.abs(number).toString();while(output.length<targetLength){output="0"+output}return sign+output}var index={default:addLeadingZeros};_exports.$index=index;function assign(target,dirtyObject){if(null==target){throw new TypeError("assign requires that input parameter not be null or undefined")}dirtyObject=dirtyObject||{};for(var property in dirtyObject){if(dirtyObject.hasOwnProperty(property)){target[property]=dirtyObject[property]}}return target}var index$1={default:assign};_exports.$index$1=index$1;function cloneObject(dirtyObject){return assign({},dirtyObject)}var index$2={default:cloneObject};_exports.$index$2=index$2;var formatters={// Year
y:function(date,token){// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
// | Year     |     y | yy |   yyy |  yyyy | yyyyy |
// |----------|-------|----|-------|-------|-------|
// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
var signedYear=date.getUTCFullYear(),year=0<signedYear?signedYear:1-signedYear;// Returns 1 for 1 BC (which is year 0 in JavaScript)
return addLeadingZeros("yy"===token?year%100:year,token.length)},// Month
M:function(date,token){var month=date.getUTCMonth();return"M"===token?month+1+"":addLeadingZeros(month+1,2)},// Day of the month
d:function(date,token){return addLeadingZeros(date.getUTCDate(),token.length)},// AM or PM
a:function(date,token){var dayPeriodEnumValue=1<=date.getUTCHours()/12?"pm":"am";switch(token){case"a":case"aa":case"aaa":return dayPeriodEnumValue.toUpperCase();case"aaaaa":return dayPeriodEnumValue[0];case"aaaa":default:return"am"===dayPeriodEnumValue?"a.m.":"p.m.";}},// Hour [1-12]
h:function(date,token){return addLeadingZeros(date.getUTCHours()%12||12,token.length)},// Hour [0-23]
H:function(date,token){return addLeadingZeros(date.getUTCHours(),token.length)},// Minute
m:function(date,token){return addLeadingZeros(date.getUTCMinutes(),token.length)},// Second
s:function(date,token){return addLeadingZeros(date.getUTCSeconds(),token.length)},// Fraction of second
S:function(date,token){var numberOfDigits=token.length,milliseconds=date.getUTCMilliseconds(),fractionalSeconds=Math.floor(milliseconds*Math.pow(10,numberOfDigits-3));return addLeadingZeros(fractionalSeconds,token.length)}};_exports.$indexDefault$4=formatters;var index$3={default:formatters};/**
    * @name toDate
    * @category Common Helpers
    * @summary Convert the given argument to an instance of Date.
    *
    * @description
    * Convert the given argument to an instance of Date.
    *
    * If the argument is an instance of Date, the function returns its clone.
    *
    * If the argument is a number, it is treated as a timestamp.
    *
    * If the argument is none of the above, the function returns Invalid Date.
    *
    * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
    *
    * @param {Date|Number} argument - the value to convert
    * @returns {Date} the parsed date in the local time zone
    * @throws {TypeError} 1 argument required
    *
    * @example
    * // Clone the date:
    * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
    * //=> Tue Feb 11 2014 11:30:30
    *
    * @example
    * // Convert the timestamp to date:
    * const result = toDate(1392098430000)
    * //=> Tue Feb 11 2014 11:30:30
    */_exports.$index$4=index$3;function toDate(argument){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var argStr=Object.prototype.toString.call(argument);// Clone the date
if(argument instanceof Date||"object"===typeof argument&&"[object Date]"===argStr){// Prevent the date to lose the milliseconds when passed to new Date() in IE10
return new Date(argument.getTime())}else if("number"===typeof argument||"[object Number]"===argStr){return new Date(argument)}else{if(("string"===typeof argument||"[object String]"===argStr)&&"undefined"!==typeof console){// eslint-disable-next-line no-console
console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule");// eslint-disable-next-line no-console
console.warn(new Error().stack)}return new Date(NaN)}}var index$4={default:toDate};_exports.$index$211=index$4;var MILLISECONDS_IN_DAY=864e5;// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function getUTCDayOfYear(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),timestamp=date.getTime();date.setUTCMonth(0,1);date.setUTCHours(0,0,0,0);var startOfYearTimestamp=date.getTime(),difference=timestamp-startOfYearTimestamp;return Math.floor(difference/MILLISECONDS_IN_DAY)+1}var index$5={default:getUTCDayOfYear};// See issue: https://github.com/date-fns/date-fns/issues/376
_exports.$index$7=index$5;function startOfUTCISOWeek(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var weekStartsOn=1,date=toDate(dirtyDate),day=date.getUTCDay(),diff=(day<weekStartsOn?7:0)+day-weekStartsOn;date.setUTCDate(date.getUTCDate()-diff);date.setUTCHours(0,0,0,0);return date}var index$6={default:startOfUTCISOWeek};// See issue: https://github.com/date-fns/date-fns/issues/376
_exports.$index$17=index$6;function getUTCISOWeekYear(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),year=date.getUTCFullYear(),fourthOfJanuaryOfNextYear=new Date(0);fourthOfJanuaryOfNextYear.setUTCFullYear(year+1,0,4);fourthOfJanuaryOfNextYear.setUTCHours(0,0,0,0);var startOfNextYear=startOfUTCISOWeek(fourthOfJanuaryOfNextYear),fourthOfJanuaryOfThisYear=new Date(0);fourthOfJanuaryOfThisYear.setUTCFullYear(year,0,4);fourthOfJanuaryOfThisYear.setUTCHours(0,0,0,0);var startOfThisYear=startOfUTCISOWeek(fourthOfJanuaryOfThisYear);if(date.getTime()>=startOfNextYear.getTime()){return year+1}else if(date.getTime()>=startOfThisYear.getTime()){return year}else{return year-1}}var index$7={default:getUTCISOWeekYear};// See issue: https://github.com/date-fns/date-fns/issues/376
_exports.$index$9=index$7;function startOfUTCISOWeekYear(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var year=getUTCISOWeekYear(dirtyDate),fourthOfJanuary=new Date(0);fourthOfJanuary.setUTCFullYear(year,0,4);fourthOfJanuary.setUTCHours(0,0,0,0);var date=startOfUTCISOWeek(fourthOfJanuary);return date}var index$8={default:startOfUTCISOWeekYear};_exports.$index$18=index$8;var MILLISECONDS_IN_WEEK=6048e5;// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function getUTCISOWeek(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),diff=startOfUTCISOWeek(date).getTime()-startOfUTCISOWeekYear(date).getTime();// Round the number of days to the nearest integer
// because the number of milliseconds in a week is not constant
// (e.g. it's different in the week of the daylight saving time clock shift)
return Math.round(diff/MILLISECONDS_IN_WEEK)+1}var index$9={default:getUTCISOWeek};_exports.$index$8=index$9;function toInteger(dirtyNumber){if(null===dirtyNumber||!0===dirtyNumber||!1===dirtyNumber){return NaN}var number=+dirtyNumber;if(isNaN(number)){return number}return 0>number?Math.ceil(number):Math.floor(number)}var index$a={default:toInteger};// See issue: https://github.com/date-fns/date-fns/issues/376
_exports.$index$21=index$a;function startOfUTCWeek(dirtyDate,dirtyOptions){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var options=dirtyOptions||{},locale=options.locale,localeWeekStartsOn=locale&&locale.options&&locale.options.weekStartsOn,defaultWeekStartsOn=null==localeWeekStartsOn?0:toInteger(localeWeekStartsOn),weekStartsOn=null==options.weekStartsOn?defaultWeekStartsOn:toInteger(options.weekStartsOn);// Test if weekStartsOn is between 0 and 6 _and_ is not NaN
if(!(0<=weekStartsOn&&6>=weekStartsOn)){throw new RangeError("weekStartsOn must be between 0 and 6 inclusively")}var date=toDate(dirtyDate),day=date.getUTCDay(),diff=(day<weekStartsOn?7:0)+day-weekStartsOn;date.setUTCDate(date.getUTCDate()-diff);date.setUTCHours(0,0,0,0);return date}var index$b={default:startOfUTCWeek};// See issue: https://github.com/date-fns/date-fns/issues/376
_exports.$index$19=index$b;function getUTCWeekYear(dirtyDate,dirtyOptions){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate,dirtyOptions),year=date.getUTCFullYear(),options=dirtyOptions||{},locale=options.locale,localeFirstWeekContainsDate=locale&&locale.options&&locale.options.firstWeekContainsDate,defaultFirstWeekContainsDate=null==localeFirstWeekContainsDate?1:toInteger(localeFirstWeekContainsDate),firstWeekContainsDate=null==options.firstWeekContainsDate?defaultFirstWeekContainsDate:toInteger(options.firstWeekContainsDate);// Test if weekStartsOn is between 1 and 7 _and_ is not NaN
if(!(1<=firstWeekContainsDate&&7>=firstWeekContainsDate)){throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively")}var firstWeekOfNextYear=new Date(0);firstWeekOfNextYear.setUTCFullYear(year+1,0,firstWeekContainsDate);firstWeekOfNextYear.setUTCHours(0,0,0,0);var startOfNextYear=startOfUTCWeek(firstWeekOfNextYear,dirtyOptions),firstWeekOfThisYear=new Date(0);firstWeekOfThisYear.setUTCFullYear(year,0,firstWeekContainsDate);firstWeekOfThisYear.setUTCHours(0,0,0,0);var startOfThisYear=startOfUTCWeek(firstWeekOfThisYear,dirtyOptions);if(date.getTime()>=startOfNextYear.getTime()){return year+1}else if(date.getTime()>=startOfThisYear.getTime()){return year}else{return year-1}}var index$c={default:getUTCWeekYear};// See issue: https://github.com/date-fns/date-fns/issues/376
_exports.$index$11=index$c;function startOfUTCWeekYear(dirtyDate,dirtyOptions){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var options=dirtyOptions||{},locale=options.locale,localeFirstWeekContainsDate=locale&&locale.options&&locale.options.firstWeekContainsDate,defaultFirstWeekContainsDate=null==localeFirstWeekContainsDate?1:toInteger(localeFirstWeekContainsDate),firstWeekContainsDate=null==options.firstWeekContainsDate?defaultFirstWeekContainsDate:toInteger(options.firstWeekContainsDate),year=getUTCWeekYear(dirtyDate,dirtyOptions),firstWeek=new Date(0);firstWeek.setUTCFullYear(year,0,firstWeekContainsDate);firstWeek.setUTCHours(0,0,0,0);var date=startOfUTCWeek(firstWeek,dirtyOptions);return date}var index$d={default:startOfUTCWeekYear};_exports.$index$20=index$d;var MILLISECONDS_IN_WEEK$1=6048e5;// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function getUTCWeek(dirtyDate,options){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),diff=startOfUTCWeek(date,options).getTime()-startOfUTCWeekYear(date,options).getTime();// Round the number of days to the nearest integer
// because the number of milliseconds in a week is not constant
// (e.g. it's different in the week of the daylight saving time clock shift)
return Math.round(diff/MILLISECONDS_IN_WEEK$1)+1}var index$e={default:getUTCWeek};_exports.$index$10=index$e;var dayPeriodEnum={am:"am",pm:"pm",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"/*
                  * |     | Unit                           |     | Unit                           |
                  * |-----|--------------------------------|-----|--------------------------------|
                  * |  a  | AM, PM                         |  A* | Milliseconds in day            |
                  * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
                  * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
                  * |  d  | Day of month                   |  D  | Day of year                    |
                  * |  e  | Local day of week              |  E  | Day of week                    |
                  * |  f  |                                |  F* | Day of week in month           |
                  * |  g* | Modified Julian day            |  G  | Era                            |
                  * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
                  * |  i! | ISO day of week                |  I! | ISO week of year               |
                  * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
                  * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
                  * |  l* | (deprecated)                   |  L  | Stand-alone month              |
                  * |  m  | Minute                         |  M  | Month                          |
                  * |  n  |                                |  N  |                                |
                  * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
                  * |  p! | Long localized time            |  P! | Long localized date            |
                  * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
                  * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
                  * |  s  | Second                         |  S  | Fraction of second             |
                  * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
                  * |  u  | Extended year                  |  U* | Cyclic year                    |
                  * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
                  * |  w  | Local week of year             |  W* | Week of month                  |
                  * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
                  * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
                  * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
                  *
                  * Letters marked by * are not implemented but reserved by Unicode standard.
                  *
                  * Letters marked by ! are non-standard, but implemented by date-fns:
                  * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
                  * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
                  *   i.e. 7 for Sunday, 1 for Monday, etc.
                  * - `I` is ISO week of year, as opposed to `w` which is local week of year.
                  * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
                  *   `R` is supposed to be used in conjunction with `I` and `i`
                  *   for universal ISO week-numbering date, whereas
                  *   `Y` is supposed to be used in conjunction with `w` and `e`
                  *   for week-numbering date specific to the locale.
                  * - `P` is long localized date format
                  * - `p` is long localized time format
                  */},formatters$1={// Era
G:function(date,token,localize){var era=0<date.getUTCFullYear()?1:0;switch(token){// AD, BC
case"G":case"GG":case"GGG":return localize.era(era,{width:"abbreviated"});// A, B
case"GGGGG":return localize.era(era,{width:"narrow"});// Anno Domini, Before Christ
case"GGGG":default:return localize.era(era,{width:"wide"});}},// Year
y:function(date,token,localize){// Ordinal number
if("yo"===token){var signedYear=date.getUTCFullYear(),year=0<signedYear?signedYear:1-signedYear;// Returns 1 for 1 BC (which is year 0 in JavaScript)
return localize.ordinalNumber(year,{unit:"year"})}return formatters.y(date,token)},// Local week-numbering year
Y:function(date,token,localize,options){var signedWeekYear=getUTCWeekYear(date,options),weekYear=0<signedWeekYear?signedWeekYear:1-signedWeekYear;// Returns 1 for 1 BC (which is year 0 in JavaScript)
// Two digit year
if("YY"===token){var twoDigitYear=weekYear%100;return addLeadingZeros(twoDigitYear,2)}// Ordinal number
if("Yo"===token){return localize.ordinalNumber(weekYear,{unit:"year"})}// Padding
return addLeadingZeros(weekYear,token.length)},// ISO week-numbering year
R:function(date,token){var isoWeekYear=getUTCISOWeekYear(date);// Padding
return addLeadingZeros(isoWeekYear,token.length)},// Extended year. This is a single number designating the year of this calendar system.
// The main difference between `y` and `u` localizers are B.C. years:
// | Year | `y` | `u` |
// |------|-----|-----|
// | AC 1 |   1 |   1 |
// | BC 1 |   1 |   0 |
// | BC 2 |   2 |  -1 |
// Also `yy` always returns the last two digits of a year,
// while `uu` pads single digit years to 2 characters and returns other years unchanged.
u:function(date,token){var year=date.getUTCFullYear();return addLeadingZeros(year,token.length)},// Quarter
Q:function(date,token,localize){var quarter=Math.ceil((date.getUTCMonth()+1)/3);switch(token){// 1, 2, 3, 4
case"Q":return quarter+"";// 01, 02, 03, 04
case"QQ":return addLeadingZeros(quarter,2);// 1st, 2nd, 3rd, 4th
case"Qo":return localize.ordinalNumber(quarter,{unit:"quarter"});// Q1, Q2, Q3, Q4
case"QQQ":return localize.quarter(quarter,{width:"abbreviated",context:"formatting"});// 1, 2, 3, 4 (narrow quarter; could be not numerical)
case"QQQQQ":return localize.quarter(quarter,{width:"narrow",context:"formatting"});// 1st quarter, 2nd quarter, ...
case"QQQQ":default:return localize.quarter(quarter,{width:"wide",context:"formatting"});}},// Stand-alone quarter
q:function(date,token,localize){var quarter=Math.ceil((date.getUTCMonth()+1)/3);switch(token){// 1, 2, 3, 4
case"q":return quarter+"";// 01, 02, 03, 04
case"qq":return addLeadingZeros(quarter,2);// 1st, 2nd, 3rd, 4th
case"qo":return localize.ordinalNumber(quarter,{unit:"quarter"});// Q1, Q2, Q3, Q4
case"qqq":return localize.quarter(quarter,{width:"abbreviated",context:"standalone"});// 1, 2, 3, 4 (narrow quarter; could be not numerical)
case"qqqqq":return localize.quarter(quarter,{width:"narrow",context:"standalone"});// 1st quarter, 2nd quarter, ...
case"qqqq":default:return localize.quarter(quarter,{width:"wide",context:"standalone"});}},// Month
M:function(date,token,localize){var month=date.getUTCMonth();switch(token){case"M":case"MM":return formatters.M(date,token);// 1st, 2nd, ..., 12th
case"Mo":return localize.ordinalNumber(month+1,{unit:"month"});// Jan, Feb, ..., Dec
case"MMM":return localize.month(month,{width:"abbreviated",context:"formatting"});// J, F, ..., D
case"MMMMM":return localize.month(month,{width:"narrow",context:"formatting"});// January, February, ..., December
case"MMMM":default:return localize.month(month,{width:"wide",context:"formatting"});}},// Stand-alone month
L:function(date,token,localize){var month=date.getUTCMonth();switch(token){// 1, 2, ..., 12
case"L":return month+1+"";// 01, 02, ..., 12
case"LL":return addLeadingZeros(month+1,2);// 1st, 2nd, ..., 12th
case"Lo":return localize.ordinalNumber(month+1,{unit:"month"});// Jan, Feb, ..., Dec
case"LLL":return localize.month(month,{width:"abbreviated",context:"standalone"});// J, F, ..., D
case"LLLLL":return localize.month(month,{width:"narrow",context:"standalone"});// January, February, ..., December
case"LLLL":default:return localize.month(month,{width:"wide",context:"standalone"});}},// Local week of year
w:function(date,token,localize,options){var week=getUTCWeek(date,options);if("wo"===token){return localize.ordinalNumber(week,{unit:"week"})}return addLeadingZeros(week,token.length)},// ISO week of year
I:function(date,token,localize){var isoWeek=getUTCISOWeek(date);if("Io"===token){return localize.ordinalNumber(isoWeek,{unit:"week"})}return addLeadingZeros(isoWeek,token.length)},// Day of the month
d:function(date,token,localize){if("do"===token){return localize.ordinalNumber(date.getUTCDate(),{unit:"date"})}return formatters.d(date,token)},// Day of year
D:function(date,token,localize){var dayOfYear=getUTCDayOfYear(date);if("Do"===token){return localize.ordinalNumber(dayOfYear,{unit:"dayOfYear"})}return addLeadingZeros(dayOfYear,token.length)},// Day of week
E:function(date,token,localize){var dayOfWeek=date.getUTCDay();switch(token){// Tue
case"E":case"EE":case"EEE":return localize.day(dayOfWeek,{width:"abbreviated",context:"formatting"});// T
case"EEEEE":return localize.day(dayOfWeek,{width:"narrow",context:"formatting"});// Tu
case"EEEEEE":return localize.day(dayOfWeek,{width:"short",context:"formatting"});// Tuesday
case"EEEE":default:return localize.day(dayOfWeek,{width:"wide",context:"formatting"});}},// Local day of week
e:function(date,token,localize,options){var dayOfWeek=date.getUTCDay(),localDayOfWeek=(dayOfWeek-options.weekStartsOn+8)%7||7;switch(token){// Numerical value (Nth day of week with current locale or weekStartsOn)
case"e":return localDayOfWeek+"";// Padded numerical value
case"ee":return addLeadingZeros(localDayOfWeek,2);// 1st, 2nd, ..., 7th
case"eo":return localize.ordinalNumber(localDayOfWeek,{unit:"day"});case"eee":return localize.day(dayOfWeek,{width:"abbreviated",context:"formatting"});// T
case"eeeee":return localize.day(dayOfWeek,{width:"narrow",context:"formatting"});// Tu
case"eeeeee":return localize.day(dayOfWeek,{width:"short",context:"formatting"});// Tuesday
case"eeee":default:return localize.day(dayOfWeek,{width:"wide",context:"formatting"});}},// Stand-alone local day of week
c:function(date,token,localize,options){var dayOfWeek=date.getUTCDay(),localDayOfWeek=(dayOfWeek-options.weekStartsOn+8)%7||7;switch(token){// Numerical value (same as in `e`)
case"c":return localDayOfWeek+"";// Padded numerical value
case"cc":return addLeadingZeros(localDayOfWeek,token.length);// 1st, 2nd, ..., 7th
case"co":return localize.ordinalNumber(localDayOfWeek,{unit:"day"});case"ccc":return localize.day(dayOfWeek,{width:"abbreviated",context:"standalone"});// T
case"ccccc":return localize.day(dayOfWeek,{width:"narrow",context:"standalone"});// Tu
case"cccccc":return localize.day(dayOfWeek,{width:"short",context:"standalone"});// Tuesday
case"cccc":default:return localize.day(dayOfWeek,{width:"wide",context:"standalone"});}},// ISO day of week
i:function(date,token,localize){var dayOfWeek=date.getUTCDay(),isoDayOfWeek=0===dayOfWeek?7:dayOfWeek;switch(token){// 2
case"i":return isoDayOfWeek+"";// 02
case"ii":return addLeadingZeros(isoDayOfWeek,token.length);// 2nd
case"io":return localize.ordinalNumber(isoDayOfWeek,{unit:"day"});// Tue
case"iii":return localize.day(dayOfWeek,{width:"abbreviated",context:"formatting"});// T
case"iiiii":return localize.day(dayOfWeek,{width:"narrow",context:"formatting"});// Tu
case"iiiiii":return localize.day(dayOfWeek,{width:"short",context:"formatting"});// Tuesday
case"iiii":default:return localize.day(dayOfWeek,{width:"wide",context:"formatting"});}},// AM or PM
a:function(date,token,localize){var hours=date.getUTCHours(),dayPeriodEnumValue=1<=hours/12?"pm":"am";switch(token){case"a":case"aa":case"aaa":return localize.dayPeriod(dayPeriodEnumValue,{width:"abbreviated",context:"formatting"});case"aaaaa":return localize.dayPeriod(dayPeriodEnumValue,{width:"narrow",context:"formatting"});case"aaaa":default:return localize.dayPeriod(dayPeriodEnumValue,{width:"wide",context:"formatting"});}},// AM, PM, midnight, noon
b:function(date,token,localize){var hours=date.getUTCHours(),dayPeriodEnumValue;if(12===hours){dayPeriodEnumValue=dayPeriodEnum.noon}else if(0===hours){dayPeriodEnumValue=dayPeriodEnum.midnight}else{dayPeriodEnumValue=1<=hours/12?"pm":"am"}switch(token){case"b":case"bb":case"bbb":return localize.dayPeriod(dayPeriodEnumValue,{width:"abbreviated",context:"formatting"});case"bbbbb":return localize.dayPeriod(dayPeriodEnumValue,{width:"narrow",context:"formatting"});case"bbbb":default:return localize.dayPeriod(dayPeriodEnumValue,{width:"wide",context:"formatting"});}},// in the morning, in the afternoon, in the evening, at night
B:function(date,token,localize){var hours=date.getUTCHours(),dayPeriodEnumValue;if(17<=hours){dayPeriodEnumValue=dayPeriodEnum.evening}else if(12<=hours){dayPeriodEnumValue=dayPeriodEnum.afternoon}else if(4<=hours){dayPeriodEnumValue=dayPeriodEnum.morning}else{dayPeriodEnumValue=dayPeriodEnum.night}switch(token){case"B":case"BB":case"BBB":return localize.dayPeriod(dayPeriodEnumValue,{width:"abbreviated",context:"formatting"});case"BBBBB":return localize.dayPeriod(dayPeriodEnumValue,{width:"narrow",context:"formatting"});case"BBBB":default:return localize.dayPeriod(dayPeriodEnumValue,{width:"wide",context:"formatting"});}},// Hour [1-12]
h:function(date,token,localize){if("ho"===token){var hours=date.getUTCHours()%12;if(0===hours)hours=12;return localize.ordinalNumber(hours,{unit:"hour"})}return formatters.h(date,token)},// Hour [0-23]
H:function(date,token,localize){if("Ho"===token){return localize.ordinalNumber(date.getUTCHours(),{unit:"hour"})}return formatters.H(date,token)},// Hour [0-11]
K:function(date,token,localize){var hours=date.getUTCHours()%12;if("Ko"===token){return localize.ordinalNumber(hours,{unit:"hour"})}return addLeadingZeros(hours,token.length)},// Hour [1-24]
k:function(date,token,localize){var hours=date.getUTCHours();if(0===hours)hours=24;if("ko"===token){return localize.ordinalNumber(hours,{unit:"hour"})}return addLeadingZeros(hours,token.length)},// Minute
m:function(date,token,localize){if("mo"===token){return localize.ordinalNumber(date.getUTCMinutes(),{unit:"minute"})}return formatters.m(date,token)},// Second
s:function(date,token,localize){if("so"===token){return localize.ordinalNumber(date.getUTCSeconds(),{unit:"second"})}return formatters.s(date,token)},// Fraction of second
S:function(date,token){return formatters.S(date,token)},// Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
X:function(date,token,_localize,options){var originalDate=options._originalDate||date,timezoneOffset=originalDate.getTimezoneOffset();if(0===timezoneOffset){return"Z"}switch(token){// Hours and optional minutes
case"X":return formatTimezoneWithOptionalMinutes(timezoneOffset);// Hours, minutes and optional seconds without `:` delimiter
// Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
// so this token always has the same output as `XX`
case"XXXX":case"XX":// Hours and minutes without `:` delimiter
return formatTimezone(timezoneOffset);// Hours, minutes and optional seconds with `:` delimiter
// Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
// so this token always has the same output as `XXX`
case"XXXXX":case"XXX":// Hours and minutes with `:` delimiter
default:return formatTimezone(timezoneOffset,":");}},// Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
x:function(date,token,_localize,options){var originalDate=options._originalDate||date,timezoneOffset=originalDate.getTimezoneOffset();switch(token){// Hours and optional minutes
case"x":return formatTimezoneWithOptionalMinutes(timezoneOffset);// Hours, minutes and optional seconds without `:` delimiter
// Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
// so this token always has the same output as `xx`
case"xxxx":case"xx":// Hours and minutes without `:` delimiter
return formatTimezone(timezoneOffset);// Hours, minutes and optional seconds with `:` delimiter
// Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
// so this token always has the same output as `xxx`
case"xxxxx":case"xxx":// Hours and minutes with `:` delimiter
default:return formatTimezone(timezoneOffset,":");}},// Timezone (GMT)
O:function(date,token,_localize,options){var originalDate=options._originalDate||date,timezoneOffset=originalDate.getTimezoneOffset();switch(token){// Short
case"O":case"OO":case"OOO":return"GMT"+formatTimezoneShort(timezoneOffset,":");// Long
case"OOOO":default:return"GMT"+formatTimezone(timezoneOffset,":");}},// Timezone (specific non-location)
z:function(date,token,_localize,options){var originalDate=options._originalDate||date,timezoneOffset=originalDate.getTimezoneOffset();switch(token){// Short
case"z":case"zz":case"zzz":return"GMT"+formatTimezoneShort(timezoneOffset,":");// Long
case"zzzz":default:return"GMT"+formatTimezone(timezoneOffset,":");}},// Seconds timestamp
t:function(date,token,_localize,options){var originalDate=options._originalDate||date,timestamp=Math.floor(originalDate.getTime()/1e3);return addLeadingZeros(timestamp,token.length)},// Milliseconds timestamp
T:function(date,token,_localize,options){var originalDate=options._originalDate||date,timestamp=originalDate.getTime();return addLeadingZeros(timestamp,token.length)}};_exports.$indexDefault$3=formatters$1;function formatTimezoneShort(offset,dirtyDelimiter){var sign=0<offset?"-":"+",absOffset=Math.abs(offset),hours=Math.floor(absOffset/60),minutes=absOffset%60;if(0===minutes){return sign+(hours+"")}var delimiter=dirtyDelimiter||"";return sign+(hours+"")+delimiter+addLeadingZeros(minutes,2)}function formatTimezoneWithOptionalMinutes(offset,dirtyDelimiter){if(0===offset%60){var sign=0<offset?"-":"+";return sign+addLeadingZeros(Math.abs(offset)/60,2)}return formatTimezone(offset,dirtyDelimiter)}function formatTimezone(offset,dirtyDelimiter){var delimiter=dirtyDelimiter||"",sign=0<offset?"-":"+",absOffset=Math.abs(offset),hours=addLeadingZeros(Math.floor(absOffset/60),2),minutes=addLeadingZeros(absOffset%60,2);return sign+hours+delimiter+minutes}var index$f={default:formatters$1};_exports.$index$3=index$f;function dateLongFormatter(pattern,formatLong){switch(pattern){case"P":return formatLong.date({width:"short"});case"PP":return formatLong.date({width:"medium"});case"PPP":return formatLong.date({width:"long"});case"PPPP":default:return formatLong.date({width:"full"});}}function timeLongFormatter(pattern,formatLong){switch(pattern){case"p":return formatLong.time({width:"short"});case"pp":return formatLong.time({width:"medium"});case"ppp":return formatLong.time({width:"long"});case"pppp":default:return formatLong.time({width:"full"});}}function dateTimeLongFormatter(pattern,formatLong){var matchResult=pattern.match(/(P+)(p+)?/),datePattern=matchResult[1],timePattern=matchResult[2];if(!timePattern){return dateLongFormatter(pattern,formatLong)}var dateTimeFormat;switch(datePattern){case"P":dateTimeFormat=formatLong.dateTime({width:"short"});break;case"PP":dateTimeFormat=formatLong.dateTime({width:"medium"});break;case"PPP":dateTimeFormat=formatLong.dateTime({width:"long"});break;case"PPPP":default:dateTimeFormat=formatLong.dateTime({width:"full"});break;}return dateTimeFormat.replace("{{date}}",dateLongFormatter(datePattern,formatLong)).replace("{{time}}",timeLongFormatter(timePattern,formatLong))}var longFormatters={p:timeLongFormatter,P:dateTimeLongFormatter};_exports.$indexDefault$5=longFormatters;var index$g={default:longFormatters};_exports.$index$5=index$g;var MILLISECONDS_IN_MINUTE=6e4;/**
                                     * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
                                     * They usually appear for dates that denote time before the timezones were introduced
                                     * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
                                     * and GMT+01:00:00 after that date)
                                     *
                                     * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
                                     * which would lead to incorrect calculations.
                                     *
                                     * This function returns the timezone offset in milliseconds that takes seconds in account.
                                     */function getTimezoneOffsetInMilliseconds(dirtyDate){var date=new Date(dirtyDate.getTime()),baseTimezoneOffset=date.getTimezoneOffset();date.setSeconds(0,0);var millisecondsPartOfTimezoneOffset=date.getTime()%MILLISECONDS_IN_MINUTE;return baseTimezoneOffset*MILLISECONDS_IN_MINUTE+millisecondsPartOfTimezoneOffset}var index$h={default:getTimezoneOffsetInMilliseconds};_exports.$index$6=index$h;var protectedDayOfYearTokens=["D","DD"],protectedWeekYearTokens=["YY","YYYY"];function isProtectedDayOfYearToken(token){return-1!==protectedDayOfYearTokens.indexOf(token)}function isProtectedWeekYearToken(token){return-1!==protectedWeekYearTokens.indexOf(token)}function throwProtectedError(token){if("YYYY"===token){throw new RangeError("Use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr")}else if("YY"===token){throw new RangeError("Use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr")}else if("D"===token){throw new RangeError("Use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr")}else if("DD"===token){throw new RangeError("Use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr")}}var index$i={isProtectedDayOfYearToken:isProtectedDayOfYearToken,isProtectedWeekYearToken:isProtectedWeekYearToken,throwProtectedError:throwProtectedError};// See issue: https://github.com/date-fns/date-fns/issues/376
_exports.$index$12=index$i;function setUTCDay(dirtyDate,dirtyDay,dirtyOptions){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var options=dirtyOptions||{},locale=options.locale,localeWeekStartsOn=locale&&locale.options&&locale.options.weekStartsOn,defaultWeekStartsOn=null==localeWeekStartsOn?0:toInteger(localeWeekStartsOn),weekStartsOn=null==options.weekStartsOn?defaultWeekStartsOn:toInteger(options.weekStartsOn);// Test if weekStartsOn is between 0 and 6 _and_ is not NaN
if(!(0<=weekStartsOn&&6>=weekStartsOn)){throw new RangeError("weekStartsOn must be between 0 and 6 inclusively")}var date=toDate(dirtyDate),day=toInteger(dirtyDay),currentDay=date.getUTCDay(),remainder=day%7,dayIndex=(remainder+7)%7,diff=(dayIndex<weekStartsOn?7:0)+day-currentDay;date.setUTCDate(date.getUTCDate()+diff);return date}var index$j={default:setUTCDay};// See issue: https://github.com/date-fns/date-fns/issues/376
_exports.$index$13=index$j;function setUTCISODay(dirtyDate,dirtyDay){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var day=toInteger(dirtyDay);if(0===day%7){day=day-7}var weekStartsOn=1,date=toDate(dirtyDate),currentDay=date.getUTCDay(),remainder=day%7,dayIndex=(remainder+7)%7,diff=(dayIndex<weekStartsOn?7:0)+day-currentDay;date.setUTCDate(date.getUTCDate()+diff);return date}var index$k={default:setUTCISODay};// See issue: https://github.com/date-fns/date-fns/issues/376
_exports.$index$14=index$k;function setUTCISOWeek(dirtyDate,dirtyISOWeek){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),isoWeek=toInteger(dirtyISOWeek),diff=getUTCISOWeek(date)-isoWeek;date.setUTCDate(date.getUTCDate()-7*diff);return date}var index$l={default:setUTCISOWeek};// See issue: https://github.com/date-fns/date-fns/issues/376
_exports.$index$15=index$l;function setUTCWeek(dirtyDate,dirtyWeek,options){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),week=toInteger(dirtyWeek),diff=getUTCWeek(date,options)-week;date.setUTCDate(date.getUTCDate()-7*diff);return date}var index$m={default:setUTCWeek};_exports.$index$16=index$m;function isWeekend(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),day=date.getDay();return 0===day||6===day}var index$n={default:isWeekend};_exports.$index$144=index$n;function addBusinessDays(dirtyDate,dirtyAmount){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),amount=toInteger(dirtyAmount);if(isNaN(amount))return new Date(NaN);var hours=date.getHours(),sign=0>amount?-1:1;date.setDate(date.getDate()+7*toInteger(amount/5));amount%=5;// to get remaining days not part of a full week
// only loops over remaining days or if day is a weekend, ensures a business day is returned
while(amount||isWeekend(date)){date.setDate(date.getDate()+sign);if(!isWeekend(date))amount-=sign}date.setHours(hours);return date}var index$o={default:addBusinessDays};_exports.$index$22=index$o;function addDays(dirtyDate,dirtyAmount){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),amount=toInteger(dirtyAmount);date.setDate(date.getDate()+amount);return date}var index$p={default:addDays};_exports.$index$23=index$p;function addMilliseconds(dirtyDate,dirtyAmount){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var timestamp=toDate(dirtyDate).getTime(),amount=toInteger(dirtyAmount);return new Date(timestamp+amount)}var index$q={default:addMilliseconds};_exports.$index$26=index$q;var MILLISECONDS_IN_HOUR=36e5;/**
                                     * @name addHours
                                     * @category Hour Helpers
                                     * @summary Add the specified number of hours to the given date.
                                     *
                                     * @description
                                     * Add the specified number of hours to the given date.
                                     *
                                     * ### v2.0.0 breaking changes:
                                     *
                                     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
                                     *
                                     * @param {Date|Number} date - the date to be changed
                                     * @param {Number} amount - the amount of hours to be added
                                     * @returns {Date} the new date with the hours added
                                     * @throws {TypeError} 2 arguments required
                                     *
                                     * @example
                                     * // Add 2 hours to 10 July 2014 23:00:00:
                                     * var result = addHours(new Date(2014, 6, 10, 23, 0), 2)
                                     * //=> Fri Jul 11 2014 01:00:00
                                     */function addHours(dirtyDate,dirtyAmount){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var amount=toInteger(dirtyAmount);return addMilliseconds(dirtyDate,amount*MILLISECONDS_IN_HOUR)}var index$r={default:addHours};_exports.$index$24=index$r;function startOfWeek(dirtyDate,dirtyOptions){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var options=dirtyOptions||{},locale=options.locale,localeWeekStartsOn=locale&&locale.options&&locale.options.weekStartsOn,defaultWeekStartsOn=null==localeWeekStartsOn?0:toInteger(localeWeekStartsOn),weekStartsOn=null==options.weekStartsOn?defaultWeekStartsOn:toInteger(options.weekStartsOn);// Test if weekStartsOn is between 0 and 6 _and_ is not NaN
if(!(0<=weekStartsOn&&6>=weekStartsOn)){throw new RangeError("weekStartsOn must be between 0 and 6 inclusively")}var date=toDate(dirtyDate),day=date.getDay(),diff=(day<weekStartsOn?7:0)+day-weekStartsOn;date.setDate(date.getDate()-diff);date.setHours(0,0,0,0);return date}var index$s={default:startOfWeek};_exports.$index$197=index$s;function startOfISOWeek(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return startOfWeek(dirtyDate,{weekStartsOn:1})}var index$t={default:startOfISOWeek};_exports.$index$189=index$t;function getISOWeekYear(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),year=date.getFullYear(),fourthOfJanuaryOfNextYear=new Date(0);fourthOfJanuaryOfNextYear.setFullYear(year+1,0,4);fourthOfJanuaryOfNextYear.setHours(0,0,0,0);var startOfNextYear=startOfISOWeek(fourthOfJanuaryOfNextYear),fourthOfJanuaryOfThisYear=new Date(0);fourthOfJanuaryOfThisYear.setFullYear(year,0,4);fourthOfJanuaryOfThisYear.setHours(0,0,0,0);var startOfThisYear=startOfISOWeek(fourthOfJanuaryOfThisYear);if(date.getTime()>=startOfNextYear.getTime()){return year+1}else if(date.getTime()>=startOfThisYear.getTime()){return year}else{return year-1}}var index$u={default:getISOWeekYear};_exports.$index$91=index$u;function startOfISOWeekYear(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var year=getISOWeekYear(dirtyDate),fourthOfJanuary=new Date(0);fourthOfJanuary.setFullYear(year,0,4);fourthOfJanuary.setHours(0,0,0,0);var date=startOfISOWeek(fourthOfJanuary);return date}var index$v={default:startOfISOWeekYear};_exports.$index$190=index$v;function startOfDay(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate);date.setHours(0,0,0,0);return date}var index$w={default:startOfDay};_exports.$index$186=index$w;var MILLISECONDS_IN_DAY$1=864e5;/**
                                      * @name differenceInCalendarDays
                                      * @category Day Helpers
                                      * @summary Get the number of calendar days between the given dates.
                                      *
                                      * @description
                                      * Get the number of calendar days between the given dates. This means that the times are removed
                                      * from the dates and then the difference in days is calculated.
                                      *
                                      * ### v2.0.0 breaking changes:
                                      *
                                      * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
                                      *
                                      * @param {Date|Number} dateLeft - the later date
                                      * @param {Date|Number} dateRight - the earlier date
                                      * @returns {Number} the number of calendar days
                                      * @throws {TypeError} 2 arguments required
                                      *
                                      * @example
                                      * // How many calendar days are between
                                      * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
                                      * var result = differenceInCalendarDays(
                                      *   new Date(2012, 6, 2, 0, 0),
                                      *   new Date(2011, 6, 2, 23, 0)
                                      * )
                                      * //=> 366
                                      * // How many calendar days are between
                                      * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
                                      * var result = differenceInCalendarDays(
                                      *   new Date(2011, 6, 3, 0, 1),
                                      *   new Date(2011, 6, 2, 23, 59)
                                      * )
                                      * //=> 1
                                      */function differenceInCalendarDays(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var startOfDayLeft=startOfDay(dirtyDateLeft),startOfDayRight=startOfDay(dirtyDateRight),timestampLeft=startOfDayLeft.getTime()-getTimezoneOffsetInMilliseconds(startOfDayLeft),timestampRight=startOfDayRight.getTime()-getTimezoneOffsetInMilliseconds(startOfDayRight);// Round the number of days to the nearest integer
// because the number of milliseconds in a day is not constant
// (e.g. it's different in the day of the daylight saving time clock shift)
return Math.round((timestampLeft-timestampRight)/MILLISECONDS_IN_DAY$1)}var index$x={default:differenceInCalendarDays};_exports.$index$40=index$x;function setISOWeekYear(dirtyDate,dirtyISOWeekYear){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),isoWeekYear=toInteger(dirtyISOWeekYear),diff=differenceInCalendarDays(date,startOfISOWeekYear(date)),fourthOfJanuary=new Date(0);fourthOfJanuary.setFullYear(isoWeekYear,0,4);fourthOfJanuary.setHours(0,0,0,0);date=startOfISOWeekYear(fourthOfJanuary);date.setDate(date.getDate()+diff);return date}var index$y={default:setISOWeekYear};_exports.$index$177=index$y;function addISOWeekYears(dirtyDate,dirtyAmount){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var amount=toInteger(dirtyAmount);return setISOWeekYear(dirtyDate,getISOWeekYear(dirtyDate)+amount)}var index$z={default:addISOWeekYears};_exports.$index$25=index$z;var MILLISECONDS_IN_MINUTE$1=6e4;/**
                                      * @name addMinutes
                                      * @category Minute Helpers
                                      * @summary Add the specified number of minutes to the given date.
                                      *
                                      * @description
                                      * Add the specified number of minutes to the given date.
                                      *
                                      * ### v2.0.0 breaking changes:
                                      *
                                      * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
                                      *
                                      * @param {Date|Number} date - the date to be changed
                                      * @param {Number} amount - the amount of minutes to be added
                                      * @returns {Date} the new date with the minutes added
                                      * @throws {TypeError} 2 arguments required
                                      *
                                      * @example
                                      * // Add 30 minutes to 10 July 2014 12:00:00:
                                      * var result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)
                                      * //=> Thu Jul 10 2014 12:30:00
                                      */function addMinutes(dirtyDate,dirtyAmount){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var amount=toInteger(dirtyAmount);return addMilliseconds(dirtyDate,amount*MILLISECONDS_IN_MINUTE$1)}var index$A={default:addMinutes};_exports.$index$27=index$A;function getDaysInMonth(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),year=date.getFullYear(),monthIndex=date.getMonth(),lastDayOfMonth=new Date(0);lastDayOfMonth.setFullYear(year,monthIndex+1,0);lastDayOfMonth.setHours(0,0,0,0);return lastDayOfMonth.getDate()}var index$B={default:getDaysInMonth};_exports.$index$85=index$B;function addMonths(dirtyDate,dirtyAmount){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),amount=toInteger(dirtyAmount),desiredMonth=date.getMonth()+amount,dateWithDesiredMonth=new Date(0);dateWithDesiredMonth.setFullYear(date.getFullYear(),desiredMonth,1);dateWithDesiredMonth.setHours(0,0,0,0);var daysInMonth=getDaysInMonth(dateWithDesiredMonth);// Set the last day of the new month
// if the original date was the last day of the longer month
date.setMonth(desiredMonth,Math.min(daysInMonth,date.getDate()));return date}var index$C={default:addMonths};_exports.$index$28=index$C;function addQuarters(dirtyDate,dirtyAmount){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var amount=toInteger(dirtyAmount),months=3*amount;return addMonths(dirtyDate,months)}var index$D={default:addQuarters};_exports.$index$29=index$D;function addSeconds(dirtyDate,dirtyAmount){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var amount=toInteger(dirtyAmount);return addMilliseconds(dirtyDate,1e3*amount)}var index$E={default:addSeconds};_exports.$index$30=index$E;function addWeeks(dirtyDate,dirtyAmount){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var amount=toInteger(dirtyAmount),days=7*amount;return addDays(dirtyDate,days)}var index$F={default:addWeeks};_exports.$index$31=index$F;function addYears(dirtyDate,dirtyAmount){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var amount=toInteger(dirtyAmount);return addMonths(dirtyDate,12*amount)}var index$G={default:addYears};_exports.$index$32=index$G;function areIntervalsOverlapping(dirtyIntervalLeft,dirtyIntervalRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var intervalLeft=dirtyIntervalLeft||{},intervalRight=dirtyIntervalRight||{},leftStartTime=toDate(intervalLeft.start).getTime(),leftEndTime=toDate(intervalLeft.end).getTime(),rightStartTime=toDate(intervalRight.start).getTime(),rightEndTime=toDate(intervalRight.end).getTime();// Throw an exception if start date is after end date or if any date is `Invalid Date`
if(!(leftStartTime<=leftEndTime&&rightStartTime<=rightEndTime)){throw new RangeError("Invalid interval")}return leftStartTime<rightEndTime&&rightStartTime<leftEndTime}var index$H={default:areIntervalsOverlapping};_exports.$index$33=index$H;function closestIndexTo(dirtyDateToCompare,dirtyDatesArray){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateToCompare=toDate(dirtyDateToCompare);if(isNaN(dateToCompare)){return NaN}var timeToCompare=dateToCompare.getTime(),datesArray;// `dirtyDatesArray` is undefined or null
if(null==dirtyDatesArray){datesArray=[];// `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method
}else if("function"===typeof dirtyDatesArray.forEach){datesArray=dirtyDatesArray;// If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array
}else{datesArray=Array.prototype.slice.call(dirtyDatesArray)}var result,minDistance;datesArray.forEach(function(dirtyDate,index){var currentDate=toDate(dirtyDate);if(isNaN(currentDate)){result=NaN;minDistance=NaN;return}var distance=Math.abs(timeToCompare-currentDate.getTime());if(null==result||distance<minDistance){result=index;minDistance=distance}});return result}var index$I={default:closestIndexTo};_exports.$index$34=index$I;function closestTo(dirtyDateToCompare,dirtyDatesArray){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateToCompare=toDate(dirtyDateToCompare);if(isNaN(dateToCompare)){return new Date(NaN)}var timeToCompare=dateToCompare.getTime(),datesArray;// `dirtyDatesArray` is undefined or null
if(null==dirtyDatesArray){datesArray=[];// `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method
}else if("function"===typeof dirtyDatesArray.forEach){datesArray=dirtyDatesArray;// If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array
}else{datesArray=Array.prototype.slice.call(dirtyDatesArray)}var result,minDistance;datesArray.forEach(function(dirtyDate){var currentDate=toDate(dirtyDate);if(isNaN(currentDate)){result=new Date(NaN);minDistance=NaN;return}var distance=Math.abs(timeToCompare-currentDate.getTime());if(null==result||distance<minDistance){result=currentDate;minDistance=distance}});return result}var index$J={default:closestTo};_exports.$index$35=index$J;function compareAsc(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateLeft=toDate(dirtyDateLeft),dateRight=toDate(dirtyDateRight),diff=dateLeft.getTime()-dateRight.getTime();if(0>diff){return-1}else if(0<diff){return 1;// Return 0 if diff is 0; return NaN if diff is NaN
}else{return diff}}var index$K={default:compareAsc};_exports.$index$36=index$K;function compareDesc(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateLeft=toDate(dirtyDateLeft),dateRight=toDate(dirtyDateRight),diff=dateLeft.getTime()-dateRight.getTime();if(0<diff){return-1}else if(0>diff){return 1;// Return 0 if diff is 0; return NaN if diff is NaN
}else{return diff}}var index$L={default:compareDesc};/**
    *  Maximum allowed time.
    *  @constant
    *  @type {number}
    *  @default
    */_exports.$index$37=index$L;var maxTime=1e3*(60*(60*(24*Math.pow(10,8))));/**
                                                             *  Minimum allowed time.
                                                             *  @constant
                                                             *  @type {number}
                                                             *  @default
                                                             */_exports.maxTime$1=_exports.maxTime=maxTime;var minTime=-maxTime;_exports.minTime$1=_exports.minTime=minTime;var index$M={maxTime:maxTime,minTime:minTime};_exports.$index$38=index$M;function isValid$1(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate);return!isNaN(date)}var index$N={default:isValid$1};_exports.$index$142=index$N;function isSameDay(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateLeftStartOfDay=startOfDay(dirtyDateLeft),dateRightStartOfDay=startOfDay(dirtyDateRight);return dateLeftStartOfDay.getTime()===dateRightStartOfDay.getTime()}var index$O={default:isSameDay};_exports.$index$118=index$O;function differenceInBusinessDays(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateLeft=toDate(dirtyDateLeft),dateRight=toDate(dirtyDateRight);if(!isValid$1(dateLeft)||!isValid$1(dateRight))return new Date(NaN);var calendarDifference=differenceInCalendarDays(dateLeft,dateRight),sign=0>calendarDifference?-1:1,weeks=toInteger(calendarDifference/7),result=5*weeks;dateRight=addDays(dateRight,7*weeks);// the loop below will run at most 6 times to account for the remaining days that don't makeup a full week
while(!isSameDay(dateLeft,dateRight)){// sign is used to account for both negative and positive differences
result+=isWeekend(dateRight)?0:sign;dateRight=addDays(dateRight,sign)}return 0===result?0:result}var index$P={default:differenceInBusinessDays};_exports.$index$39=index$P;function differenceInCalendarISOWeekYears(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}return getISOWeekYear(dirtyDateLeft)-getISOWeekYear(dirtyDateRight)}var index$Q={default:differenceInCalendarISOWeekYears};_exports.$index$41=index$Q;var MILLISECONDS_IN_WEEK$2=6048e5;/**
                                        * @name differenceInCalendarISOWeeks
                                        * @category ISO Week Helpers
                                        * @summary Get the number of calendar ISO weeks between the given dates.
                                        *
                                        * @description
                                        * Get the number of calendar ISO weeks between the given dates.
                                        *
                                        * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
                                        *
                                        * ### v2.0.0 breaking changes:
                                        *
                                        * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
                                        *
                                        * @param {Date|Number} dateLeft - the later date
                                        * @param {Date|Number} dateRight - the earlier date
                                        * @returns {Number} the number of calendar ISO weeks
                                        * @throws {TypeError} 2 arguments required
                                        *
                                        * @example
                                        * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?
                                        * var result = differenceInCalendarISOWeeks(
                                        *   new Date(2014, 6, 21),
                                        *   new Date(2014, 6, 6)
                                        * )
                                        * //=> 3
                                        */function differenceInCalendarISOWeeks(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var startOfISOWeekLeft=startOfISOWeek(dirtyDateLeft),startOfISOWeekRight=startOfISOWeek(dirtyDateRight),timestampLeft=startOfISOWeekLeft.getTime()-getTimezoneOffsetInMilliseconds(startOfISOWeekLeft),timestampRight=startOfISOWeekRight.getTime()-getTimezoneOffsetInMilliseconds(startOfISOWeekRight);// Round the number of days to the nearest integer
// because the number of milliseconds in a week is not constant
// (e.g. it's different in the week of the daylight saving time clock shift)
return Math.round((timestampLeft-timestampRight)/MILLISECONDS_IN_WEEK$2)}var index$R={default:differenceInCalendarISOWeeks};_exports.$index$42=index$R;function differenceInCalendarMonths(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateLeft=toDate(dirtyDateLeft),dateRight=toDate(dirtyDateRight),yearDiff=dateLeft.getFullYear()-dateRight.getFullYear(),monthDiff=dateLeft.getMonth()-dateRight.getMonth();return 12*yearDiff+monthDiff}var index$S={default:differenceInCalendarMonths};_exports.$index$43=index$S;function getQuarter(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),quarter=Math.floor(date.getMonth()/3)+1;return quarter}var index$T={default:getQuarter};_exports.$index$97=index$T;function differenceInCalendarQuarters(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateLeft=toDate(dirtyDateLeft),dateRight=toDate(dirtyDateRight),yearDiff=dateLeft.getFullYear()-dateRight.getFullYear(),quarterDiff=getQuarter(dateLeft)-getQuarter(dateRight);return 4*yearDiff+quarterDiff}var index$U={default:differenceInCalendarQuarters};_exports.$index$44=index$U;var MILLISECONDS_IN_WEEK$3=6048e5;/**
                                        * @name differenceInCalendarWeeks
                                        * @category Week Helpers
                                        * @summary Get the number of calendar weeks between the given dates.
                                        *
                                        * @description
                                        * Get the number of calendar weeks between the given dates.
                                        *
                                        * ### v2.0.0 breaking changes:
                                        *
                                        * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
                                        *
                                        * @param {Date|Number} dateLeft - the later date
                                        * @param {Date|Number} dateRight - the earlier date
                                        * @param {Object} [options] - an object with options.
                                        * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
                                        * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
                                        * @returns {Number} the number of calendar weeks
                                        * @throws {TypeError} 2 arguments required
                                        * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
                                        *
                                        * @example
                                        * // How many calendar weeks are between 5 July 2014 and 20 July 2014?
                                        * var result = differenceInCalendarWeeks(
                                        *   new Date(2014, 6, 20),
                                        *   new Date(2014, 6, 5)
                                        * )
                                        * //=> 3
                                        *
                                        * @example
                                        * // If the week starts on Monday,
                                        * // how many calendar weeks are between 5 July 2014 and 20 July 2014?
                                        * var result = differenceInCalendarWeeks(
                                        *   new Date(2014, 6, 20),
                                        *   new Date(2014, 6, 5),
                                        *   { weekStartsOn: 1 }
                                        * )
                                        * //=> 2
                                        */function differenceInCalendarWeeks(dirtyDateLeft,dirtyDateRight,dirtyOptions){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var startOfWeekLeft=startOfWeek(dirtyDateLeft,dirtyOptions),startOfWeekRight=startOfWeek(dirtyDateRight,dirtyOptions),timestampLeft=startOfWeekLeft.getTime()-getTimezoneOffsetInMilliseconds(startOfWeekLeft),timestampRight=startOfWeekRight.getTime()-getTimezoneOffsetInMilliseconds(startOfWeekRight);// Round the number of days to the nearest integer
// because the number of milliseconds in a week is not constant
// (e.g. it's different in the week of the daylight saving time clock shift)
return Math.round((timestampLeft-timestampRight)/MILLISECONDS_IN_WEEK$3)}var index$V={default:differenceInCalendarWeeks};_exports.$index$45=index$V;function differenceInCalendarYears(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateLeft=toDate(dirtyDateLeft),dateRight=toDate(dirtyDateRight);return dateLeft.getFullYear()-dateRight.getFullYear()}var index$W={default:differenceInCalendarYears};_exports.$index$46=index$W;function differenceInDays(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateLeft=toDate(dirtyDateLeft),dateRight=toDate(dirtyDateRight),sign=compareAsc(dateLeft,dateRight),difference=Math.abs(differenceInCalendarDays(dateLeft,dateRight));dateLeft.setDate(dateLeft.getDate()-sign*difference);// Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full
// If so, result must be decreased by 1 in absolute value
var isLastDayNotFull=compareAsc(dateLeft,dateRight)===-sign,result=sign*(difference-isLastDayNotFull);// Prevent negative zero
return 0===result?0:result}var index$X={default:differenceInDays};_exports.$index$47=index$X;function differenceInMilliseconds(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateLeft=toDate(dirtyDateLeft),dateRight=toDate(dirtyDateRight);return dateLeft.getTime()-dateRight.getTime()}var index$Y={default:differenceInMilliseconds};_exports.$index$50=index$Y;var MILLISECONDS_IN_HOUR$1=36e5;/**
                                      * @name differenceInHours
                                      * @category Hour Helpers
                                      * @summary Get the number of hours between the given dates.
                                      *
                                      * @description
                                      * Get the number of hours between the given dates.
                                      *
                                      * ### v2.0.0 breaking changes:
                                      *
                                      * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
                                      *
                                      * @param {Date|Number} dateLeft - the later date
                                      * @param {Date|Number} dateRight - the earlier date
                                      * @returns {Number} the number of hours
                                      * @throws {TypeError} 2 arguments required
                                      *
                                      * @example
                                      * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?
                                      * var result = differenceInHours(
                                      *   new Date(2014, 6, 2, 19, 0),
                                      *   new Date(2014, 6, 2, 6, 50)
                                      * )
                                      * //=> 12
                                      */function differenceInHours(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var diff=differenceInMilliseconds(dirtyDateLeft,dirtyDateRight)/MILLISECONDS_IN_HOUR$1;return 0<diff?Math.floor(diff):Math.ceil(diff)}var index$Z={default:differenceInHours};_exports.$index$48=index$Z;function subISOWeekYears(dirtyDate,dirtyAmount){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var amount=toInteger(dirtyAmount);return addISOWeekYears(dirtyDate,-amount)}var index$_={default:subISOWeekYears};_exports.$index$203=index$_;function differenceInISOWeekYears(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateLeft=toDate(dirtyDateLeft),dateRight=toDate(dirtyDateRight),sign=compareAsc(dateLeft,dateRight),difference=Math.abs(differenceInCalendarISOWeekYears(dateLeft,dateRight));dateLeft=subISOWeekYears(dateLeft,sign*difference);// Math.abs(diff in full ISO years - diff in calendar ISO years) === 1
// if last calendar ISO year is not full
// If so, result must be decreased by 1 in absolute value
var isLastISOWeekYearNotFull=compareAsc(dateLeft,dateRight)===-sign,result=sign*(difference-isLastISOWeekYearNotFull);// Prevent negative zero
return 0===result?0:result}var index$$={default:differenceInISOWeekYears};_exports.$index$49=index$$;var MILLISECONDS_IN_MINUTE$2=6e4;/**
                                      * @name differenceInMinutes
                                      * @category Minute Helpers
                                      * @summary Get the number of minutes between the given dates.
                                      *
                                      * @description
                                      * Get the number of minutes between the given dates.
                                      *
                                      * ### v2.0.0 breaking changes:
                                      *
                                      * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
                                      *
                                      * @param {Date|Number} dateLeft - the later date
                                      * @param {Date|Number} dateRight - the earlier date
                                      * @returns {Number} the number of minutes
                                      * @throws {TypeError} 2 arguments required
                                      *
                                      * @example
                                      * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?
                                      * var result = differenceInMinutes(
                                      *   new Date(2014, 6, 2, 12, 20, 0),
                                      *   new Date(2014, 6, 2, 12, 7, 59)
                                      * )
                                      * //=> 12
                                      */function differenceInMinutes(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var diff=differenceInMilliseconds(dirtyDateLeft,dirtyDateRight)/MILLISECONDS_IN_MINUTE$2;return 0<diff?Math.floor(diff):Math.ceil(diff)}var index$10={default:differenceInMinutes};_exports.$index$51=index$10;function differenceInMonths(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateLeft=toDate(dirtyDateLeft),dateRight=toDate(dirtyDateRight),sign=compareAsc(dateLeft,dateRight),difference=Math.abs(differenceInCalendarMonths(dateLeft,dateRight));dateLeft.setMonth(dateLeft.getMonth()-sign*difference);// Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full
// If so, result must be decreased by 1 in absolute value
var isLastMonthNotFull=compareAsc(dateLeft,dateRight)===-sign,result=sign*(difference-isLastMonthNotFull);// Prevent negative zero
return 0===result?0:result}var index$11={default:differenceInMonths};_exports.$index$52=index$11;function differenceInQuarters(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var diff=differenceInMonths(dirtyDateLeft,dirtyDateRight)/3;return 0<diff?Math.floor(diff):Math.ceil(diff)}var index$12={default:differenceInQuarters};_exports.$index$53=index$12;function differenceInSeconds(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var diff=differenceInMilliseconds(dirtyDateLeft,dirtyDateRight)/1e3;return 0<diff?Math.floor(diff):Math.ceil(diff)}var index$13={default:differenceInSeconds};_exports.$index$54=index$13;function differenceInWeeks(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var diff=differenceInDays(dirtyDateLeft,dirtyDateRight)/7;return 0<diff?Math.floor(diff):Math.ceil(diff)}var index$14={default:differenceInWeeks};_exports.$index$55=index$14;function differenceInYears(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateLeft=toDate(dirtyDateLeft),dateRight=toDate(dirtyDateRight),sign=compareAsc(dateLeft,dateRight),difference=Math.abs(differenceInCalendarYears(dateLeft,dateRight));dateLeft.setFullYear(dateLeft.getFullYear()-sign*difference);// Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full
// If so, result must be decreased by 1 in absolute value
var isLastYearNotFull=compareAsc(dateLeft,dateRight)===-sign,result=sign*(difference-isLastYearNotFull);// Prevent negative zero
return 0===result?0:result}var index$15={default:differenceInYears};_exports.$index$56=index$15;function eachDayOfInterval(dirtyInterval,options){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var interval=dirtyInterval||{},startDate=toDate(interval.start),endDate=toDate(interval.end),endTime=endDate.getTime();// Throw an exception if start date is after end date or if any date is `Invalid Date`
if(!(startDate.getTime()<=endTime)){throw new RangeError("Invalid interval")}var dates=[],currentDate=startDate;currentDate.setHours(0,0,0,0);var step=options&&"step"in options?+options.step:1;if(1>step||isNaN(step))throw new RangeError("`options.step` must be a number greater than 1");while(currentDate.getTime()<=endTime){dates.push(toDate(currentDate));currentDate.setDate(currentDate.getDate()+step);currentDate.setHours(0,0,0,0)}return dates}var index$16={default:eachDayOfInterval};_exports.$index$57=index$16;function eachWeekOfInterval(dirtyInterval,options){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var interval=dirtyInterval||{},startDate=toDate(interval.start),endDate=toDate(interval.end),endTime=endDate.getTime();// Throw an exception if start date is after end date or if any date is `Invalid Date`
if(!(startDate.getTime()<=endTime)){throw new RangeError("Invalid interval")}var startDateWeek=startOfWeek(startDate,options),endDateWeek=startOfWeek(endDate,options);// Some timezones switch DST at midnight, making start of day unreliable in these timezones, 3pm is a safe bet
startDateWeek.setHours(15);endDateWeek.setHours(15);endTime=endDateWeek.getTime();var weeks=[],currentWeek=startDateWeek;while(currentWeek.getTime()<=endTime){currentWeek.setHours(0);weeks.push(toDate(currentWeek));currentWeek=addWeeks(currentWeek,1);currentWeek.setHours(15)}return weeks}var index$17={default:eachWeekOfInterval};_exports.$index$58=index$17;function isSunday(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return 0===toDate(dirtyDate).getDay()}var index$18={default:isSunday};_exports.$index$129=index$18;function eachWeekendOfInterval(interval){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var dateInterval=eachDayOfInterval(interval),weekends=[],index=0;while(index<dateInterval.length){var date=dateInterval[index++];if(isWeekend(date)){weekends.push(date);if(isSunday(date))index=index+5}}return weekends}var index$19={default:eachWeekendOfInterval};_exports.$index$59=index$19;function startOfMonth(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate);date.setDate(1);date.setHours(0,0,0,0);return date}var index$1a={default:startOfMonth};_exports.$index$192=index$1a;function endOfMonth(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),month=date.getMonth();date.setFullYear(date.getFullYear(),month+1,0);date.setHours(23,59,59,999);return date}var index$1b={default:endOfMonth};_exports.$index$68=index$1b;function eachWeekendOfMonth(dirtyDate){if(1>arguments.length){throw new TypeError("1 arguments required, but only "+arguments.length+" present")}var startDate=startOfMonth(dirtyDate);if(isNaN(startDate))throw new RangeError("The passed date is invalid");var endDate=endOfMonth(dirtyDate);return eachWeekendOfInterval({start:startDate,end:endDate})}var index$1c={default:eachWeekendOfMonth};_exports.$index$60=index$1c;function startOfYear(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var cleanDate=toDate(dirtyDate),date=new Date(0);date.setFullYear(cleanDate.getFullYear(),0,1);date.setHours(0,0,0,0);return date}var index$1d={default:startOfYear};_exports.$index$199=index$1d;function endOfYear(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),year=date.getFullYear();date.setFullYear(year+1,0,0);date.setHours(23,59,59,999);return date}var index$1e={default:endOfYear};_exports.$index$74=index$1e;function eachWeekendOfYear(dirtyDate){if(1>arguments.length){throw new TypeError("1 arguments required, but only "+arguments.length+" present")}var startDate=startOfYear(dirtyDate);if(isNaN(startDate))throw new RangeError("The passed date is invalid");var endDate=endOfYear(dirtyDate);return eachWeekendOfInterval({start:startDate,end:endDate})}var index$1f={default:eachWeekendOfYear};_exports.$index$61=index$1f;function endOfDay(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate);date.setHours(23,59,59,999);return date}var index$1g={default:endOfDay};_exports.$index$62=index$1g;function endOfDecade(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),year=date.getFullYear(),decade=9+10*Math.floor(year/10);date.setFullYear(decade,11,31);date.setHours(23,59,59,999);return date}var index$1h={default:endOfDecade};_exports.$index$63=index$1h;function endOfHour(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate);date.setMinutes(59,59,999);return date}var index$1i={default:endOfHour};_exports.$index$64=index$1i;function endOfWeek(dirtyDate,dirtyOptions){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var options=dirtyOptions||{},locale=options.locale,localeWeekStartsOn=locale&&locale.options&&locale.options.weekStartsOn,defaultWeekStartsOn=null==localeWeekStartsOn?0:toInteger(localeWeekStartsOn),weekStartsOn=null==options.weekStartsOn?defaultWeekStartsOn:toInteger(options.weekStartsOn);// Test if weekStartsOn is between 0 and 6 _and_ is not NaN
if(!(0<=weekStartsOn&&6>=weekStartsOn)){throw new RangeError("weekStartsOn must be between 0 and 6 inclusively")}var date=toDate(dirtyDate),day=date.getDay(),diff=(day<weekStartsOn?-7:0)+6-(day-weekStartsOn);date.setDate(date.getDate()+diff);date.setHours(23,59,59,999);return date}var index$1j={default:endOfWeek};_exports.$index$73=index$1j;function endOfISOWeek(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return endOfWeek(dirtyDate,{weekStartsOn:1})}var index$1k={default:endOfISOWeek};_exports.$index$65=index$1k;function endOfISOWeekYear(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var year=getISOWeekYear(dirtyDate),fourthOfJanuaryOfNextYear=new Date(0);fourthOfJanuaryOfNextYear.setFullYear(year+1,0,4);fourthOfJanuaryOfNextYear.setHours(0,0,0,0);var date=startOfISOWeek(fourthOfJanuaryOfNextYear);date.setMilliseconds(date.getMilliseconds()-1);return date}var index$1l={default:endOfISOWeekYear};_exports.$index$66=index$1l;function endOfMinute(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate);date.setSeconds(59,999);return date}var index$1m={default:endOfMinute};_exports.$index$67=index$1m;function endOfQuarter(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),currentMonth=date.getMonth(),month=currentMonth-currentMonth%3+3;date.setMonth(month,0);date.setHours(23,59,59,999);return date}var index$1n={default:endOfQuarter};_exports.$index$69=index$1n;function endOfSecond(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate);date.setMilliseconds(999);return date}var index$1o={default:endOfSecond};_exports.$index$70=index$1o;function endOfToday(){return endOfDay(Date.now())}var index$1p={default:endOfToday};/**
    * @name endOfTomorrow
    * @category Day Helpers
    * @summary Return the end of tomorrow.
    * @pure false
    *
    * @description
    * Return the end of tomorrow.
    *
    * > ⚠️ Please note that this function is not present in the FP submodule as
    * > it uses `Date.now()` internally hence impure and can't be safely curried.
    *
    * ### v2.0.0 breaking changes:
    *
    * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
    *
    * @returns {Date} the end of tomorrow
    *
    * @example
    * // If today is 6 October 2014:
    * var result = endOfTomorrow()
    * //=> Tue Oct 7 2014 23:59:59.999
    */_exports.$index$71=index$1p;function endOfTomorrow(){var now=new Date,year=now.getFullYear(),month=now.getMonth(),day=now.getDate(),date=new Date(0);date.setFullYear(year,month,day+1);date.setHours(23,59,59,999);return date}var index$1q={default:endOfTomorrow};/**
    * @name endOfYesterday
    * @category Day Helpers
    * @summary Return the end of yesterday.
    * @pure false
    *
    * @description
    * Return the end of yesterday.
    *
    * > ⚠️ Please note that this function is not present in the FP submodule as
    * > it uses `Date.now()` internally hence impure and can't be safely curried.
    *
    * ### v2.0.0 breaking changes:
    *
    * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
    *
    * @returns {Date} the end of yesterday
    *
    * @example
    * // If today is 6 October 2014:
    * var result = endOfYesterday()
    * //=> Sun Oct 5 2014 23:59:59.999
    */_exports.$index$72=index$1q;function endOfYesterday(){var now=new Date,year=now.getFullYear(),month=now.getMonth(),day=now.getDate(),date=new Date(0);date.setFullYear(year,month,day-1);date.setHours(23,59,59,999);return date}var index$1r={default:endOfYesterday};_exports.$index$75=index$1r;var formatDistanceLocale={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function formatDistance(token,count,options){options=options||{};var result;if("string"===typeof formatDistanceLocale[token]){result=formatDistanceLocale[token]}else if(1===count){result=formatDistanceLocale[token].one}else{result=formatDistanceLocale[token].other.replace("{{count}}",count)}if(options.addSuffix){if(0<options.comparison){return"in "+result}else{return result+" ago"}}return result}var index$1s={default:formatDistance};_exports.$index$159=index$1s;function buildFormatLongFn(args){return function(dirtyOptions){var options=dirtyOptions||{},width=options.width?options.width+"":args.defaultWidth,format=args.formats[width]||args.formats[args.defaultWidth];return format}}var index$1t={default:buildFormatLongFn};_exports.$index$155=index$1t;var dateFormats={full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},timeFormats={full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},dateTimeFormats={full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},formatLong={date:buildFormatLongFn({formats:dateFormats,defaultWidth:"full"}),time:buildFormatLongFn({formats:timeFormats,defaultWidth:"full"}),dateTime:buildFormatLongFn({formats:dateTimeFormats,defaultWidth:"full"})};_exports.$indexDefault$157=formatLong;var index$1u={default:formatLong};_exports.$index$160=index$1u;var formatRelativeLocale={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function formatRelative(token,_date,_baseDate,_options){return formatRelativeLocale[token]}var index$1v={default:formatRelative};_exports.$index$161=index$1v;function buildLocalizeFn(args){return function(dirtyIndex,dirtyOptions){var options=dirtyOptions||{},context=options.context?options.context+"":"standalone",valuesArray;if("formatting"===context&&args.formattingValues){var defaultWidth=args.defaultFormattingWidth||args.defaultWidth,width=options.width?options.width+"":defaultWidth;valuesArray=args.formattingValues[width]||args.formattingValues[defaultWidth]}else{var _defaultWidth=args.defaultWidth,_width=options.width?options.width+"":args.defaultWidth;valuesArray=args.values[_width]||args.values[_defaultWidth]}var index=args.argumentCallback?args.argumentCallback(dirtyIndex):dirtyIndex;return valuesArray[index]}}var index$1w={default:buildLocalizeFn};_exports.$index$156=index$1w;var eraValues={narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},quarterValues={narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
},monthValues={narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},dayValues={narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},dayPeriodValues={narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},formattingDayPeriodValues={narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}};function ordinalNumber(dirtyNumber,_dirtyOptions){var number=+dirtyNumber,rem100=number%100;// If ordinal numbers depend on context, for example,
// if they are different for different grammatical genders,
// use `options.unit`:
//
//   var options = dirtyOptions || {}
//   var unit = String(options.unit)
//
// where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
// 'day', 'hour', 'minute', 'second'
if(20<rem100||10>rem100){switch(rem100%10){case 1:return number+"st";case 2:return number+"nd";case 3:return number+"rd";}}return number+"th"}var localize={ordinalNumber:ordinalNumber,era:buildLocalizeFn({values:eraValues,defaultWidth:"wide"}),quarter:buildLocalizeFn({values:quarterValues,defaultWidth:"wide",argumentCallback:function(quarter){return+quarter-1}}),month:buildLocalizeFn({values:monthValues,defaultWidth:"wide"}),day:buildLocalizeFn({values:dayValues,defaultWidth:"wide"}),dayPeriod:buildLocalizeFn({values:dayPeriodValues,defaultWidth:"wide",formattingValues:formattingDayPeriodValues,defaultFormattingWidth:"wide"})};_exports.$indexDefault$159=localize;var index$1x={default:localize};_exports.$index$162=index$1x;function buildMatchPatternFn(args){return function(dirtyString,dirtyOptions){var string=dirtyString+"",options=dirtyOptions||{},matchResult=string.match(args.matchPattern);if(!matchResult){return null}var matchedString=matchResult[0],parseResult=string.match(args.parsePattern);if(!parseResult){return null}var value=args.valueCallback?args.valueCallback(parseResult[0]):parseResult[0];value=options.valueCallback?options.valueCallback(value):value;return{value:value,rest:string.slice(matchedString.length)}}}var index$1y={default:buildMatchPatternFn};_exports.$index$158=index$1y;function buildMatchFn(args){return function(dirtyString,dirtyOptions){var string=dirtyString+"",options=dirtyOptions||{},width=options.width,matchPattern=width&&args.matchPatterns[width]||args.matchPatterns[args.defaultMatchWidth],matchResult=string.match(matchPattern);if(!matchResult){return null}var matchedString=matchResult[0],parsePatterns=width&&args.parsePatterns[width]||args.parsePatterns[args.defaultParseWidth],value;if("[object Array]"===Object.prototype.toString.call(parsePatterns)){value=parsePatterns.findIndex(function(pattern){return pattern.test(string)})}else{value=findKey(parsePatterns,function(pattern){return pattern.test(string)})}value=args.valueCallback?args.valueCallback(value):value;value=options.valueCallback?options.valueCallback(value):value;return{value:value,rest:string.slice(matchedString.length)}}}function findKey(object,predicate){for(var key in object){if(object.hasOwnProperty(key)&&predicate(object[key])){return key}}}var index$1z={default:buildMatchFn};_exports.$index$157=index$1z;var matchOrdinalNumberPattern=/^(\d+)(th|st|nd|rd)?/i,parseOrdinalNumberPattern=/\d+/i,matchEraPatterns={narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},parseEraPatterns={any:[/^b/i,/^(a|c)/i]},matchQuarterPatterns={narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},parseQuarterPatterns={any:[/1/i,/2/i,/3/i,/4/i]},matchMonthPatterns={narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},parseMonthPatterns={narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},matchDayPatterns={narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},parseDayPatterns={narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},matchDayPeriodPatterns={narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},parseDayPeriodPatterns={any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},match={ordinalNumber:buildMatchPatternFn({matchPattern:matchOrdinalNumberPattern,parsePattern:parseOrdinalNumberPattern,valueCallback:function(value){return parseInt(value,10)}}),era:buildMatchFn({matchPatterns:matchEraPatterns,defaultMatchWidth:"wide",parsePatterns:parseEraPatterns,defaultParseWidth:"any"}),quarter:buildMatchFn({matchPatterns:matchQuarterPatterns,defaultMatchWidth:"wide",parsePatterns:parseQuarterPatterns,defaultParseWidth:"any",valueCallback:function(index){return index+1}}),month:buildMatchFn({matchPatterns:matchMonthPatterns,defaultMatchWidth:"wide",parsePatterns:parseMonthPatterns,defaultParseWidth:"any"}),day:buildMatchFn({matchPatterns:matchDayPatterns,defaultMatchWidth:"wide",parsePatterns:parseDayPatterns,defaultParseWidth:"any"}),dayPeriod:buildMatchFn({matchPatterns:matchDayPeriodPatterns,defaultMatchWidth:"any",parsePatterns:parseDayPeriodPatterns,defaultParseWidth:"any"})};_exports.$indexDefault$160=match;var index$1A={default:match};_exports.$index$163=index$1A;var locale={formatDistance:formatDistance,formatLong:formatLong,formatRelative:formatRelative,localize:localize,match:match,options:{weekStartsOn:0/* Sunday */,firstWeekContainsDate:1}};_exports.$indexDefault$161=locale;var index$1B={default:locale};_exports.$index$164=index$1B;function subMilliseconds(dirtyDate,dirtyAmount){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var amount=toInteger(dirtyAmount);return addMilliseconds(dirtyDate,-amount)}var index$1C={default:subMilliseconds};// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
_exports.$index$204=index$1C;var formattingTokensRegExp=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,longFormattingTokensRegExp=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,escapedStringRegExp=/^'(.*?)'?$/,doubleQuoteRegExp=/''/g,unescapedLatinCharacterRegExp=/[a-zA-Z]/;// This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
/**
                                                 * @name format
                                                 * @category Common Helpers
                                                 * @summary Format the date.
                                                 *
                                                 * @description
                                                 * Return the formatted date string in the given format. The result may vary by locale.
                                                 *
                                                 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
                                                 * > See: https://git.io/fxCyr
                                                 *
                                                 * The characters wrapped between two single quotes characters (') are escaped.
                                                 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
                                                 * (see the last example)
                                                 *
                                                 * Format of the string is based on Unicode Technical Standard #35:
                                                 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
                                                 * with a few additions (see note 7 below the table).
                                                 *
                                                 * Accepted patterns:
                                                 * | Unit                            | Pattern | Result examples                   | Notes |
                                                 * |---------------------------------|---------|-----------------------------------|-------|
                                                 * | Era                             | G..GGG  | AD, BC                            |       |
                                                 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
                                                 * |                                 | GGGGG   | A, B                              |       |
                                                 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
                                                 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
                                                 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
                                                 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
                                                 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
                                                 * |                                 | yyyyy   | ...                               | 3,5   |
                                                 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
                                                 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
                                                 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
                                                 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
                                                 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
                                                 * |                                 | YYYYY   | ...                               | 3,5   |
                                                 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
                                                 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
                                                 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
                                                 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
                                                 * |                                 | RRRRR   | ...                               | 3,5,7 |
                                                 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
                                                 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
                                                 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
                                                 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
                                                 * |                                 | uuuuu   | ...                               | 3,5   |
                                                 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
                                                 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
                                                 * |                                 | QQ      | 01, 02, 03, 04                    |       |
                                                 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
                                                 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
                                                 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
                                                 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
                                                 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
                                                 * |                                 | qq      | 01, 02, 03, 04                    |       |
                                                 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
                                                 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
                                                 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
                                                 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
                                                 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
                                                 * |                                 | MM      | 01, 02, ..., 12                   |       |
                                                 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
                                                 * |                                 | MMMM    | January, February, ..., December  | 2     |
                                                 * |                                 | MMMMM   | J, F, ..., D                      |       |
                                                 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
                                                 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
                                                 * |                                 | LL      | 01, 02, ..., 12                   |       |
                                                 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
                                                 * |                                 | LLLL    | January, February, ..., December  | 2     |
                                                 * |                                 | LLLLL   | J, F, ..., D                      |       |
                                                 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
                                                 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
                                                 * |                                 | ww      | 01, 02, ..., 53                   |       |
                                                 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
                                                 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
                                                 * |                                 | II      | 01, 02, ..., 53                   | 7     |
                                                 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
                                                 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
                                                 * |                                 | dd      | 01, 02, ..., 31                   |       |
                                                 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
                                                 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
                                                 * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
                                                 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
                                                 * |                                 | DDDD    | ...                               | 3     |
                                                 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Su            |       |
                                                 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
                                                 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
                                                 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
                                                 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
                                                 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
                                                 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
                                                 * |                                 | iii     | Mon, Tue, Wed, ..., Su            | 7     |
                                                 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
                                                 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
                                                 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |
                                                 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
                                                 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
                                                 * |                                 | ee      | 02, 03, ..., 01                   |       |
                                                 * |                                 | eee     | Mon, Tue, Wed, ..., Su            |       |
                                                 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
                                                 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
                                                 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
                                                 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
                                                 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
                                                 * |                                 | cc      | 02, 03, ..., 01                   |       |
                                                 * |                                 | ccc     | Mon, Tue, Wed, ..., Su            |       |
                                                 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
                                                 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
                                                 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
                                                 * | AM, PM                          | a..aaa  | AM, PM                            |       |
                                                 * |                                 | aaaa    | a.m., p.m.                        | 2     |
                                                 * |                                 | aaaaa   | a, p                              |       |
                                                 * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |
                                                 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
                                                 * |                                 | bbbbb   | a, p, n, mi                       |       |
                                                 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
                                                 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
                                                 * |                                 | BBBBB   | at night, in the morning, ...     |       |
                                                 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
                                                 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
                                                 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
                                                 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
                                                 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
                                                 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
                                                 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
                                                 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
                                                 * |                                 | KK      | 1, 2, ..., 11, 0                  |       |
                                                 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
                                                 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
                                                 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
                                                 * | Minute                          | m       | 0, 1, ..., 59                     |       |
                                                 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
                                                 * |                                 | mm      | 00, 01, ..., 59                   |       |
                                                 * | Second                          | s       | 0, 1, ..., 59                     |       |
                                                 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
                                                 * |                                 | ss      | 00, 01, ..., 59                   |       |
                                                 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
                                                 * |                                 | SS      | 00, 01, ..., 99                   |       |
                                                 * |                                 | SSS     | 000, 0001, ..., 999               |       |
                                                 * |                                 | SSSS    | ...                               | 3     |
                                                 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
                                                 * |                                 | XX      | -0800, +0530, Z                   |       |
                                                 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
                                                 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
                                                 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
                                                 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
                                                 * |                                 | xx      | -0800, +0530, +0000               |       |
                                                 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
                                                 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
                                                 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
                                                 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
                                                 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
                                                 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
                                                 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
                                                 * | Seconds timestamp               | t       | 512969520                         | 7     |
                                                 * |                                 | tt      | ...                               | 3,7   |
                                                 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
                                                 * |                                 | TT      | ...                               | 3,7   |
                                                 * | Long localized date             | P       | 05/29/1453                        | 7     |
                                                 * |                                 | PP      | May 29, 1453                      | 7     |
                                                 * |                                 | PPP     | May 29th, 1453                    | 7     |
                                                 * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |
                                                 * | Long localized time             | p       | 12:00 AM                          | 7     |
                                                 * |                                 | pp      | 12:00:00 AM                       | 7     |
                                                 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
                                                 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
                                                 * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |
                                                 * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |
                                                 * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |
                                                 * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |
                                                 * Notes:
                                                 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
                                                 *    are the same as "stand-alone" units, but are different in some languages.
                                                 *    "Formatting" units are declined according to the rules of the language
                                                 *    in the context of a date. "Stand-alone" units are always nominative singular:
                                                 *
                                                 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
                                                 *
                                                 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
                                                 *
                                                 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
                                                 *    the single quote characters (see below).
                                                 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
                                                 *    the output will be the same as default pattern for this unit, usually
                                                 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
                                                 *    are marked with "2" in the last column of the table.
                                                 *
                                                 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
                                                 *
                                                 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
                                                 *
                                                 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
                                                 *
                                                 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
                                                 *
                                                 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
                                                 *
                                                 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
                                                 *    The output will be padded with zeros to match the length of the pattern.
                                                 *
                                                 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
                                                 *
                                                 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
                                                 *    These tokens represent the shortest form of the quarter.
                                                 *
                                                 * 5. The main difference between `y` and `u` patterns are B.C. years:
                                                 *
                                                 *    | Year | `y` | `u` |
                                                 *    |------|-----|-----|
                                                 *    | AC 1 |   1 |   1 |
                                                 *    | BC 1 |   1 |   0 |
                                                 *    | BC 2 |   2 |  -1 |
                                                 *
                                                 *    Also `yy` always returns the last two digits of a year,
                                                 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
                                                 *
                                                 *    | Year | `yy` | `uu` |
                                                 *    |------|------|------|
                                                 *    | 1    |   01 |   01 |
                                                 *    | 14   |   14 |   14 |
                                                 *    | 376  |   76 |  376 |
                                                 *    | 1453 |   53 | 1453 |
                                                 *
                                                 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
                                                 *    except local week-numbering years are dependent on `options.weekStartsOn`
                                                 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
                                                 *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
                                                 *
                                                 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
                                                 *    so right now these tokens fall back to GMT timezones.
                                                 *
                                                 * 7. These patterns are not in the Unicode Technical Standard #35:
                                                 *    - `i`: ISO day of week
                                                 *    - `I`: ISO week of year
                                                 *    - `R`: ISO week-numbering year
                                                 *    - `t`: seconds timestamp
                                                 *    - `T`: milliseconds timestamp
                                                 *    - `o`: ordinal number modifier
                                                 *    - `P`: long localized date
                                                 *    - `p`: long localized time
                                                 *
                                                 * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
                                                 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
                                                 *
                                                 * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
                                                 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
                                                 *
                                                 * ### v2.0.0 breaking changes:
                                                 *
                                                 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
                                                 *
                                                 * - The second argument is now required for the sake of explicitness.
                                                 *
                                                 *   ```javascript
                                                 *   // Before v2.0.0
                                                 *   format(new Date(2016, 0, 1))
                                                 *
                                                 *   // v2.0.0 onward
                                                 *   format(new Date(2016, 0, 1), "yyyy-MM-dd'T'HH:mm:ss.SSSxxx")
                                                 *   ```
                                                 *
                                                 * - New format string API for `format` function
                                                 *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).
                                                 *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.
                                                 *
                                                 * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.
                                                 *
                                                 * @param {Date|Number} date - the original date
                                                 * @param {String} format - the string of tokens
                                                 * @param {Object} [options] - an object with options.
                                                 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
                                                 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
                                                 * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
                                                 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
                                                 *   see: https://git.io/fxCyr
                                                 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
                                                 *   see: https://git.io/fxCyr
                                                 * @returns {String} the formatted date string
                                                 * @throws {TypeError} 2 arguments required
                                                 * @throws {RangeError} `options.locale` must contain `localize` property
                                                 * @throws {RangeError} `options.locale` must contain `formatLong` property
                                                 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
                                                 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
                                                 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr
                                                 * @throws {RangeError} use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr
                                                 * @throws {RangeError} use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr
                                                 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr
                                                 * @throws {RangeError} format string contains an unescaped latin alphabet character
                                                 *
                                                 * @example
                                                 * // Represent 11 February 2014 in middle-endian format:
                                                 * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
                                                 * //=> '02/11/2014'
                                                 *
                                                 * @example
                                                 * // Represent 2 July 2014 in Esperanto:
                                                 * import { eoLocale } from 'date-fns/locale/eo'
                                                 * var result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
                                                 *   locale: eoLocale
                                                 * })
                                                 * //=> '2-a de julio 2014'
                                                 *
                                                 * @example
                                                 * // Escape string by single quote characters:
                                                 * var result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
                                                 * //=> "3 o'clock"
                                                 */function format(dirtyDate,dirtyFormatStr,dirtyOptions){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var formatStr=dirtyFormatStr+"",options=dirtyOptions||{},locale$1=options.locale||locale,localeFirstWeekContainsDate=locale$1.options&&locale$1.options.firstWeekContainsDate,defaultFirstWeekContainsDate=null==localeFirstWeekContainsDate?1:toInteger(localeFirstWeekContainsDate),firstWeekContainsDate=null==options.firstWeekContainsDate?defaultFirstWeekContainsDate:toInteger(options.firstWeekContainsDate);// Test if weekStartsOn is between 1 and 7 _and_ is not NaN
if(!(1<=firstWeekContainsDate&&7>=firstWeekContainsDate)){throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively")}var localeWeekStartsOn=locale$1.options&&locale$1.options.weekStartsOn,defaultWeekStartsOn=null==localeWeekStartsOn?0:toInteger(localeWeekStartsOn),weekStartsOn=null==options.weekStartsOn?defaultWeekStartsOn:toInteger(options.weekStartsOn);// Test if weekStartsOn is between 0 and 6 _and_ is not NaN
if(!(0<=weekStartsOn&&6>=weekStartsOn)){throw new RangeError("weekStartsOn must be between 0 and 6 inclusively")}if(!locale$1.localize){throw new RangeError("locale must contain localize property")}if(!locale$1.formatLong){throw new RangeError("locale must contain formatLong property")}var originalDate=toDate(dirtyDate);if(!isValid$1(originalDate)){throw new RangeError("Invalid time value")}// Convert the date in system timezone to the same date in UTC+00:00 timezone.
// This ensures that when UTC functions will be implemented, locales will be compatible with them.
// See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376
var timezoneOffset=getTimezoneOffsetInMilliseconds(originalDate),utcDate=subMilliseconds(originalDate,timezoneOffset),formatterOptions={firstWeekContainsDate:firstWeekContainsDate,weekStartsOn:weekStartsOn,locale:locale$1,_originalDate:originalDate},result=formatStr.match(longFormattingTokensRegExp).map(function(substring){var firstCharacter=substring[0];if("p"===firstCharacter||"P"===firstCharacter){var longFormatter=longFormatters[firstCharacter];return longFormatter(substring,locale$1.formatLong,formatterOptions)}return substring}).join("").match(formattingTokensRegExp).map(function(substring){// Replace two single quote characters with one single quote character
if("''"===substring){return"'"}var firstCharacter=substring[0];if("'"===firstCharacter){return cleanEscapedString(substring)}var formatter=formatters$1[firstCharacter];if(formatter){if(!options.useAdditionalWeekYearTokens&&isProtectedWeekYearToken(substring)){throwProtectedError(substring)}if(!options.useAdditionalDayOfYearTokens&&isProtectedDayOfYearToken(substring)){throwProtectedError(substring)}return formatter(utcDate,substring,locale$1.localize,formatterOptions)}if(firstCharacter.match(unescapedLatinCharacterRegExp)){throw new RangeError("Format string contains an unescaped latin alphabet character `"+firstCharacter+"`")}return substring}).join("");return result}function cleanEscapedString(input){return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp,"'")}var index$1D={default:format};_exports.$index$76=index$1D;var MINUTES_IN_DAY=1440,MINUTES_IN_ALMOST_TWO_DAYS=2520,MINUTES_IN_MONTH=43200,MINUTES_IN_TWO_MONTHS=86400;/**
                                    * @name formatDistance
                                    * @category Common Helpers
                                    * @summary Return the distance between the given dates in words.
                                    *
                                    * @description
                                    * Return the distance between the given dates in words.
                                    *
                                    * | Distance between dates                                            | Result              |
                                    * |-------------------------------------------------------------------|---------------------|
                                    * | 0 ... 30 secs                                                     | less than a minute  |
                                    * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
                                    * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
                                    * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
                                    * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
                                    * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
                                    * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
                                    * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
                                    * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
                                    * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
                                    * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
                                    * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
                                    * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
                                    * | N yrs ... N yrs 3 months                                          | about N years       |
                                    * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
                                    * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
                                    *
                                    * With `options.includeSeconds == true`:
                                    * | Distance between dates | Result               |
                                    * |------------------------|----------------------|
                                    * | 0 secs ... 5 secs      | less than 5 seconds  |
                                    * | 5 secs ... 10 secs     | less than 10 seconds |
                                    * | 10 secs ... 20 secs    | less than 20 seconds |
                                    * | 20 secs ... 40 secs    | half a minute        |
                                    * | 40 secs ... 60 secs    | less than a minute   |
                                    * | 60 secs ... 90 secs    | 1 minute             |
                                    *
                                    * ### v2.0.0 breaking changes:
                                    *
                                    * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
                                    *
                                    * - The function was renamed from `distanceInWords ` to `formatDistance`
                                    *   to make its name consistent with `format` and `formatRelative`.
                                    *
                                    * - The order of arguments is swapped to make the function
                                    *   consistent with `differenceIn...` functions.
                                    *
                                    *   ```javascript
                                    *   // Before v2.0.0
                                    *
                                    *   distanceInWords(
                                    *     new Date(1986, 3, 4, 10, 32, 0),
                                    *     new Date(1986, 3, 4, 11, 32, 0),
                                    *     { addSuffix: true }
                                    *   ) //=> 'in about 1 hour'
                                    *
                                    *   // v2.0.0 onward
                                    *
                                    *   formatDistance(
                                    *     new Date(1986, 3, 4, 11, 32, 0),
                                    *     new Date(1986, 3, 4, 10, 32, 0),
                                    *     { addSuffix: true }
                                    *   ) //=> 'in about 1 hour'
                                    *   ```
                                    *
                                    * @param {Date|Number} date - the date
                                    * @param {Date|Number} baseDate - the date to compare with
                                    * @param {Object} [options] - an object with options.
                                    * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed
                                    * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first
                                    * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
                                    * @returns {String} the distance in words
                                    * @throws {TypeError} 2 arguments required
                                    * @throws {RangeError} `options.locale` must contain `formatDistance` property
                                    *
                                    * @example
                                    * // What is the distance between 2 July 2014 and 1 January 2015?
                                    * var result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))
                                    * //=> '6 months'
                                    *
                                    * @example
                                    * // What is the distance between 1 January 2015 00:00:15
                                    * // and 1 January 2015 00:00:00, including seconds?
                                    * var result = formatDistance(
                                    *   new Date(2015, 0, 1, 0, 0, 15),
                                    *   new Date(2015, 0, 1, 0, 0, 0),
                                    *   { includeSeconds: true }
                                    * )
                                    * //=> 'less than 20 seconds'
                                    *
                                    * @example
                                    * // What is the distance from 1 January 2016
                                    * // to 1 January 2015, with a suffix?
                                    * var result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {
                                    *   addSuffix: true
                                    * })
                                    * //=> 'about 1 year ago'
                                    *
                                    * @example
                                    * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
                                    * import { eoLocale } from 'date-fns/locale/eo'
                                    * var result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {
                                    *   locale: eoLocale
                                    * })
                                    * //=> 'pli ol 1 jaro'
                                    */function formatDistance$1(dirtyDate,dirtyBaseDate,dirtyOptions){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var options=dirtyOptions||{},locale$1=options.locale||locale;if(!locale$1.formatDistance){throw new RangeError("locale must contain formatDistance property")}var comparison=compareAsc(dirtyDate,dirtyBaseDate);if(isNaN(comparison)){throw new RangeError("Invalid time value")}var localizeOptions=cloneObject(options);localizeOptions.addSuffix=!!options.addSuffix;localizeOptions.comparison=comparison;var dateLeft,dateRight;if(0<comparison){dateLeft=toDate(dirtyBaseDate);dateRight=toDate(dirtyDate)}else{dateLeft=toDate(dirtyDate);dateRight=toDate(dirtyBaseDate)}var seconds=differenceInSeconds(dateRight,dateLeft),offsetInSeconds=(getTimezoneOffsetInMilliseconds(dateRight)-getTimezoneOffsetInMilliseconds(dateLeft))/1e3,minutes=Math.round((seconds-offsetInSeconds)/60),months;// 0 up to 2 mins
if(2>minutes){if(options.includeSeconds){if(5>seconds){return locale$1.formatDistance("lessThanXSeconds",5,localizeOptions)}else if(10>seconds){return locale$1.formatDistance("lessThanXSeconds",10,localizeOptions)}else if(20>seconds){return locale$1.formatDistance("lessThanXSeconds",20,localizeOptions)}else if(40>seconds){return locale$1.formatDistance("halfAMinute",null,localizeOptions)}else if(60>seconds){return locale$1.formatDistance("lessThanXMinutes",1,localizeOptions)}else{return locale$1.formatDistance("xMinutes",1,localizeOptions)}}else{if(0===minutes){return locale$1.formatDistance("lessThanXMinutes",1,localizeOptions)}else{return locale$1.formatDistance("xMinutes",minutes,localizeOptions)}}// 2 mins up to 0.75 hrs
}else if(45>minutes){return locale$1.formatDistance("xMinutes",minutes,localizeOptions);// 0.75 hrs up to 1.5 hrs
}else if(90>minutes){return locale$1.formatDistance("aboutXHours",1,localizeOptions);// 1.5 hrs up to 24 hrs
}else if(minutes<MINUTES_IN_DAY){var hours=Math.round(minutes/60);return locale$1.formatDistance("aboutXHours",hours,localizeOptions);// 1 day up to 1.75 days
}else if(minutes<MINUTES_IN_ALMOST_TWO_DAYS){return locale$1.formatDistance("xDays",1,localizeOptions);// 1.75 days up to 30 days
}else if(minutes<MINUTES_IN_MONTH){var days=Math.round(minutes/MINUTES_IN_DAY);return locale$1.formatDistance("xDays",days,localizeOptions);// 1 month up to 2 months
}else if(minutes<MINUTES_IN_TWO_MONTHS){months=Math.round(minutes/MINUTES_IN_MONTH);return locale$1.formatDistance("aboutXMonths",months,localizeOptions)}months=differenceInMonths(dateRight,dateLeft);// 2 months up to 12 months
if(12>months){var nearestMonth=Math.round(minutes/MINUTES_IN_MONTH);return locale$1.formatDistance("xMonths",nearestMonth,localizeOptions);// 1 year up to max Date
}else{var monthsSinceStartOfYear=months%12,years=Math.floor(months/12);// N years up to 1 years 3 months
if(3>monthsSinceStartOfYear){return locale$1.formatDistance("aboutXYears",years,localizeOptions);// N years 3 months up to N years 9 months
}else if(9>monthsSinceStartOfYear){return locale$1.formatDistance("overXYears",years,localizeOptions);// N years 9 months up to N year 12 months
}else{return locale$1.formatDistance("almostXYears",years+1,localizeOptions)}}}var index$1E={default:formatDistance$1};_exports.$index$77=index$1E;var MINUTES_IN_DAY$1=1440,MINUTES_IN_MONTH$1=43200,MINUTES_IN_YEAR=525600;/**
                               * @name formatDistanceStrict
                               * @category Common Helpers
                               * @summary Return the distance between the given dates in words.
                               *
                               * @description
                               * Return the distance between the given dates in words, using strict units.
                               * This is like `formatDistance`, but does not use helpers like 'almost', 'over',
                               * 'less than' and the like.
                               *
                               * | Distance between dates | Result              |
                               * |------------------------|---------------------|
                               * | 0 ... 59 secs          | [0..59] seconds     |
                               * | 1 ... 59 mins          | [1..59] minutes     |
                               * | 1 ... 23 hrs           | [1..23] hours       |
                               * | 1 ... 29 days          | [1..29] days        |
                               * | 1 ... 11 months        | [1..11] months      |
                               * | 1 ... N years          | [1..N]  years       |
                               *
                               * ### v2.0.0 breaking changes:
                               *
                               * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
                               *
                               * - The function was renamed from `distanceInWordsStrict` to `formatDistanceStrict`
                               *   to make its name consistent with `format` and `formatRelative`.
                               *
                               * - The order of arguments is swapped to make the function
                               *   consistent with `differenceIn...` functions.
                               *
                               *   ```javascript
                               *   // Before v2.0.0
                               *
                               *   distanceInWordsStrict(
                               *     new Date(2015, 0, 2),
                               *     new Date(2014, 6, 2)
                               *   ) //=> '6 months'
                               *
                               *   // v2.0.0 onward
                               *
                               *   formatDistanceStrict(
                               *     new Date(2014, 6, 2),
                               *     new Date(2015, 0, 2)
                               *   ) //=> '6 months'
                               *   ```
                               *
                               * - `partialMethod` option is renamed to `roundingMethod`.
                               *
                               *   ```javascript
                               *   // Before v2.0.0
                               *
                               *   distanceInWordsStrict(
                               *     new Date(1986, 3, 4, 10, 32, 0),
                               *     new Date(1986, 3, 4, 10, 33, 1),
                               *     { partialMethod: 'ceil' }
                               *   ) //=> '2 minutes'
                               *
                               *   // v2.0.0 onward
                               *
                               *   formatDistanceStrict(
                               *     new Date(1986, 3, 4, 10, 33, 1),
                               *     new Date(1986, 3, 4, 10, 32, 0),
                               *     { roundingMethod: 'ceil' }
                               *   ) //=> '2 minutes'
                               *   ```
                               *
                               * - If `roundingMethod` is not specified, it now defaults to `round` instead of `floor`.
                               *
                               * - `unit` option now accepts one of the strings:
                               *   'second', 'minute', 'hour', 'day', 'month' or 'year' instead of 's', 'm', 'h', 'd', 'M' or 'Y'
                               *
                               *   ```javascript
                               *   // Before v2.0.0
                               *
                               *   distanceInWordsStrict(
                               *     new Date(1986, 3, 4, 10, 32, 0),
                               *     new Date(1986, 3, 4, 10, 33, 1),
                               *     { unit: 'm' }
                               *   )
                               *
                               *   // v2.0.0 onward
                               *
                               *   formatDistanceStrict(
                               *     new Date(1986, 3, 4, 10, 33, 1),
                               *     new Date(1986, 3, 4, 10, 32, 0),
                               *     { unit: 'minute' }
                               *   )
                               *   ```
                               *
                               * @param {Date|Number} date - the date
                               * @param {Date|Number} baseDate - the date to compare with
                               * @param {Object} [options] - an object with options.
                               * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first
                               * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit
                               * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units
                               * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
                               * @returns {String} the distance in words
                               * @throws {TypeError} 2 arguments required
                               * @throws {RangeError} `options.roundingMethod` must be 'floor', 'ceil' or 'round'
                               * @throws {RangeError} `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'
                               * @throws {RangeError} `options.locale` must contain `formatDistance` property
                               *
                               * @example
                               * // What is the distance between 2 July 2014 and 1 January 2015?
                               * var result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))
                               * //=> '6 months'
                               *
                               * @example
                               * // What is the distance between 1 January 2015 00:00:15
                               * // and 1 January 2015 00:00:00?
                               * var result = formatDistanceStrict(
                               *   new Date(2015, 0, 1, 0, 0, 15),
                               *   new Date(2015, 0, 1, 0, 0, 0)
                               * )
                               * //=> '15 seconds'
                               *
                               * @example
                               * // What is the distance from 1 January 2016
                               * // to 1 January 2015, with a suffix?
                               * var result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {
                               *   addSuffix: true
                               * })
                               * //=> '1 year ago'
                               *
                               * @example
                               * // What is the distance from 1 January 2016
                               * // to 1 January 2015, in minutes?
                               * var result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {
                               *   unit: 'minute'
                               * })
                               * //=> '525600 minutes'
                               *
                               * @example
                               * // What is the distance from 1 January 2015
                               * // to 28 January 2015, in months, rounded up?
                               * var result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {
                               *   unit: 'month',
                               *   roundingMethod: 'ceil'
                               * })
                               * //=> '1 month'
                               *
                               * @example
                               * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
                               * import { eoLocale } from 'date-fns/locale/eo'
                               * var result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {
                               *   locale: eoLocale
                               * })
                               * //=> '1 jaro'
                               */function formatDistanceStrict(dirtyDate,dirtyBaseDate,dirtyOptions){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var options=dirtyOptions||{},locale$1=options.locale||locale;if(!locale$1.formatDistance){throw new RangeError("locale must contain localize.formatDistance property")}var comparison=compareAsc(dirtyDate,dirtyBaseDate);if(isNaN(comparison)){throw new RangeError("Invalid time value")}var localizeOptions=cloneObject(options);localizeOptions.addSuffix=!!options.addSuffix;localizeOptions.comparison=comparison;var dateLeft,dateRight;if(0<comparison){dateLeft=toDate(dirtyBaseDate);dateRight=toDate(dirtyDate)}else{dateLeft=toDate(dirtyDate);dateRight=toDate(dirtyBaseDate)}var roundingMethod=null==options.roundingMethod?"round":options.roundingMethod+"",roundingMethodFn;if("floor"===roundingMethod){roundingMethodFn=Math.floor}else if("ceil"===roundingMethod){roundingMethodFn=Math.ceil}else if("round"===roundingMethod){roundingMethodFn=Math.round}else{throw new RangeError("roundingMethod must be 'floor', 'ceil' or 'round'")}var seconds=differenceInSeconds(dateRight,dateLeft),offsetInSeconds=(getTimezoneOffsetInMilliseconds(dateRight)-getTimezoneOffsetInMilliseconds(dateLeft))/1e3,minutes=roundingMethodFn((seconds-offsetInSeconds)/60),unit;if(null==options.unit){if(1>minutes){unit="second"}else if(60>minutes){unit="minute"}else if(minutes<MINUTES_IN_DAY$1){unit="hour"}else if(minutes<MINUTES_IN_MONTH$1){unit="day"}else if(minutes<MINUTES_IN_YEAR){unit="month"}else{unit="year"}}else{unit=options.unit+""}// 0 up to 60 seconds
if("second"===unit){return locale$1.formatDistance("xSeconds",seconds,localizeOptions);// 1 up to 60 mins
}else if("minute"===unit){return locale$1.formatDistance("xMinutes",minutes,localizeOptions);// 1 up to 24 hours
}else if("hour"===unit){var hours=roundingMethodFn(minutes/60);return locale$1.formatDistance("xHours",hours,localizeOptions);// 1 up to 30 days
}else if("day"===unit){var days=roundingMethodFn(minutes/MINUTES_IN_DAY$1);return locale$1.formatDistance("xDays",days,localizeOptions);// 1 up to 12 months
}else if("month"===unit){var months=roundingMethodFn(minutes/MINUTES_IN_MONTH$1);return locale$1.formatDistance("xMonths",months,localizeOptions);// 1 year up to max Date
}else if("year"===unit){var years=roundingMethodFn(minutes/MINUTES_IN_YEAR);return locale$1.formatDistance("xYears",years,localizeOptions)}throw new RangeError("unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'")}var index$1F={default:formatDistanceStrict};_exports.$index$78=index$1F;function formatDistanceToNow(dirtyDate,dirtyOptions){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return formatDistance$1(dirtyDate,Date.now(),dirtyOptions)}var index$1G={default:formatDistanceToNow};_exports.$index$79=index$1G;function formatRelative$1(dirtyDate,dirtyBaseDate,dirtyOptions){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),baseDate=toDate(dirtyBaseDate),options=dirtyOptions||{},locale$1=options.locale||locale;if(!locale$1.localize){throw new RangeError("locale must contain localize property")}if(!locale$1.formatLong){throw new RangeError("locale must contain formatLong property")}if(!locale$1.formatRelative){throw new RangeError("locale must contain formatRelative property")}var diff=differenceInCalendarDays(date,baseDate);if(isNaN(diff)){throw new RangeError("Invalid time value")}var token;if(-6>diff){token="other"}else if(-1>diff){token="lastWeek"}else if(0>diff){token="yesterday"}else if(1>diff){token="today"}else if(2>diff){token="tomorrow"}else if(7>diff){token="nextWeek"}else{token="other"}var utcDate=subMilliseconds(date,getTimezoneOffsetInMilliseconds(date)),utcBaseDate=subMilliseconds(baseDate,getTimezoneOffsetInMilliseconds(baseDate)),formatStr=locale$1.formatRelative(token,utcDate,utcBaseDate,options);return format(date,formatStr,options)}var index$1H={default:formatRelative$1};_exports.$index$80=index$1H;function fromUnixTime(dirtyUnixTime){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var unixTime=toInteger(dirtyUnixTime);return toDate(1e3*unixTime)}var index$1I={default:fromUnixTime};_exports.$index$81=index$1I;function getDate(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),dayOfMonth=date.getDate();return dayOfMonth}var index$1J={default:getDate};_exports.$index$82=index$1J;function getDay(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),day=date.getDay();return day}var index$1K={default:getDay};_exports.$index$83=index$1K;function getDayOfYear(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),diff=differenceInCalendarDays(date,startOfYear(date)),dayOfYear=diff+1;return dayOfYear}var index$1L={default:getDayOfYear};_exports.$index$84=index$1L;function isLeapYear(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),year=date.getFullYear();return 0===year%400||0===year%4&&0!==year%100}var index$1M={default:isLeapYear};_exports.$index$115=index$1M;function getDaysInYear(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate);if(isNaN(date)){return NaN}return isLeapYear(date)?366:365}var index$1N={default:getDaysInYear};_exports.$index$86=index$1N;function getDecade(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),year=date.getFullYear(),decade=10*Math.floor(year/10);return decade}var index$1O={default:getDecade};_exports.$index$87=index$1O;function getHours(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),hours=date.getHours();return hours}var index$1P={default:getHours};_exports.$index$88=index$1P;function getISODay(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),day=date.getDay();if(0===day){day=7}return day}var index$1Q={default:getISODay};_exports.$index$89=index$1Q;var MILLISECONDS_IN_WEEK$4=6048e5;/**
                                        * @name getISOWeek
                                        * @category ISO Week Helpers
                                        * @summary Get the ISO week of the given date.
                                        *
                                        * @description
                                        * Get the ISO week of the given date.
                                        *
                                        * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
                                        *
                                        * ### v2.0.0 breaking changes:
                                        *
                                        * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
                                        *
                                        * @param {Date|Number} date - the given date
                                        * @returns {Number} the ISO week
                                        * @throws {TypeError} 1 argument required
                                        *
                                        * @example
                                        * // Which week of the ISO-week numbering year is 2 January 2005?
                                        * var result = getISOWeek(new Date(2005, 0, 2))
                                        * //=> 53
                                        */function getISOWeek(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),diff=startOfISOWeek(date).getTime()-startOfISOWeekYear(date).getTime();// Round the number of days to the nearest integer
// because the number of milliseconds in a week is not constant
// (e.g. it's different in the week of the daylight saving time clock shift)
return Math.round(diff/MILLISECONDS_IN_WEEK$4)+1}var index$1R={default:getISOWeek};_exports.$index$90=index$1R;var MILLISECONDS_IN_WEEK$5=6048e5;/**
                                        * @name getISOWeeksInYear
                                        * @category ISO Week-Numbering Year Helpers
                                        * @summary Get the number of weeks in an ISO week-numbering year of the given date.
                                        *
                                        * @description
                                        * Get the number of weeks in an ISO week-numbering year of the given date.
                                        *
                                        * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
                                        *
                                        * ### v2.0.0 breaking changes:
                                        *
                                        * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
                                        *
                                        * @param {Date|Number} date - the given date
                                        * @returns {Number} the number of ISO weeks in a year
                                        * @throws {TypeError} 1 argument required
                                        *
                                        * @example
                                        * // How many weeks are in ISO week-numbering year 2015?
                                        * var result = getISOWeeksInYear(new Date(2015, 1, 11))
                                        * //=> 53
                                        */function getISOWeeksInYear(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var thisYear=startOfISOWeekYear(dirtyDate),nextYear=startOfISOWeekYear(addWeeks(thisYear,60)),diff=nextYear.valueOf()-thisYear.valueOf();// Round the number of weeks to the nearest integer
// because the number of milliseconds in a week is not constant
// (e.g. it's different in the week of the daylight saving time clock shift)
return Math.round(diff/MILLISECONDS_IN_WEEK$5)}var index$1S={default:getISOWeeksInYear};_exports.$index$92=index$1S;function getMilliseconds(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),milliseconds=date.getMilliseconds();return milliseconds}var index$1T={default:getMilliseconds};_exports.$index$93=index$1T;function getMinutes(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),minutes=date.getMinutes();return minutes}var index$1U={default:getMinutes};_exports.$index$94=index$1U;function getMonth(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),month=date.getMonth();return month}var index$1V={default:getMonth};_exports.$index$95=index$1V;var MILLISECONDS_IN_DAY$2=1e3*(60*(60*24));/**
                                                 * @name getOverlappingDaysInIntervals
                                                 * @category Interval Helpers
                                                 * @summary Get the number of days that overlap in two time intervals
                                                 *
                                                 * @description
                                                 * Get the number of days that overlap in two time intervals
                                                 *
                                                 * ### v2.0.0 breaking changes:
                                                 *
                                                 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
                                                 *
                                                 * - The function was renamed from `getOverlappingDaysInRanges` to `getOverlappingDaysInIntervals`.
                                                 *   This change was made to mirror the use of the word "interval" in standard ISO 8601:2004 terminology:
                                                 *
                                                 *   ```
                                                 *   2.1.3
                                                 *   time interval
                                                 *   part of the time axis limited by two instants
                                                 *   ```
                                                 *
                                                 *   Also, this function now accepts an object with `start` and `end` properties
                                                 *   instead of two arguments as an interval.
                                                 *   This function now throws `RangeError` if the start of the interval is after its end
                                                 *   or if any date in the interval is `Invalid Date`.
                                                 *
                                                 *   ```javascript
                                                 *   // Before v2.0.0
                                                 *
                                                 *   getOverlappingDaysInRanges(
                                                 *     new Date(2014, 0, 10), new Date(2014, 0, 20),
                                                 *     new Date(2014, 0, 17), new Date(2014, 0, 21)
                                                 *   )
                                                 *
                                                 *   // v2.0.0 onward
                                                 *
                                                 *   getOverlappingDaysInIntervals(
                                                 *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
                                                 *     { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }
                                                 *   )
                                                 *   ```
                                                 *
                                                 * @param {Interval} intervalLeft - the first interval to compare. See [Interval]{@link docs/Interval}
                                                 * @param {Interval} intervalRight - the second interval to compare. See [Interval]{@link docs/Interval}
                                                 * @returns {Number} the number of days that overlap in two time intervals
                                                 * @throws {TypeError} 2 arguments required
                                                 * @throws {RangeError} The start of an interval cannot be after its end
                                                 * @throws {RangeError} Date in interval cannot be `Invalid Date`
                                                 *
                                                 * @example
                                                 * // For overlapping time intervals adds 1 for each started overlapping day:
                                                 * getOverlappingDaysInIntervals(
                                                 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
                                                 *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }
                                                 * )
                                                 * //=> 3
                                                 *
                                                 * @example
                                                 * // For non-overlapping time intervals returns 0:
                                                 * getOverlappingDaysInIntervals(
                                                 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
                                                 *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }
                                                 * )
                                                 * //=> 0
                                                 */function getOverlappingDaysInIntervals(dirtyIntervalLeft,dirtyIntervalRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var intervalLeft=dirtyIntervalLeft||{},intervalRight=dirtyIntervalRight||{},leftStartTime=toDate(intervalLeft.start).getTime(),leftEndTime=toDate(intervalLeft.end).getTime(),rightStartTime=toDate(intervalRight.start).getTime(),rightEndTime=toDate(intervalRight.end).getTime();// Throw an exception if start date is after end date or if any date is `Invalid Date`
if(!(leftStartTime<=leftEndTime&&rightStartTime<=rightEndTime)){throw new RangeError("Invalid interval")}var isOverlapping=leftStartTime<rightEndTime&&rightStartTime<leftEndTime;if(!isOverlapping){return 0}var overlapStartDate=rightStartTime<leftStartTime?leftStartTime:rightStartTime,overlapEndDate=rightEndTime>leftEndTime?leftEndTime:rightEndTime,differenceInMs=overlapEndDate-overlapStartDate;return Math.ceil(differenceInMs/MILLISECONDS_IN_DAY$2)}var index$1W={default:getOverlappingDaysInIntervals};_exports.$index$96=index$1W;function getSeconds(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),seconds=date.getSeconds();return seconds}var index$1X={default:getSeconds};_exports.$index$98=index$1X;function getTime(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),timestamp=date.getTime();return timestamp}var index$1Y={default:getTime};_exports.$index$99=index$1Y;function getUnixTime(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return Math.floor(getTime(dirtyDate)/1e3)}var index$1Z={default:getUnixTime};_exports.$index$100=index$1Z;function getWeekYear(dirtyDate,dirtyOptions){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),year=date.getFullYear(),options=dirtyOptions||{},locale=options.locale,localeFirstWeekContainsDate=locale&&locale.options&&locale.options.firstWeekContainsDate,defaultFirstWeekContainsDate=null==localeFirstWeekContainsDate?1:toInteger(localeFirstWeekContainsDate),firstWeekContainsDate=null==options.firstWeekContainsDate?defaultFirstWeekContainsDate:toInteger(options.firstWeekContainsDate);// Test if weekStartsOn is between 1 and 7 _and_ is not NaN
if(!(1<=firstWeekContainsDate&&7>=firstWeekContainsDate)){throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively")}var firstWeekOfNextYear=new Date(0);firstWeekOfNextYear.setFullYear(year+1,0,firstWeekContainsDate);firstWeekOfNextYear.setHours(0,0,0,0);var startOfNextYear=startOfWeek(firstWeekOfNextYear,dirtyOptions),firstWeekOfThisYear=new Date(0);firstWeekOfThisYear.setFullYear(year,0,firstWeekContainsDate);firstWeekOfThisYear.setHours(0,0,0,0);var startOfThisYear=startOfWeek(firstWeekOfThisYear,dirtyOptions);if(date.getTime()>=startOfNextYear.getTime()){return year+1}else if(date.getTime()>=startOfThisYear.getTime()){return year}else{return year-1}}var index$1_={default:getWeekYear};_exports.$index$103=index$1_;function startOfWeekYear(dirtyDate,dirtyOptions){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var options=dirtyOptions||{},locale=options.locale,localeFirstWeekContainsDate=locale&&locale.options&&locale.options.firstWeekContainsDate,defaultFirstWeekContainsDate=null==localeFirstWeekContainsDate?1:toInteger(localeFirstWeekContainsDate),firstWeekContainsDate=null==options.firstWeekContainsDate?defaultFirstWeekContainsDate:toInteger(options.firstWeekContainsDate),year=getWeekYear(dirtyDate,dirtyOptions),firstWeek=new Date(0);firstWeek.setFullYear(year,0,firstWeekContainsDate);firstWeek.setHours(0,0,0,0);var date=startOfWeek(firstWeek,dirtyOptions);return date}var index$1$={default:startOfWeekYear};_exports.$index$198=index$1$;var MILLISECONDS_IN_WEEK$6=6048e5;/**
                                        * @name getWeek
                                        * @category Week Helpers
                                        * @summary Get the local week index of the given date.
                                        *
                                        * @description
                                        * Get the local week index of the given date.
                                        * The exact calculation depends on the values of
                                        * `options.weekStartsOn` (which is the index of the first day of the week)
                                        * and `options.firstWeekContainsDate` (which is the day of January, which is always in
                                        * the first week of the week-numbering year)
                                        *
                                        * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering
                                        *
                                        * ### v2.0.0 breaking changes:
                                        *
                                        * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
                                        *
                                        * @param {Date|Number} date - the given date
                                        * @param {Object} [options] - an object with options.
                                        * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
                                        * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
                                        * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
                                        * @returns {Number} the week
                                        * @throws {TypeError} 1 argument required
                                        * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
                                        * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
                                        *
                                        * @example
                                        * // Which week of the local week numbering year is 2 January 2005 with default options?
                                        * var result = getISOWeek(new Date(2005, 0, 2))
                                        * //=> 2
                                        *
                                        * // Which week of the local week numbering year is 2 January 2005,
                                        * // if Monday is the first day of the week,
                                        * // and the first week of the year always contains 4 January?
                                        * var result = getISOWeek(new Date(2005, 0, 2), {
                                        *   weekStartsOn: 1,
                                        *   firstWeekContainsDate: 4
                                        * })
                                        * //=> 53
                                        */function getWeek(dirtyDate,options){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),diff=startOfWeek(date,options).getTime()-startOfWeekYear(date,options).getTime();// Round the number of days to the nearest integer
// because the number of milliseconds in a week is not constant
// (e.g. it's different in the week of the daylight saving time clock shift)
return Math.round(diff/MILLISECONDS_IN_WEEK$6)+1}var index$20={default:getWeek};_exports.$index$101=index$20;function getWeekOfMonth(date,dirtyOptions){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var options=dirtyOptions||{},locale=options.locale,localeWeekStartsOn=locale&&locale.options&&locale.options.weekStartsOn,defaultWeekStartsOn=null==localeWeekStartsOn?0:toInteger(localeWeekStartsOn),weekStartsOn=null==options.weekStartsOn?defaultWeekStartsOn:toInteger(options.weekStartsOn);// Test if weekStartsOn is between 0 and 6 _and_ is not NaN
if(!(0<=weekStartsOn&&6>=weekStartsOn)){throw new RangeError("weekStartsOn must be between 0 and 6 inclusively")}var currentDayOfMonth=getDate(date);if(isNaN(currentDayOfMonth)){return currentDayOfMonth}var startWeekDay=getDay(startOfMonth(date)),lastDayOfFirstWeek=0;if(startWeekDay>=weekStartsOn){lastDayOfFirstWeek=weekStartsOn+7-startWeekDay}else{lastDayOfFirstWeek=weekStartsOn-startWeekDay}var weekNumber=1;if(currentDayOfMonth>lastDayOfFirstWeek){var remainingDaysAfterFirstWeek=currentDayOfMonth-lastDayOfFirstWeek;weekNumber=weekNumber+Math.ceil(remainingDaysAfterFirstWeek/7)}return weekNumber}var index$21={default:getWeekOfMonth};_exports.$index$102=index$21;function lastDayOfMonth(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),month=date.getMonth();date.setFullYear(date.getFullYear(),month+1,0);date.setHours(0,0,0,0);return date}var index$22={default:lastDayOfMonth};_exports.$index$150=index$22;function getWeeksInMonth(date,options){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return differenceInCalendarWeeks(lastDayOfMonth(date),startOfMonth(date),options)+1}var index$23={default:getWeeksInMonth};_exports.$index$104=index$23;function getYear(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),year=date.getFullYear();return year}var index$24={default:getYear};_exports.$index$105=index$24;function isAfter(dirtyDate,dirtyDateToCompare){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),dateToCompare=toDate(dirtyDateToCompare);return date.getTime()>dateToCompare.getTime()}var index$25={default:isAfter};_exports.$index$107=index$25;function isBefore(dirtyDate,dirtyDateToCompare){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),dateToCompare=toDate(dirtyDateToCompare);return date.getTime()<dateToCompare.getTime()}var index$26={default:isBefore};/**
    * @name isDate
    * @category Common Helpers
    * @summary Is the given value a date?
    *
    * @description
    * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
    *
    * ### v2.0.0 breaking changes:
    *
    * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
    *
    * @param {*} value - the value to check
    * @returns {boolean} true if the given value is a date
    * @throws {TypeError} 1 arguments required
    *
    * @example
    * // For a valid date:
    * var result = isDate(new Date())
    * //=> true
    *
    * @example
    * // For an invalid date:
    * var result = isDate(new Date(NaN))
    * //=> true
    *
    * @example
    * // For some value:
    * var result = isDate('2014-02-31')
    * //=> false
    *
    * @example
    * // For an object:
    * var result = isDate({})
    * //=> false
    */_exports.$index$108=index$26;function isDate(value){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return value instanceof Date||"object"===typeof value&&"[object Date]"===Object.prototype.toString.call(value)}var index$27={default:isDate};_exports.$index$109=index$27;function isEqual(dirtyLeftDate,dirtyRightDate){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateLeft=toDate(dirtyLeftDate),dateRight=toDate(dirtyRightDate);return dateLeft.getTime()===dateRight.getTime()}var index$28={default:isEqual};_exports.$index$110=index$28;function isFirstDayOfMonth(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return 1===toDate(dirtyDate).getDate()}var index$29={default:isFirstDayOfMonth};_exports.$index$111=index$29;function isFriday(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return 5===toDate(dirtyDate).getDay()}var index$2a={default:isFriday};_exports.$index$112=index$2a;function isFuture(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return toDate(dirtyDate).getTime()>Date.now()}var index$2b={default:isFuture};_exports.$index$113=index$2b;function isLastDayOfMonth(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate);return endOfDay(date).getTime()===endOfMonth(date).getTime()}var index$2c={default:isLastDayOfMonth};_exports.$index$114=index$2c;function isMonday(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return 1===toDate(dirtyDate).getDay()}var index$2d={default:isMonday};_exports.$index$116=index$2d;function isPast(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return toDate(dirtyDate).getTime()<Date.now()}var index$2e={default:isPast};_exports.$index$117=index$2e;function startOfHour(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate);date.setMinutes(0,0,0);return date}var index$2f={default:startOfHour};_exports.$index$188=index$2f;function isSameHour(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateLeftStartOfHour=startOfHour(dirtyDateLeft),dateRightStartOfHour=startOfHour(dirtyDateRight);return dateLeftStartOfHour.getTime()===dateRightStartOfHour.getTime()}var index$2g={default:isSameHour};_exports.$index$119=index$2g;function isSameWeek(dirtyDateLeft,dirtyDateRight,dirtyOptions){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateLeftStartOfWeek=startOfWeek(dirtyDateLeft,dirtyOptions),dateRightStartOfWeek=startOfWeek(dirtyDateRight,dirtyOptions);return dateLeftStartOfWeek.getTime()===dateRightStartOfWeek.getTime()}var index$2h={default:isSameWeek};_exports.$index$126=index$2h;function isSameISOWeek(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}return isSameWeek(dirtyDateLeft,dirtyDateRight,{weekStartsOn:1})}var index$2i={default:isSameISOWeek};_exports.$index$120=index$2i;function isSameISOWeekYear(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateLeftStartOfYear=startOfISOWeekYear(dirtyDateLeft),dateRightStartOfYear=startOfISOWeekYear(dirtyDateRight);return dateLeftStartOfYear.getTime()===dateRightStartOfYear.getTime()}var index$2j={default:isSameISOWeekYear};_exports.$index$121=index$2j;function startOfMinute(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate);date.setSeconds(0,0);return date}var index$2k={default:startOfMinute};_exports.$index$191=index$2k;function isSameMinute(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateLeftStartOfMinute=startOfMinute(dirtyDateLeft),dateRightStartOfMinute=startOfMinute(dirtyDateRight);return dateLeftStartOfMinute.getTime()===dateRightStartOfMinute.getTime()}var index$2l={default:isSameMinute};_exports.$index$122=index$2l;function isSameMonth(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateLeft=toDate(dirtyDateLeft),dateRight=toDate(dirtyDateRight);return dateLeft.getFullYear()===dateRight.getFullYear()&&dateLeft.getMonth()===dateRight.getMonth()}var index$2m={default:isSameMonth};_exports.$index$123=index$2m;function startOfQuarter(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),currentMonth=date.getMonth(),month=currentMonth-currentMonth%3;date.setMonth(month,1);date.setHours(0,0,0,0);return date}var index$2n={default:startOfQuarter};_exports.$index$193=index$2n;function isSameQuarter(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateLeftStartOfQuarter=startOfQuarter(dirtyDateLeft),dateRightStartOfQuarter=startOfQuarter(dirtyDateRight);return dateLeftStartOfQuarter.getTime()===dateRightStartOfQuarter.getTime()}var index$2o={default:isSameQuarter};_exports.$index$124=index$2o;function startOfSecond(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate);date.setMilliseconds(0);return date}var index$2p={default:startOfSecond};_exports.$index$194=index$2p;function isSameSecond(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateLeftStartOfSecond=startOfSecond(dirtyDateLeft),dateRightStartOfSecond=startOfSecond(dirtyDateRight);return dateLeftStartOfSecond.getTime()===dateRightStartOfSecond.getTime()}var index$2q={default:isSameSecond};_exports.$index$125=index$2q;function isSameYear(dirtyDateLeft,dirtyDateRight){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var dateLeft=toDate(dirtyDateLeft),dateRight=toDate(dirtyDateRight);return dateLeft.getFullYear()===dateRight.getFullYear()}var index$2r={default:isSameYear};_exports.$index$127=index$2r;function isSaturday(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return 6===toDate(dirtyDate).getDay()}var index$2s={default:isSaturday};_exports.$index$128=index$2s;function isThisHour(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return isSameHour(Date.now(),dirtyDate)}var index$2t={default:isThisHour};_exports.$index$130=index$2t;function isThisISOWeek(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return isSameISOWeek(dirtyDate,Date.now())}var index$2u={default:isThisISOWeek};_exports.$index$131=index$2u;function isThisMinute(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return isSameMinute(Date.now(),dirtyDate)}var index$2v={default:isThisMinute};_exports.$index$132=index$2v;function isThisMonth(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return isSameMonth(Date.now(),dirtyDate)}var index$2w={default:isThisMonth};_exports.$index$133=index$2w;function isThisQuarter(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return isSameQuarter(Date.now(),dirtyDate)}var index$2x={default:isThisQuarter};_exports.$index$134=index$2x;function isThisSecond(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return isSameSecond(Date.now(),dirtyDate)}var index$2y={default:isThisSecond};_exports.$index$135=index$2y;function isThisWeek(dirtyDate,options){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return isSameWeek(dirtyDate,Date.now(),options)}var index$2z={default:isThisWeek};_exports.$index$136=index$2z;function isThisYear(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return isSameYear(dirtyDate,Date.now())}var index$2A={default:isThisYear};_exports.$index$137=index$2A;function isThursday(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return 4===toDate(dirtyDate).getDay()}var index$2B={default:isThursday};_exports.$index$138=index$2B;function isToday(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return isSameDay(dirtyDate,Date.now())}var index$2C={default:isToday};_exports.$index$139=index$2C;function isTomorrow(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return isSameDay(dirtyDate,addDays(Date.now(),1))}var index$2D={default:isTomorrow};_exports.$index$140=index$2D;function isTuesday(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return 2===toDate(dirtyDate).getDay()}var index$2E={default:isTuesday};_exports.$index$141=index$2E;function isWednesday(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return 3===toDate(dirtyDate).getDay()}var index$2F={default:isWednesday};_exports.$index$143=index$2F;function isWithinInterval(dirtyDate,dirtyInterval){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var interval=dirtyInterval||{},time=toDate(dirtyDate).getTime(),startTime=toDate(interval.start).getTime(),endTime=toDate(interval.end).getTime();// Throw an exception if start date is after end date or if any date is `Invalid Date`
if(!(startTime<=endTime)){throw new RangeError("Invalid interval")}return time>=startTime&&time<=endTime}var index$2G={default:isWithinInterval};_exports.$index$145=index$2G;function subDays(dirtyDate,dirtyAmount){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var amount=toInteger(dirtyAmount);return addDays(dirtyDate,-amount)}var index$2H={default:subDays};_exports.$index$201=index$2H;function isYesterday(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return isSameDay(dirtyDate,subDays(Date.now(),1))}var index$2I={default:isYesterday};_exports.$index$146=index$2I;function lastDayOfDecade(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),year=date.getFullYear(),decade=9+10*Math.floor(year/10);date.setFullYear(decade+1,0,0);date.setHours(0,0,0,0);return date}var index$2J={default:lastDayOfDecade};_exports.$index$147=index$2J;function lastDayOfWeek(dirtyDate,dirtyOptions){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var options=dirtyOptions||{},locale=options.locale,localeWeekStartsOn=locale&&locale.options&&locale.options.weekStartsOn,defaultWeekStartsOn=null==localeWeekStartsOn?0:toInteger(localeWeekStartsOn),weekStartsOn=null==options.weekStartsOn?defaultWeekStartsOn:toInteger(options.weekStartsOn);// Test if weekStartsOn is between 0 and 6 _and_ is not NaN
if(!(0<=weekStartsOn&&6>=weekStartsOn)){throw new RangeError("weekStartsOn must be between 0 and 6")}var date=toDate(dirtyDate),day=date.getDay(),diff=(day<weekStartsOn?-7:0)+6-(day-weekStartsOn);date.setHours(0,0,0,0);date.setDate(date.getDate()+diff);return date}var index$2K={default:lastDayOfWeek};_exports.$index$152=index$2K;function lastDayOfISOWeek(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}return lastDayOfWeek(dirtyDate,{weekStartsOn:1})}var index$2L={default:lastDayOfISOWeek};_exports.$index$148=index$2L;function lastDayOfISOWeekYear(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var year=getISOWeekYear(dirtyDate),fourthOfJanuary=new Date(0);fourthOfJanuary.setFullYear(year+1,0,4);fourthOfJanuary.setHours(0,0,0,0);var date=startOfISOWeek(fourthOfJanuary);date.setDate(date.getDate()-1);return date}var index$2M={default:lastDayOfISOWeekYear};_exports.$index$149=index$2M;function lastDayOfQuarter(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),currentMonth=date.getMonth(),month=currentMonth-currentMonth%3+3;date.setMonth(month,0);date.setHours(0,0,0,0);return date}var index$2N={default:lastDayOfQuarter};_exports.$index$151=index$2N;function lastDayOfYear(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),year=date.getFullYear();date.setFullYear(year+1,0,0);date.setHours(0,0,0,0);return date}var index$2O={default:lastDayOfYear};// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
_exports.$index$153=index$2O;var formattingTokensRegExp$1=/(\w)\1*|''|'(''|[^'])+('|$)|./g,escapedStringRegExp$1=/^'(.*?)'?$/,doubleQuoteRegExp$1=/''/g,unescapedLatinCharacterRegExp$1=/[a-zA-Z]/;/**
                                                  * @name lightFormat
                                                  * @category Common Helpers
                                                  * @summary Format the date.
                                                  *
                                                  * @description
                                                  * Return the formatted date string in the given format. Unlike `format`,
                                                  * `lightFormat` doesn't use locales and outputs date using the most popular tokens.
                                                  *
                                                  * > ⚠️ Please note that the `lightFormat` tokens differ from Moment.js and other libraries.
                                                  * > See: https://git.io/fxCyr
                                                  *
                                                  * The characters wrapped between two single quotes characters (') are escaped.
                                                  * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
                                                  *
                                                  * Format of the string is based on Unicode Technical Standard #35:
                                                  * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
                                                  *
                                                  * Accepted patterns:
                                                  * | Unit                            | Pattern | Result examples                   |
                                                  * |---------------------------------|---------|-----------------------------------|
                                                  * | AM, PM                          | a..aaa  | AM, PM                            |
                                                  * |                                 | aaaa    | a.m., p.m.                        |
                                                  * |                                 | aaaaa   | a, p                              |
                                                  * | Calendar year                   | y       | 44, 1, 1900, 2017                 |
                                                  * |                                 | yy      | 44, 01, 00, 17                    |
                                                  * |                                 | yyy     | 044, 001, 000, 017                |
                                                  * |                                 | yyyy    | 0044, 0001, 1900, 2017            |
                                                  * | Month (formatting)              | M       | 1, 2, ..., 12                     |
                                                  * |                                 | MM      | 01, 02, ..., 12                   |
                                                  * | Day of month                    | d       | 1, 2, ..., 31                     |
                                                  * |                                 | dd      | 01, 02, ..., 31                   |
                                                  * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |
                                                  * |                                 | hh      | 01, 02, ..., 11, 12               |
                                                  * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |
                                                  * |                                 | HH      | 00, 01, 02, ..., 23               |
                                                  * | Minute                          | m       | 0, 1, ..., 59                     |
                                                  * |                                 | mm      | 00, 01, ..., 59                   |
                                                  * | Second                          | s       | 0, 1, ..., 59                     |
                                                  * |                                 | ss      | 00, 01, ..., 59                   |
                                                  * | Fraction of second              | S       | 0, 1, ..., 9                      |
                                                  * |                                 | SS      | 00, 01, ..., 99                   |
                                                  * |                                 | SSS     | 000, 0001, ..., 999               |
                                                  * |                                 | SSSS    | ...                               |
                                                  *
                                                  * @param {Date|Number} date - the original date
                                                  * @param {String} format - the string of tokens
                                                  * @returns {String} the formatted date string
                                                  * @throws {TypeError} 2 arguments required
                                                  * @throws {RangeError} format string contains an unescaped latin alphabet character
                                                  *
                                                  * @example
                                                  * var result = format(new Date(2014, 1, 11), 'yyyy-MM-dd')
                                                  * //=> '1987-02-11'
                                                  */function lightFormat(dirtyDate,dirtyFormatStr){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var formatStr=dirtyFormatStr+"",originalDate=toDate(dirtyDate);if(!isValid$1(originalDate)){throw new RangeError("Invalid time value")}// Convert the date in system timezone to the same date in UTC+00:00 timezone.
// This ensures that when UTC functions will be implemented, locales will be compatible with them.
// See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376
var timezoneOffset=getTimezoneOffsetInMilliseconds(originalDate),utcDate=subMilliseconds(originalDate,timezoneOffset),result=formatStr.match(formattingTokensRegExp$1).map(function(substring){// Replace two single quote characters with one single quote character
if("''"===substring){return"'"}var firstCharacter=substring[0];if("'"===firstCharacter){return cleanEscapedString$1(substring)}var formatter=formatters[firstCharacter];if(formatter){return formatter(utcDate,substring,null,{})}if(firstCharacter.match(unescapedLatinCharacterRegExp$1)){throw new RangeError("Format string contains an unescaped latin alphabet character `"+firstCharacter+"`")}return substring}).join("");return result}function cleanEscapedString$1(input){return input.match(escapedStringRegExp$1)[1].replace(doubleQuoteRegExp$1,"'")}var index$2P={default:lightFormat};_exports.$index$154=index$2P;function max(dirtyDatesArray){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var datesArray;// `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method
if(dirtyDatesArray&&"function"===typeof dirtyDatesArray.forEach){datesArray=dirtyDatesArray;// If `dirtyDatesArray` is Array-like Object, convert to Array.
}else if("object"===typeof dirtyDatesArray&&null!==dirtyDatesArray){datesArray=Array.prototype.slice.call(dirtyDatesArray)}else{// `dirtyDatesArray` is non-iterable, return Invalid Date
return new Date(NaN)}var result;datesArray.forEach(function(dirtyDate){var currentDate=toDate(dirtyDate);if(result===void 0||result<currentDate||isNaN(currentDate)){result=currentDate}});return result||new Date(NaN)}var index$2Q={default:max};_exports.$index$165=index$2Q;function min(dirtyDatesArray){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var datesArray;// `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method
if(dirtyDatesArray&&"function"===typeof dirtyDatesArray.forEach){datesArray=dirtyDatesArray;// If `dirtyDatesArray` is Array-like Object, convert to Array.
}else if("object"===typeof dirtyDatesArray&&null!==dirtyDatesArray){datesArray=Array.prototype.slice.call(dirtyDatesArray)}else{// `dirtyDatesArray` is non-iterable, return Invalid Date
return new Date(NaN)}var result;datesArray.forEach(function(dirtyDate){var currentDate=toDate(dirtyDate);if(result===void 0||result>currentDate||isNaN(currentDate)){result=currentDate}});return result||new Date(NaN)}var index$2R={default:min};_exports.$index$166=index$2R;var MILLISECONDS_IN_HOUR$2=36e5,MILLISECONDS_IN_MINUTE$3=6e4,MILLISECONDS_IN_SECOND=1e3,numericPatterns={month:/^(1[0-2]|0?\d)/,// 0 to 12
date:/^(3[0-1]|[0-2]?\d)/,// 0 to 31
dayOfYear:/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,// 0 to 366
week:/^(5[0-3]|[0-4]?\d)/,// 0 to 53
hour23h:/^(2[0-3]|[0-1]?\d)/,// 0 to 23
hour24h:/^(2[0-4]|[0-1]?\d)/,// 0 to 24
hour11h:/^(1[0-1]|0?\d)/,// 0 to 11
hour12h:/^(1[0-2]|0?\d)/,// 0 to 12
minute:/^[0-5]?\d/,// 0 to 59
second:/^[0-5]?\d/,// 0 to 59
singleDigit:/^\d/,// 0 to 9
twoDigits:/^\d{1,2}/,// 0 to 99
threeDigits:/^\d{1,3}/,// 0 to 999
fourDigits:/^\d{1,4}/,// 0 to 9999
anyDigitsSigned:/^-?\d+/,singleDigitSigned:/^-?\d/,// 0 to 9, -0 to -9
twoDigitsSigned:/^-?\d{1,2}/,// 0 to 99, -0 to -99
threeDigitsSigned:/^-?\d{1,3}/,// 0 to 999, -0 to -999
fourDigitsSigned:/^-?\d{1,4}/ // 0 to 9999, -0 to -9999
},timezonePatterns={basicOptionalMinutes:/^([+-])(\d{2})(\d{2})?|Z/,basic:/^([+-])(\d{2})(\d{2})|Z/,basicOptionalSeconds:/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,extended:/^([+-])(\d{2}):(\d{2})|Z/,extendedOptionalSeconds:/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/};function parseNumericPattern(pattern,string,valueCallback){var matchResult=string.match(pattern);if(!matchResult){return null}var value=parseInt(matchResult[0],10);return{value:valueCallback?valueCallback(value):value,rest:string.slice(matchResult[0].length)}}function parseTimezonePattern(pattern,string){var matchResult=string.match(pattern);if(!matchResult){return null}// Input is 'Z'
if("Z"===matchResult[0]){return{value:0,rest:string.slice(1)}}var sign="+"===matchResult[1]?1:-1,hours=matchResult[2]?parseInt(matchResult[2],10):0,minutes=matchResult[3]?parseInt(matchResult[3],10):0,seconds=matchResult[5]?parseInt(matchResult[5],10):0;return{value:sign*(hours*MILLISECONDS_IN_HOUR$2+minutes*MILLISECONDS_IN_MINUTE$3+seconds*MILLISECONDS_IN_SECOND),rest:string.slice(matchResult[0].length)}}function parseAnyDigitsSigned(string,valueCallback){return parseNumericPattern(numericPatterns.anyDigitsSigned,string,valueCallback)}function parseNDigits(n,string,valueCallback){switch(n){case 1:return parseNumericPattern(numericPatterns.singleDigit,string,valueCallback);case 2:return parseNumericPattern(numericPatterns.twoDigits,string,valueCallback);case 3:return parseNumericPattern(numericPatterns.threeDigits,string,valueCallback);case 4:return parseNumericPattern(numericPatterns.fourDigits,string,valueCallback);default:return parseNumericPattern(new RegExp("^\\d{1,"+n+"}"),string,valueCallback);}}function parseNDigitsSigned(n,string,valueCallback){switch(n){case 1:return parseNumericPattern(numericPatterns.singleDigitSigned,string,valueCallback);case 2:return parseNumericPattern(numericPatterns.twoDigitsSigned,string,valueCallback);case 3:return parseNumericPattern(numericPatterns.threeDigitsSigned,string,valueCallback);case 4:return parseNumericPattern(numericPatterns.fourDigitsSigned,string,valueCallback);default:return parseNumericPattern(new RegExp("^-?\\d{1,"+n+"}"),string,valueCallback);}}function dayPeriodEnumToHours(enumValue){switch(enumValue){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;case"am":case"midnight":case"night":default:return 0;}}function normalizeTwoDigitYear(twoDigitYear,currentYear){var isCommonEra=0<currentYear,absCurrentYear=isCommonEra?currentYear:1-currentYear,result;// Absolute number of the current year:
// 1 -> 1 AC
// 0 -> 1 BC
// -1 -> 2 BC
if(50>=absCurrentYear){result=twoDigitYear||100}else{var rangeEnd=absCurrentYear+50,rangeEndCentury=100*Math.floor(rangeEnd/100),isPreviousCentury=twoDigitYear>=rangeEnd%100;result=twoDigitYear+rangeEndCentury-(isPreviousCentury?100:0)}return isCommonEra?result:1-result}var DAYS_IN_MONTH=[31,28,31,30,31,30,31,31,30,31,30,31],DAYS_IN_MONTH_LEAP_YEAR=[31,29,31,30,31,30,31,31,30,31,30,31];// User for validation
function isLeapYearIndex(year){return 0===year%400||0===year%4&&0!==year%100}/*
   * |     | Unit                           |     | Unit                           |
   * |-----|--------------------------------|-----|--------------------------------|
   * |  a  | AM, PM                         |  A* | Milliseconds in day            |
   * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
   * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
   * |  d  | Day of month                   |  D  | Day of year                    |
   * |  e  | Local day of week              |  E  | Day of week                    |
   * |  f  |                                |  F* | Day of week in month           |
   * |  g* | Modified Julian day            |  G  | Era                            |
   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
   * |  i! | ISO day of week                |  I! | ISO week of year               |
   * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
   * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
   * |  l* | (deprecated)                   |  L  | Stand-alone month              |
   * |  m  | Minute                         |  M  | Month                          |
   * |  n  |                                |  N  |                                |
   * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
   * |  p  |                                |  P  |                                |
   * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
   * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
   * |  s  | Second                         |  S  | Fraction of second             |
   * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
   * |  u  | Extended year                  |  U* | Cyclic year                    |
   * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
   * |  w  | Local week of year             |  W* | Week of month                  |
   * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
   * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
   * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
   *
   * Letters marked by * are not implemented but reserved by Unicode standard.
   *
   * Letters marked by ! are non-standard, but implemented by date-fns:
   * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
   * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
   *   i.e. 7 for Sunday, 1 for Monday, etc.
   * - `I` is ISO week of year, as opposed to `w` which is local week of year.
   * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
   *   `R` is supposed to be used in conjunction with `I` and `i`
   *   for universal ISO week-numbering date, whereas
   *   `Y` is supposed to be used in conjunction with `w` and `e`
   *   for week-numbering date specific to the locale.
   */var parsers={// Era
G:{priority:140,parse:function(string,token,match,_options){switch(token){// AD, BC
case"G":case"GG":case"GGG":return match.era(string,{width:"abbreviated"})||match.era(string,{width:"narrow"});// A, B
case"GGGGG":return match.era(string,{width:"narrow"});// Anno Domini, Before Christ
case"GGGG":default:return match.era(string,{width:"wide"})||match.era(string,{width:"abbreviated"})||match.era(string,{width:"narrow"});}},set:function(date,flags,value,_options){flags.era=value;date.setUTCFullYear(value,0,1);date.setUTCHours(0,0,0,0);return date},incompatibleTokens:["R","u","t","T"]},// Year
y:{// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
// | Year     |     y | yy |   yyy |  yyyy | yyyyy |
// |----------|-------|----|-------|-------|-------|
// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
priority:130,parse:function(string,token,match,_options){var valueCallback=function(year){return{year:year,isTwoDigitYear:"yy"===token}};switch(token){case"y":return parseNDigits(4,string,valueCallback);case"yo":return match.ordinalNumber(string,{unit:"year",valueCallback:valueCallback});default:return parseNDigits(token.length,string,valueCallback);}},validate:function(_date,value,_options){return value.isTwoDigitYear||0<value.year},set:function(date,flags,value,_options){var currentYear=date.getUTCFullYear();if(value.isTwoDigitYear){var normalizedTwoDigitYear=normalizeTwoDigitYear(value.year,currentYear);date.setUTCFullYear(normalizedTwoDigitYear,0,1);date.setUTCHours(0,0,0,0);return date}var year=!("era"in flags)||1===flags.era?value.year:1-value.year;date.setUTCFullYear(year,0,1);date.setUTCHours(0,0,0,0);return date},incompatibleTokens:["Y","R","u","w","I","i","e","c","t","T"]},// Local week-numbering year
Y:{priority:130,parse:function(string,token,match,_options){var valueCallback=function(year){return{year:year,isTwoDigitYear:"YY"===token}};switch(token){case"Y":return parseNDigits(4,string,valueCallback);case"Yo":return match.ordinalNumber(string,{unit:"year",valueCallback:valueCallback});default:return parseNDigits(token.length,string,valueCallback);}},validate:function(_date,value,_options){return value.isTwoDigitYear||0<value.year},set:function(date,flags,value,options){var currentYear=getUTCWeekYear(date,options);if(value.isTwoDigitYear){var normalizedTwoDigitYear=normalizeTwoDigitYear(value.year,currentYear);date.setUTCFullYear(normalizedTwoDigitYear,0,options.firstWeekContainsDate);date.setUTCHours(0,0,0,0);return startOfUTCWeek(date,options)}var year=!("era"in flags)||1===flags.era?value.year:1-value.year;date.setUTCFullYear(year,0,options.firstWeekContainsDate);date.setUTCHours(0,0,0,0);return startOfUTCWeek(date,options)},incompatibleTokens:["y","R","u","Q","q","M","L","I","d","D","i","t","T"]},// ISO week-numbering year
R:{priority:130,parse:function(string,token,_match,_options){if("R"===token){return parseNDigitsSigned(4,string)}return parseNDigitsSigned(token.length,string)},set:function(_date,_flags,value,_options){var firstWeekOfYear=new Date(0);firstWeekOfYear.setUTCFullYear(value,0,4);firstWeekOfYear.setUTCHours(0,0,0,0);return startOfUTCISOWeek(firstWeekOfYear)},incompatibleTokens:["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]},// Extended year
u:{priority:130,parse:function(string,token,_match,_options){if("u"===token){return parseNDigitsSigned(4,string)}return parseNDigitsSigned(token.length,string)},set:function(date,_flags,value,_options){date.setUTCFullYear(value,0,1);date.setUTCHours(0,0,0,0);return date},incompatibleTokens:["G","y","Y","R","w","I","i","e","c","t","T"]},// Quarter
Q:{priority:120,parse:function(string,token,match,_options){switch(token){// 1, 2, 3, 4
case"Q":case"QQ":// 01, 02, 03, 04
return parseNDigits(token.length,string);// 1st, 2nd, 3rd, 4th
case"Qo":return match.ordinalNumber(string,{unit:"quarter"});// Q1, Q2, Q3, Q4
case"QQQ":return match.quarter(string,{width:"abbreviated",context:"formatting"})||match.quarter(string,{width:"narrow",context:"formatting"});// 1, 2, 3, 4 (narrow quarter; could be not numerical)
case"QQQQQ":return match.quarter(string,{width:"narrow",context:"formatting"});// 1st quarter, 2nd quarter, ...
case"QQQQ":default:return match.quarter(string,{width:"wide",context:"formatting"})||match.quarter(string,{width:"abbreviated",context:"formatting"})||match.quarter(string,{width:"narrow",context:"formatting"});}},validate:function(_date,value,_options){return 1<=value&&4>=value},set:function(date,_flags,value,_options){date.setUTCMonth(3*(value-1),1);date.setUTCHours(0,0,0,0);return date},incompatibleTokens:["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]},// Stand-alone quarter
q:{priority:120,parse:function(string,token,match,_options){switch(token){// 1, 2, 3, 4
case"q":case"qq":// 01, 02, 03, 04
return parseNDigits(token.length,string);// 1st, 2nd, 3rd, 4th
case"qo":return match.ordinalNumber(string,{unit:"quarter"});// Q1, Q2, Q3, Q4
case"qqq":return match.quarter(string,{width:"abbreviated",context:"standalone"})||match.quarter(string,{width:"narrow",context:"standalone"});// 1, 2, 3, 4 (narrow quarter; could be not numerical)
case"qqqqq":return match.quarter(string,{width:"narrow",context:"standalone"});// 1st quarter, 2nd quarter, ...
case"qqqq":default:return match.quarter(string,{width:"wide",context:"standalone"})||match.quarter(string,{width:"abbreviated",context:"standalone"})||match.quarter(string,{width:"narrow",context:"standalone"});}},validate:function(_date,value,_options){return 1<=value&&4>=value},set:function(date,_flags,value,_options){date.setUTCMonth(3*(value-1),1);date.setUTCHours(0,0,0,0);return date},incompatibleTokens:["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]},// Month
M:{priority:110,parse:function(string,token,match,_options){var valueCallback=function(value){return value-1};switch(token){// 1, 2, ..., 12
case"M":return parseNumericPattern(numericPatterns.month,string,valueCallback);// 01, 02, ..., 12
case"MM":return parseNDigits(2,string,valueCallback);// 1st, 2nd, ..., 12th
case"Mo":return match.ordinalNumber(string,{unit:"month",valueCallback:valueCallback});// Jan, Feb, ..., Dec
case"MMM":return match.month(string,{width:"abbreviated",context:"formatting"})||match.month(string,{width:"narrow",context:"formatting"});// J, F, ..., D
case"MMMMM":return match.month(string,{width:"narrow",context:"formatting"});// January, February, ..., December
case"MMMM":default:return match.month(string,{width:"wide",context:"formatting"})||match.month(string,{width:"abbreviated",context:"formatting"})||match.month(string,{width:"narrow",context:"formatting"});}},validate:function(_date,value,_options){return 0<=value&&11>=value},set:function(date,_flags,value,_options){date.setUTCMonth(value,1);date.setUTCHours(0,0,0,0);return date},incompatibleTokens:["Y","R","q","Q","L","w","I","D","i","e","c","t","T"]},// Stand-alone month
L:{priority:110,parse:function(string,token,match,_options){var valueCallback=function(value){return value-1};switch(token){// 1, 2, ..., 12
case"L":return parseNumericPattern(numericPatterns.month,string,valueCallback);// 01, 02, ..., 12
case"LL":return parseNDigits(2,string,valueCallback);// 1st, 2nd, ..., 12th
case"Lo":return match.ordinalNumber(string,{unit:"month",valueCallback:valueCallback});// Jan, Feb, ..., Dec
case"LLL":return match.month(string,{width:"abbreviated",context:"standalone"})||match.month(string,{width:"narrow",context:"standalone"});// J, F, ..., D
case"LLLLL":return match.month(string,{width:"narrow",context:"standalone"});// January, February, ..., December
case"LLLL":default:return match.month(string,{width:"wide",context:"standalone"})||match.month(string,{width:"abbreviated",context:"standalone"})||match.month(string,{width:"narrow",context:"standalone"});}},validate:function(_date,value,_options){return 0<=value&&11>=value},set:function(date,_flags,value,_options){date.setUTCMonth(value,1);date.setUTCHours(0,0,0,0);return date},incompatibleTokens:["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]},// Local week of year
w:{priority:100,parse:function(string,token,match,_options){switch(token){case"w":return parseNumericPattern(numericPatterns.week,string);case"wo":return match.ordinalNumber(string,{unit:"week"});default:return parseNDigits(token.length,string);}},validate:function(_date,value,_options){return 1<=value&&53>=value},set:function(date,_flags,value,options){return startOfUTCWeek(setUTCWeek(date,value,options),options)},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","i","t","T"]},// ISO week of year
I:{priority:100,parse:function(string,token,match,_options){switch(token){case"I":return parseNumericPattern(numericPatterns.week,string);case"Io":return match.ordinalNumber(string,{unit:"week"});default:return parseNDigits(token.length,string);}},validate:function(_date,value,_options){return 1<=value&&53>=value},set:function(date,_flags,value,options){return startOfUTCISOWeek(setUTCISOWeek(date,value,options),options)},incompatibleTokens:["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]},// Day of the month
d:{priority:90,parse:function(string,token,match,_options){switch(token){case"d":return parseNumericPattern(numericPatterns.date,string);case"do":return match.ordinalNumber(string,{unit:"date"});default:return parseNDigits(token.length,string);}},validate:function(date,value,_options){var year=date.getUTCFullYear(),isLeapYear=isLeapYearIndex(year),month=date.getUTCMonth();if(isLeapYear){return 1<=value&&value<=DAYS_IN_MONTH_LEAP_YEAR[month]}else{return 1<=value&&value<=DAYS_IN_MONTH[month]}},set:function(date,_flags,value,_options){date.setUTCDate(value);date.setUTCHours(0,0,0,0);return date},incompatibleTokens:["Y","R","q","Q","w","I","D","i","e","c","t","T"]},// Day of year
D:{priority:90,parse:function(string,token,match,_options){switch(token){case"D":case"DD":return parseNumericPattern(numericPatterns.dayOfYear,string);case"Do":return match.ordinalNumber(string,{unit:"date"});default:return parseNDigits(token.length,string);}},validate:function(date,value,_options){var year=date.getUTCFullYear(),isLeapYear=isLeapYearIndex(year);if(isLeapYear){return 1<=value&&366>=value}else{return 1<=value&&365>=value}},set:function(date,_flags,value,_options){date.setUTCMonth(0,value);date.setUTCHours(0,0,0,0);return date},incompatibleTokens:["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]},// Day of week
E:{priority:90,parse:function(string,token,match,_options){switch(token){// Tue
case"E":case"EE":case"EEE":return match.day(string,{width:"abbreviated",context:"formatting"})||match.day(string,{width:"short",context:"formatting"})||match.day(string,{width:"narrow",context:"formatting"});// T
case"EEEEE":return match.day(string,{width:"narrow",context:"formatting"});// Tu
case"EEEEEE":return match.day(string,{width:"short",context:"formatting"})||match.day(string,{width:"narrow",context:"formatting"});// Tuesday
case"EEEE":default:return match.day(string,{width:"wide",context:"formatting"})||match.day(string,{width:"abbreviated",context:"formatting"})||match.day(string,{width:"short",context:"formatting"})||match.day(string,{width:"narrow",context:"formatting"});}},validate:function(_date,value,_options){return 0<=value&&6>=value},set:function(date,_flags,value,options){date=setUTCDay(date,value,options);date.setUTCHours(0,0,0,0);return date},incompatibleTokens:["D","i","e","c","t","T"]},// Local day of week
e:{priority:90,parse:function(string,token,match,options){var valueCallback=function(value){var wholeWeekDays=7*Math.floor((value-1)/7);return(value+options.weekStartsOn+6)%7+wholeWeekDays};switch(token){// 3
case"e":case"ee":// 03
return parseNDigits(token.length,string,valueCallback);// 3rd
case"eo":return match.ordinalNumber(string,{unit:"day",valueCallback:valueCallback});// Tue
case"eee":return match.day(string,{width:"abbreviated",context:"formatting"})||match.day(string,{width:"short",context:"formatting"})||match.day(string,{width:"narrow",context:"formatting"});// T
case"eeeee":return match.day(string,{width:"narrow",context:"formatting"});// Tu
case"eeeeee":return match.day(string,{width:"short",context:"formatting"})||match.day(string,{width:"narrow",context:"formatting"});// Tuesday
case"eeee":default:return match.day(string,{width:"wide",context:"formatting"})||match.day(string,{width:"abbreviated",context:"formatting"})||match.day(string,{width:"short",context:"formatting"})||match.day(string,{width:"narrow",context:"formatting"});}},validate:function(_date,value,_options){return 0<=value&&6>=value},set:function(date,_flags,value,options){date=setUTCDay(date,value,options);date.setUTCHours(0,0,0,0);return date},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]},// Stand-alone local day of week
c:{priority:90,parse:function(string,token,match,options){var valueCallback=function(value){var wholeWeekDays=7*Math.floor((value-1)/7);return(value+options.weekStartsOn+6)%7+wholeWeekDays};switch(token){// 3
case"c":case"cc":// 03
return parseNDigits(token.length,string,valueCallback);// 3rd
case"co":return match.ordinalNumber(string,{unit:"day",valueCallback:valueCallback});// Tue
case"ccc":return match.day(string,{width:"abbreviated",context:"standalone"})||match.day(string,{width:"short",context:"standalone"})||match.day(string,{width:"narrow",context:"standalone"});// T
case"ccccc":return match.day(string,{width:"narrow",context:"standalone"});// Tu
case"cccccc":return match.day(string,{width:"short",context:"standalone"})||match.day(string,{width:"narrow",context:"standalone"});// Tuesday
case"cccc":default:return match.day(string,{width:"wide",context:"standalone"})||match.day(string,{width:"abbreviated",context:"standalone"})||match.day(string,{width:"short",context:"standalone"})||match.day(string,{width:"narrow",context:"standalone"});}},validate:function(_date,value,_options){return 0<=value&&6>=value},set:function(date,_flags,value,options){date=setUTCDay(date,value,options);date.setUTCHours(0,0,0,0);return date},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]},// ISO day of week
i:{priority:90,parse:function(string,token,match,_options){var valueCallback=function(value){if(0===value){return 7}return value};switch(token){// 2
case"i":case"ii":// 02
return parseNDigits(token.length,string);// 2nd
case"io":return match.ordinalNumber(string,{unit:"day"});// Tue
case"iii":return match.day(string,{width:"abbreviated",context:"formatting",valueCallback:valueCallback})||match.day(string,{width:"short",context:"formatting",valueCallback:valueCallback})||match.day(string,{width:"narrow",context:"formatting",valueCallback:valueCallback});// T
case"iiiii":return match.day(string,{width:"narrow",context:"formatting",valueCallback:valueCallback});// Tu
case"iiiiii":return match.day(string,{width:"short",context:"formatting",valueCallback:valueCallback})||match.day(string,{width:"narrow",context:"formatting",valueCallback:valueCallback});// Tuesday
case"iiii":default:return match.day(string,{width:"wide",context:"formatting",valueCallback:valueCallback})||match.day(string,{width:"abbreviated",context:"formatting",valueCallback:valueCallback})||match.day(string,{width:"short",context:"formatting",valueCallback:valueCallback})||match.day(string,{width:"narrow",context:"formatting",valueCallback:valueCallback});}},validate:function(_date,value,_options){return 1<=value&&7>=value},set:function(date,_flags,value,options){date=setUTCISODay(date,value,options);date.setUTCHours(0,0,0,0);return date},incompatibleTokens:["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]},// AM or PM
a:{priority:80,parse:function(string,token,match,_options){switch(token){case"a":case"aa":case"aaa":return match.dayPeriod(string,{width:"abbreviated",context:"formatting"})||match.dayPeriod(string,{width:"narrow",context:"formatting"});case"aaaaa":return match.dayPeriod(string,{width:"narrow",context:"formatting"});case"aaaa":default:return match.dayPeriod(string,{width:"wide",context:"formatting"})||match.dayPeriod(string,{width:"abbreviated",context:"formatting"})||match.dayPeriod(string,{width:"narrow",context:"formatting"});}},set:function(date,_flags,value,_options){date.setUTCHours(dayPeriodEnumToHours(value),0,0,0);return date},incompatibleTokens:["b","B","H","K","k","t","T"]},// AM, PM, midnight
b:{priority:80,parse:function(string,token,match,_options){switch(token){case"b":case"bb":case"bbb":return match.dayPeriod(string,{width:"abbreviated",context:"formatting"})||match.dayPeriod(string,{width:"narrow",context:"formatting"});case"bbbbb":return match.dayPeriod(string,{width:"narrow",context:"formatting"});case"bbbb":default:return match.dayPeriod(string,{width:"wide",context:"formatting"})||match.dayPeriod(string,{width:"abbreviated",context:"formatting"})||match.dayPeriod(string,{width:"narrow",context:"formatting"});}},set:function(date,_flags,value,_options){date.setUTCHours(dayPeriodEnumToHours(value),0,0,0);return date},incompatibleTokens:["a","B","H","K","k","t","T"]},// in the morning, in the afternoon, in the evening, at night
B:{priority:80,parse:function(string,token,match,_options){switch(token){case"B":case"BB":case"BBB":return match.dayPeriod(string,{width:"abbreviated",context:"formatting"})||match.dayPeriod(string,{width:"narrow",context:"formatting"});case"BBBBB":return match.dayPeriod(string,{width:"narrow",context:"formatting"});case"BBBB":default:return match.dayPeriod(string,{width:"wide",context:"formatting"})||match.dayPeriod(string,{width:"abbreviated",context:"formatting"})||match.dayPeriod(string,{width:"narrow",context:"formatting"});}},set:function(date,_flags,value,_options){date.setUTCHours(dayPeriodEnumToHours(value),0,0,0);return date},incompatibleTokens:["a","b","t","T"]},// Hour [1-12]
h:{priority:70,parse:function(string,token,match,_options){switch(token){case"h":return parseNumericPattern(numericPatterns.hour12h,string);case"ho":return match.ordinalNumber(string,{unit:"hour"});default:return parseNDigits(token.length,string);}},validate:function(_date,value,_options){return 1<=value&&12>=value},set:function(date,_flags,value,_options){var isPM=12<=date.getUTCHours();if(isPM&&12>value){date.setUTCHours(value+12,0,0,0)}else if(!isPM&&12===value){date.setUTCHours(0,0,0,0)}else{date.setUTCHours(value,0,0,0)}return date},incompatibleTokens:["H","K","k","t","T"]},// Hour [0-23]
H:{priority:70,parse:function(string,token,match,_options){switch(token){case"H":return parseNumericPattern(numericPatterns.hour23h,string);case"Ho":return match.ordinalNumber(string,{unit:"hour"});default:return parseNDigits(token.length,string);}},validate:function(_date,value,_options){return 0<=value&&23>=value},set:function(date,_flags,value,_options){date.setUTCHours(value,0,0,0);return date},incompatibleTokens:["a","b","h","K","k","t","T"]},// Hour [0-11]
K:{priority:70,parse:function(string,token,match,_options){switch(token){case"K":return parseNumericPattern(numericPatterns.hour11h,string);case"Ko":return match.ordinalNumber(string,{unit:"hour"});default:return parseNDigits(token.length,string);}},validate:function(_date,value,_options){return 0<=value&&11>=value},set:function(date,_flags,value,_options){var isPM=12<=date.getUTCHours();if(isPM&&12>value){date.setUTCHours(value+12,0,0,0)}else{date.setUTCHours(value,0,0,0)}return date},incompatibleTokens:["a","b","h","H","k","t","T"]},// Hour [1-24]
k:{priority:70,parse:function(string,token,match,_options){switch(token){case"k":return parseNumericPattern(numericPatterns.hour24h,string);case"ko":return match.ordinalNumber(string,{unit:"hour"});default:return parseNDigits(token.length,string);}},validate:function(_date,value,_options){return 1<=value&&24>=value},set:function(date,_flags,value,_options){var hours=24>=value?value%24:value;date.setUTCHours(hours,0,0,0);return date},incompatibleTokens:["a","b","h","H","K","t","T"]},// Minute
m:{priority:60,parse:function(string,token,match,_options){switch(token){case"m":return parseNumericPattern(numericPatterns.minute,string);case"mo":return match.ordinalNumber(string,{unit:"minute"});default:return parseNDigits(token.length,string);}},validate:function(_date,value,_options){return 0<=value&&59>=value},set:function(date,_flags,value,_options){date.setUTCMinutes(value,0,0);return date},incompatibleTokens:["t","T"]},// Second
s:{priority:50,parse:function(string,token,match,_options){switch(token){case"s":return parseNumericPattern(numericPatterns.second,string);case"so":return match.ordinalNumber(string,{unit:"second"});default:return parseNDigits(token.length,string);}},validate:function(_date,value,_options){return 0<=value&&59>=value},set:function(date,_flags,value,_options){date.setUTCSeconds(value,0);return date},incompatibleTokens:["t","T"]},// Fraction of second
S:{priority:30,parse:function(string,token,_match,_options){var valueCallback=function(value){return Math.floor(value*Math.pow(10,-token.length+3))};return parseNDigits(token.length,string,valueCallback)},set:function(date,_flags,value,_options){date.setUTCMilliseconds(value);return date},incompatibleTokens:["t","T"]},// Timezone (ISO-8601. +00:00 is `'Z'`)
X:{priority:10,parse:function(string,token,_match,_options){switch(token){case"X":return parseTimezonePattern(timezonePatterns.basicOptionalMinutes,string);case"XX":return parseTimezonePattern(timezonePatterns.basic,string);case"XXXX":return parseTimezonePattern(timezonePatterns.basicOptionalSeconds,string);case"XXXXX":return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds,string);case"XXX":default:return parseTimezonePattern(timezonePatterns.extended,string);}},set:function(date,flags,value,_options){if(flags.timestampIsSet){return date}return new Date(date.getTime()-value)},incompatibleTokens:["t","T","x"]},// Timezone (ISO-8601)
x:{priority:10,parse:function(string,token,_match,_options){switch(token){case"x":return parseTimezonePattern(timezonePatterns.basicOptionalMinutes,string);case"xx":return parseTimezonePattern(timezonePatterns.basic,string);case"xxxx":return parseTimezonePattern(timezonePatterns.basicOptionalSeconds,string);case"xxxxx":return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds,string);case"xxx":default:return parseTimezonePattern(timezonePatterns.extended,string);}},set:function(date,flags,value,_options){if(flags.timestampIsSet){return date}return new Date(date.getTime()-value)},incompatibleTokens:["t","T","X"]},// Seconds timestamp
t:{priority:40,parse:function(string,_token,_match,_options){return parseAnyDigitsSigned(string)},set:function(_date,_flags,value,_options){return[new Date(1e3*value),{timestampIsSet:!0}]},incompatibleTokens:"*"},// Milliseconds timestamp
T:{priority:20,parse:function(string,_token,_match,_options){return parseAnyDigitsSigned(string)},set:function(_date,_flags,value,_options){return[new Date(value),{timestampIsSet:!0}]},incompatibleTokens:"*"}};_exports.$indexDefault$164=parsers;var index$2S={default:parsers};_exports.$index$167=index$2S;var TIMEZONE_UNIT_PRIORITY=10,formattingTokensRegExp$2=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,longFormattingTokensRegExp$1=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,escapedStringRegExp$2=/^'(.*?)'?$/,doubleQuoteRegExp$2=/''/g,notWhitespaceRegExp=/\S/,unescapedLatinCharacterRegExp$2=/[a-zA-Z]/;// This RegExp consists of three parts separated by `|`:
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
/**
                                                  * @name parse
                                                  * @category Common Helpers
                                                  * @summary Parse the date.
                                                  *
                                                  * @description
                                                  * Return the date parsed from string using the given format string.
                                                  *
                                                  * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
                                                  * > See: https://git.io/fxCyr
                                                  *
                                                  * The characters in the format string wrapped between two single quotes characters (') are escaped.
                                                  * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
                                                  *
                                                  * Format of the format string is based on Unicode Technical Standard #35:
                                                  * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
                                                  * with a few additions (see note 5 below the table).
                                                  *
                                                  * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited
                                                  * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:
                                                  *
                                                  * ```javascript
                                                  * parse('23 AM', 'HH a', new Date())
                                                  * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time
                                                  * ```
                                                  *
                                                  * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true
                                                  *
                                                  * Accepted format string patterns:
                                                  * | Unit                            |Prior| Pattern | Result examples                   | Notes |
                                                  * |---------------------------------|-----|---------|-----------------------------------|-------|
                                                  * | Era                             | 140 | G..GGG  | AD, BC                            |       |
                                                  * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |
                                                  * |                                 |     | GGGGG   | A, B                              |       |
                                                  * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |
                                                  * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
                                                  * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |
                                                  * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |
                                                  * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |
                                                  * |                                 |     | yyyyy   | ...                               | 2,4   |
                                                  * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |
                                                  * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
                                                  * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |
                                                  * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |
                                                  * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |
                                                  * |                                 |     | YYYYY   | ...                               | 2,4   |
                                                  * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |
                                                  * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |
                                                  * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |
                                                  * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |
                                                  * |                                 |     | RRRRR   | ...                               | 2,4,5 |
                                                  * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |
                                                  * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |
                                                  * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |
                                                  * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |
                                                  * |                                 |     | uuuuu   | ...                               | 2,4   |
                                                  * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |
                                                  * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |
                                                  * |                                 |     | QQ      | 01, 02, 03, 04                    |       |
                                                  * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |
                                                  * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
                                                  * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |
                                                  * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |
                                                  * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |
                                                  * |                                 |     | qq      | 01, 02, 03, 04                    |       |
                                                  * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |
                                                  * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
                                                  * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |
                                                  * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |
                                                  * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |
                                                  * |                                 |     | MM      | 01, 02, ..., 12                   |       |
                                                  * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |
                                                  * |                                 |     | MMMM    | January, February, ..., December  | 2     |
                                                  * |                                 |     | MMMMM   | J, F, ..., D                      |       |
                                                  * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |
                                                  * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |
                                                  * |                                 |     | LL      | 01, 02, ..., 12                   |       |
                                                  * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |
                                                  * |                                 |     | LLLL    | January, February, ..., December  | 2     |
                                                  * |                                 |     | LLLLL   | J, F, ..., D                      |       |
                                                  * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |
                                                  * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |
                                                  * |                                 |     | ww      | 01, 02, ..., 53                   |       |
                                                  * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |
                                                  * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |
                                                  * |                                 |     | II      | 01, 02, ..., 53                   | 5     |
                                                  * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |
                                                  * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |
                                                  * |                                 |     | dd      | 01, 02, ..., 31                   |       |
                                                  * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |
                                                  * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |
                                                  * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |
                                                  * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |
                                                  * |                                 |     | DDDD    | ...                               | 2     |
                                                  * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Su            |       |
                                                  * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
                                                  * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |
                                                  * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
                                                  * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |
                                                  * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |
                                                  * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |
                                                  * |                                 |     | iii     | Mon, Tue, Wed, ..., Su            | 5     |
                                                  * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |
                                                  * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |
                                                  * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 5     |
                                                  * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |
                                                  * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |
                                                  * |                                 |     | ee      | 02, 03, ..., 01                   |       |
                                                  * |                                 |     | eee     | Mon, Tue, Wed, ..., Su            |       |
                                                  * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
                                                  * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |
                                                  * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
                                                  * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |
                                                  * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |
                                                  * |                                 |     | cc      | 02, 03, ..., 01                   |       |
                                                  * |                                 |     | ccc     | Mon, Tue, Wed, ..., Su            |       |
                                                  * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
                                                  * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |
                                                  * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
                                                  * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |
                                                  * |                                 |     | aaaa    | a.m., p.m.                        | 2     |
                                                  * |                                 |     | aaaaa   | a, p                              |       |
                                                  * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |
                                                  * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |
                                                  * |                                 |     | bbbbb   | a, p, n, mi                       |       |
                                                  * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |
                                                  * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |
                                                  * |                                 |     | BBBBB   | at night, in the morning, ...     |       |
                                                  * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |
                                                  * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |
                                                  * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |
                                                  * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |
                                                  * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |
                                                  * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |
                                                  * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |
                                                  * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |
                                                  * |                                 |     | KK      | 1, 2, ..., 11, 0                  |       |
                                                  * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |
                                                  * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |
                                                  * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |
                                                  * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |
                                                  * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |
                                                  * |                                 |     | mm      | 00, 01, ..., 59                   |       |
                                                  * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |
                                                  * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |
                                                  * |                                 |     | ss      | 00, 01, ..., 59                   |       |
                                                  * | Seconds timestamp               |  40 | t       | 512969520                         |       |
                                                  * |                                 |     | tt      | ...                               | 2     |
                                                  * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |
                                                  * |                                 |     | SS      | 00, 01, ..., 99                   |       |
                                                  * |                                 |     | SSS     | 000, 0001, ..., 999               |       |
                                                  * |                                 |     | SSSS    | ...                               | 2     |
                                                  * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |
                                                  * |                                 |     | TT      | ...                               | 2     |
                                                  * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |
                                                  * |                                 |     | XX      | -0800, +0530, Z                   |       |
                                                  * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |
                                                  * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |
                                                  * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
                                                  * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |
                                                  * |                                 |     | xx      | -0800, +0530, +0000               |       |
                                                  * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |
                                                  * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |
                                                  * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
                                                  * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |
                                                  * |                                 |     | PP      | May 29, 1453                      |       |
                                                  * |                                 |     | PPP     | May 29th, 1453                    |       |
                                                  * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |
                                                  * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |
                                                  * |                                 |     | pp      | 12:00:00 AM                       |       |
                                                  * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |
                                                  * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |
                                                  * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |
                                                  * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |
                                                  * Notes:
                                                  * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
                                                  *    are the same as "stand-alone" units, but are different in some languages.
                                                  *    "Formatting" units are declined according to the rules of the language
                                                  *    in the context of a date. "Stand-alone" units are always nominative singular.
                                                  *    In `format` function, they will produce different result:
                                                  *
                                                  *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
                                                  *
                                                  *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
                                                  *
                                                  *    `parse` will try to match both formatting and stand-alone units interchangably.
                                                  *
                                                  * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
                                                  *    the single quote characters (see below).
                                                  *    If the sequence is longer than listed in table:
                                                  *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number
                                                  *      as wide as the sequence
                                                  *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.
                                                  *      These variations are marked with "2" in the last column of the table.
                                                  *
                                                  * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
                                                  *    These tokens represent the shortest form of the quarter.
                                                  *
                                                  * 4. The main difference between `y` and `u` patterns are B.C. years:
                                                  *
                                                  *    | Year | `y` | `u` |
                                                  *    |------|-----|-----|
                                                  *    | AC 1 |   1 |   1 |
                                                  *    | BC 1 |   1 |   0 |
                                                  *    | BC 2 |   2 |  -1 |
                                                  *
                                                  *    Also `yy` will try to guess the century of two digit year by proximity with `backupDate`:
                                                  *
                                                  *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`
                                                  *
                                                  *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`
                                                  *
                                                  *    while `uu` will just assign the year as is:
                                                  *
                                                  *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`
                                                  *
                                                  *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`
                                                  *
                                                  *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
                                                  *    except local week-numbering years are dependent on `options.weekStartsOn`
                                                  *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}
                                                  *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).
                                                  *
                                                  * 5. These patterns are not in the Unicode Technical Standard #35:
                                                  *    - `i`: ISO day of week
                                                  *    - `I`: ISO week of year
                                                  *    - `R`: ISO week-numbering year
                                                  *    - `o`: ordinal number modifier
                                                  *    - `P`: long localized date
                                                  *    - `p`: long localized time
                                                  *
                                                  * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
                                                  *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
                                                  *
                                                  * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
                                                  *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
                                                  *
                                                  * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based
                                                  *    on the given locale.
                                                  *
                                                  *    using `en-US` locale: `P` => `MM/dd/yyyy`
                                                  *    using `en-US` locale: `p` => `hh:mm a`
                                                  *    using `pt-BR` locale: `P` => `dd/MM/yyyy`
                                                  *    using `pt-BR` locale: `p` => `HH:mm`
                                                  *
                                                  * Values will be assigned to the date in the descending order of its unit's priority.
                                                  * Units of an equal priority overwrite each other in the order of appearance.
                                                  *
                                                  * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),
                                                  * the values will be taken from 3rd argument `backupDate` which works as a context of parsing.
                                                  *
                                                  * `backupDate` must be passed for correct work of the function.
                                                  * If you're not sure which `backupDate` to supply, create a new instance of Date:
                                                  * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`
                                                  * In this case parsing will be done in the context of the current date.
                                                  * If `backupDate` is `Invalid Date` or a value not convertible to valid `Date`,
                                                  * then `Invalid Date` will be returned.
                                                  *
                                                  * The result may vary by locale.
                                                  *
                                                  * If `formatString` matches with `dateString` but does not provides tokens, `backupDate` will be returned.
                                                  *
                                                  * If parsing failed, `Invalid Date` will be returned.
                                                  * Invalid Date is a Date, whose time value is NaN.
                                                  * Time value of Date: http://es5.github.io/#x15.9.1.1
                                                  *
                                                  * ### v2.0.0 breaking changes:
                                                  *
                                                  * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
                                                  *
                                                  * - Old `parse` was renamed to `toDate`.
                                                  *   Now `parse` is a new function which parses a string using a provided format.
                                                  *
                                                  *   ```javascript
                                                  *   // Before v2.0.0
                                                  *   parse('2016-01-01')
                                                  *
                                                  *   // v2.0.0 onward
                                                  *   toDate('2016-01-01')
                                                  *   parse('2016-01-01', 'yyyy-MM-dd', new Date())
                                                  *   ```
                                                  *
                                                  * @param {String} dateString - the string to parse
                                                  * @param {String} formatString - the string of tokens
                                                  * @param {Date|Number} backupDate - defines values missing from the parsed dateString
                                                  * @param {Object} [options] - an object with options.
                                                  * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
                                                  * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
                                                  * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
                                                  * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
                                                  *   see: https://git.io/fxCyr
                                                  * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
                                                  *   see: https://git.io/fxCyr
                                                  * @returns {Date} the parsed date
                                                  * @throws {TypeError} 3 arguments required
                                                  * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
                                                  * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
                                                  * @throws {RangeError} `options.locale` must contain `match` property
                                                  * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr
                                                  * @throws {RangeError} use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr
                                                  * @throws {RangeError} use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr
                                                  * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr
                                                  * @throws {RangeError} format string contains an unescaped latin alphabet character
                                                  *
                                                  * @example
                                                  * // Parse 11 February 2014 from middle-endian format:
                                                  * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())
                                                  * //=> Tue Feb 11 2014 00:00:00
                                                  *
                                                  * @example
                                                  * // Parse 28th of February in Esperanto locale in the context of 2010 year:
                                                  * import eo from 'date-fns/locale/eo'
                                                  * var result = parse('28-a de februaro', "do 'de' MMMM", new Date(2010, 0, 1), {
                                                  *   locale: eo
                                                  * })
                                                  * //=> Sun Feb 28 2010 00:00:00
                                                  */function parse$1(dirtyDateString,dirtyFormatString,dirtyBackupDate,dirtyOptions){if(3>arguments.length){throw new TypeError("3 arguments required, but only "+arguments.length+" present")}var dateString=dirtyDateString+"",formatString=dirtyFormatString+"",options=dirtyOptions||{},locale$1=options.locale||locale;if(!locale$1.match){throw new RangeError("locale must contain match property")}var localeFirstWeekContainsDate=locale$1.options&&locale$1.options.firstWeekContainsDate,defaultFirstWeekContainsDate=null==localeFirstWeekContainsDate?1:toInteger(localeFirstWeekContainsDate),firstWeekContainsDate=null==options.firstWeekContainsDate?defaultFirstWeekContainsDate:toInteger(options.firstWeekContainsDate);// Test if weekStartsOn is between 1 and 7 _and_ is not NaN
if(!(1<=firstWeekContainsDate&&7>=firstWeekContainsDate)){throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively")}var localeWeekStartsOn=locale$1.options&&locale$1.options.weekStartsOn,defaultWeekStartsOn=null==localeWeekStartsOn?0:toInteger(localeWeekStartsOn),weekStartsOn=null==options.weekStartsOn?defaultWeekStartsOn:toInteger(options.weekStartsOn);// Test if weekStartsOn is between 0 and 6 _and_ is not NaN
if(!(0<=weekStartsOn&&6>=weekStartsOn)){throw new RangeError("weekStartsOn must be between 0 and 6 inclusively")}if(""===formatString){if(""===dateString){return toDate(dirtyBackupDate)}else{return new Date(NaN)}}var subFnOptions={firstWeekContainsDate:firstWeekContainsDate,weekStartsOn:weekStartsOn,locale:locale$1// If timezone isn't specified, it will be set to the system timezone
},setters=[{priority:TIMEZONE_UNIT_PRIORITY,set:dateToSystemTimezone,index:0}],i,tokens=formatString.match(longFormattingTokensRegExp$1).map(function(substring){var firstCharacter=substring[0];if("p"===firstCharacter||"P"===firstCharacter){var longFormatter=longFormatters[firstCharacter];return longFormatter(substring,locale$1.formatLong,subFnOptions)}return substring}).join("").match(formattingTokensRegExp$2),usedTokens=[];for(i=0;i<tokens.length;i++){var token=tokens[i];if(!options.useAdditionalWeekYearTokens&&isProtectedWeekYearToken(token)){throwProtectedError(token)}if(!options.useAdditionalDayOfYearTokens&&isProtectedDayOfYearToken(token)){throwProtectedError(token)}var firstCharacter=token[0],parser=parsers[firstCharacter];if(parser){var incompatibleTokens=parser.incompatibleTokens;if(Array.isArray(incompatibleTokens)){for(var incompatibleToken=void 0,_i=0,usedToken;_i<usedTokens.length;_i++){usedToken=usedTokens[_i].token;if(-1!==incompatibleTokens.indexOf(usedToken)||usedToken===firstCharacter){incompatibleToken=usedTokens[_i];break}}if(incompatibleToken){throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken,"` and `").concat(token,"` at the same time"))}}else if("*"===parser.incompatibleTokens&&usedTokens.length){throw new RangeError("The format string mustn't contain `".concat(token,"` and any other token at the same time"))}usedTokens.push({token:firstCharacter,fullToken:token});var parseResult=parser.parse(dateString,token,locale$1.match,subFnOptions);if(!parseResult){return new Date(NaN)}setters.push({priority:parser.priority,set:parser.set,validate:parser.validate,value:parseResult.value,index:setters.length});dateString=parseResult.rest}else{if(firstCharacter.match(unescapedLatinCharacterRegExp$2)){throw new RangeError("Format string contains an unescaped latin alphabet character `"+firstCharacter+"`")}// Replace two single quote characters with one single quote character
if("''"===token){token="'"}else if("'"===firstCharacter){token=cleanEscapedString$2(token)}// Cut token from string, or, if string doesn't match the token, return Invalid Date
if(0===dateString.indexOf(token)){dateString=dateString.slice(token.length)}else{return new Date(NaN)}}}// Check if the remaining input contains something other than whitespace
if(0<dateString.length&&notWhitespaceRegExp.test(dateString)){return new Date(NaN)}var uniquePrioritySetters=setters.map(function(setter){return setter.priority}).sort(function(a,b){return b-a}).filter(function(priority,index,array){return array.indexOf(priority)===index}).map(function(priority){return setters.filter(function(setter){return setter.priority===priority}).reverse()}).map(function(setterArray){return setterArray[0]}),date=toDate(dirtyBackupDate);if(isNaN(date)){return new Date(NaN)}// Convert the date in system timezone to the same date in UTC+00:00 timezone.
// This ensures that when UTC functions will be implemented, locales will be compatible with them.
// See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37
var utcDate=subMilliseconds(date,getTimezoneOffsetInMilliseconds(date)),flags={};for(i=0;i<uniquePrioritySetters.length;i++){var setter=uniquePrioritySetters[i];if(setter.validate&&!setter.validate(utcDate,setter.value,subFnOptions)){return new Date(NaN)}var result=setter.set(utcDate,flags,setter.value,subFnOptions);// Result is tuple (date, flags)
if(result[0]){utcDate=result[0];assign(flags,result[1]);// Result is date
}else{utcDate=result}}return utcDate}function dateToSystemTimezone(date,flags){if(flags.timestampIsSet){return date}var convertedDate=new Date(0);convertedDate.setFullYear(date.getUTCFullYear(),date.getUTCMonth(),date.getUTCDate());convertedDate.setHours(date.getUTCHours(),date.getUTCMinutes(),date.getUTCSeconds(),date.getUTCMilliseconds());return convertedDate}function cleanEscapedString$2(input){return input.match(escapedStringRegExp$2)[1].replace(doubleQuoteRegExp$2,"'")}var index$2T={default:parse$1};_exports.$index$168=index$2T;var MILLISECONDS_IN_HOUR$3=36e5,MILLISECONDS_IN_MINUTE$4=6e4,DEFAULT_ADDITIONAL_DIGITS=2,patterns={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},dateRegex=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,timeRegex=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,timezoneRegex=/^([+-])(\d{2})(?::?(\d{2}))?$/;/**
                                                      * @name parseISO
                                                      * @category Common Helpers
                                                      * @summary Parse ISO string
                                                      *
                                                      * @description
                                                      * Parse the given string in ISO 8601 format and return an instance of Date.
                                                      *
                                                      * Function accepts complete ISO 8601 formats as well as partial implementations.
                                                      * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601
                                                      *
                                                      * If the argument isn't a string, the function cannot parse the string or
                                                      * the values are invalid, it returns Invalid Date.
                                                      *
                                                      * ### v2.0.0 breaking changes:
                                                      *
                                                      * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
                                                      *
                                                      * - The previous `parse` implementation was renamed to `parseISO`.
                                                      *
                                                      *   ```javascript
                                                      *   // Before v2.0.0
                                                      *   parse('2016-01-01')
                                                      *
                                                      *   // v2.0.0 onward
                                                      *   parseISO('2016-01-01')
                                                      *   ```
                                                      *
                                                      * - `parseISO` now validates separate date and time values in ISO-8601 strings
                                                      *   and returns `Invalid Date` if the date is invalid.
                                                      *
                                                      *   ```javascript
                                                      *   parseISO('2018-13-32')
                                                      *   //=> Invalid Date
                                                      *   ```
                                                      *
                                                      * - `parseISO` now doesn't fall back to `new Date` constructor
                                                      *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.
                                                      *
                                                      * @param {String} argument - the value to convert
                                                      * @param {Object} [options] - an object with options.
                                                      * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format
                                                      * @returns {Date} the parsed date in the local time zone
                                                      * @throws {TypeError} 1 argument required
                                                      * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
                                                      *
                                                      * @example
                                                      * // Convert string '2014-02-11T11:30:30' to date:
                                                      * var result = parseISO('2014-02-11T11:30:30')
                                                      * //=> Tue Feb 11 2014 11:30:30
                                                      *
                                                      * @example
                                                      * // Convert string '+02014101' to date,
                                                      * // if the additional number of digits in the extended year format is 1:
                                                      * var result = parseISO('+02014101', { additionalDigits: 1 })
                                                      * //=> Fri Apr 11 2014 00:00:00
                                                      */function parseISO(argument,dirtyOptions){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var options=dirtyOptions||{},additionalDigits=null==options.additionalDigits?DEFAULT_ADDITIONAL_DIGITS:toInteger(options.additionalDigits);if(2!==additionalDigits&&1!==additionalDigits&&0!==additionalDigits){throw new RangeError("additionalDigits must be 0, 1 or 2")}if(!("string"===typeof argument||"[object String]"===Object.prototype.toString.call(argument))){return new Date(NaN)}var dateStrings=splitDateString(argument),date;if(dateStrings.date){var parseYearResult=parseYear(dateStrings.date,additionalDigits);date=parseDate(parseYearResult.restDateString,parseYearResult.year)}if(isNaN(date)||!date){return new Date(NaN)}var timestamp=date.getTime(),time=0,offset;if(dateStrings.time){time=parseTime(dateStrings.time);if(isNaN(time)||null===time){return new Date(NaN)}}if(dateStrings.timezone){offset=parseTimezone(dateStrings.timezone);if(isNaN(offset)){return new Date(NaN)}}else{var fullTime=timestamp+time,fullTimeDate=new Date(fullTime);offset=getTimezoneOffsetInMilliseconds(fullTimeDate);// Adjust time when it's coming from DST
var fullTimeDateNextDay=new Date(fullTime);fullTimeDateNextDay.setDate(fullTimeDate.getDate()+1);var offsetDiff=getTimezoneOffsetInMilliseconds(fullTimeDateNextDay)-offset;if(0<offsetDiff){offset+=offsetDiff}}return new Date(timestamp+time+offset)}function splitDateString(dateString){var dateStrings={},array=dateString.split(patterns.dateTimeDelimiter),timeString;if(/:/.test(array[0])){dateStrings.date=null;timeString=array[0]}else{dateStrings.date=array[0];timeString=array[1];if(patterns.timeZoneDelimiter.test(dateStrings.date)){dateStrings.date=dateString.split(patterns.timeZoneDelimiter)[0];timeString=dateString.substr(dateStrings.date.length,dateString.length)}}if(timeString){var token=patterns.timezone.exec(timeString);if(token){dateStrings.time=timeString.replace(token[1],"");dateStrings.timezone=token[1]}else{dateStrings.time=timeString}}return dateStrings}function parseYear(dateString,additionalDigits){var regex=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+additionalDigits)+"})|(\\d{2}|[+-]\\d{"+(2+additionalDigits)+"})$)"),captures=dateString.match(regex);// Invalid ISO-formatted year
if(!captures)return{year:null};var year=captures[1]&&parseInt(captures[1]),century=captures[2]&&parseInt(captures[2]);return{year:null==century?year:100*century,restDateString:dateString.slice((captures[1]||captures[2]).length)}}function parseDate(dateString,year){// Invalid ISO-formatted year
if(null===year)return null;var captures=dateString.match(dateRegex);// Invalid ISO-formatted string
if(!captures)return null;var isWeekDate=!!captures[4],dayOfYear=parseDateUnit(captures[1]),month=parseDateUnit(captures[2])-1,day=parseDateUnit(captures[3]),week=parseDateUnit(captures[4]),dayOfWeek=parseDateUnit(captures[5])-1;if(isWeekDate){if(!validateWeekDate(year,week,dayOfWeek)){return new Date(NaN)}return dayOfISOWeekYear(year,week,dayOfWeek)}else{var date=new Date(0);if(!validateDate(year,month,day)||!validateDayOfYearDate(year,dayOfYear)){return new Date(NaN)}date.setUTCFullYear(year,month,Math.max(dayOfYear,day));return date}}function parseDateUnit(value){return value?parseInt(value):1}function parseTime(timeString){var captures=timeString.match(timeRegex);if(!captures)return null;// Invalid ISO-formatted time
var hours=parseTimeUnit(captures[1]),minutes=parseTimeUnit(captures[2]),seconds=parseTimeUnit(captures[3]);if(!validateTime(hours,minutes,seconds)){return NaN}return hours*MILLISECONDS_IN_HOUR$3+minutes*MILLISECONDS_IN_MINUTE$4+1e3*seconds}function parseTimeUnit(value){return value&&parseFloat(value.replace(",","."))||0}function parseTimezone(timezoneString){if("Z"===timezoneString)return 0;var captures=timezoneString.match(timezoneRegex);if(!captures)return 0;var sign="+"===captures[1]?-1:1,hours=parseInt(captures[2]),minutes=captures[3]&&parseInt(captures[3])||0;if(!validateTimezone(hours,minutes)){return NaN}return sign*(hours*MILLISECONDS_IN_HOUR$3+minutes*MILLISECONDS_IN_MINUTE$4)}function dayOfISOWeekYear(isoWeekYear,week,day){var date=new Date(0);date.setUTCFullYear(isoWeekYear,0,4);var fourthOfJanuaryDay=date.getUTCDay()||7,diff=7*(week-1)+day+1-fourthOfJanuaryDay;date.setUTCDate(date.getUTCDate()+diff);return date}// Validation functions
// February is null to handle the leap year (using ||)
var daysInMonths=[31,null,31,30,31,30,31,31,30,31,30,31];function isLeapYearIndex$1(year){return 0===year%400||0===year%4&&year%100}function validateDate(year,month,date){return 0<=month&&11>=month&&1<=date&&date<=(daysInMonths[month]||(isLeapYearIndex$1(year)?29:28))}function validateDayOfYearDate(year,dayOfYear){return 1<=dayOfYear&&dayOfYear<=(isLeapYearIndex$1(year)?366:365)}function validateWeekDate(_year,week,day){return 1<=week&&53>=week&&0<=day&&6>=day}function validateTime(hours,minutes,seconds){if(24===hours){return 0===minutes&&0===seconds}return 0<=seconds&&60>seconds&&0<=minutes&&60>minutes&&0<=hours&&25>hours}function validateTimezone(_hours,minutes){return 0<=minutes&&59>=minutes}var index$2U={default:parseISO};_exports.$index$169=index$2U;function roundToNearestMinutes(dirtyDate,options){if(1>arguments.length){throw new TypeError("1 argument required, but only none provided present")}var nearestTo=options&&"nearestTo"in options?toInteger(options.nearestTo):1;if(1>nearestTo||30<nearestTo){throw new RangeError("`options.nearestTo` must be between 1 and 30")}var date=toDate(dirtyDate),seconds=date.getSeconds(),minutes=date.getMinutes()+seconds/60,roundedMinutes=Math.floor(minutes/nearestTo)*nearestTo,remainderMinutes=minutes%nearestTo,addedMinutes=Math.round(remainderMinutes/nearestTo)*nearestTo;return new Date(date.getFullYear(),date.getMonth(),date.getDate(),date.getHours(),roundedMinutes+addedMinutes)}var index$2V={default:roundToNearestMinutes};_exports.$index$170=index$2V;function setDate(dirtyDate,dirtyDayOfMonth){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),dayOfMonth=toInteger(dirtyDayOfMonth);date.setDate(dayOfMonth);return date}var index$2W={default:setDate};_exports.$index$171=index$2W;function setDay(dirtyDate,dirtyDay,dirtyOptions){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var options=dirtyOptions||{},locale=options.locale,localeWeekStartsOn=locale&&locale.options&&locale.options.weekStartsOn,defaultWeekStartsOn=null==localeWeekStartsOn?0:toInteger(localeWeekStartsOn),weekStartsOn=null==options.weekStartsOn?defaultWeekStartsOn:toInteger(options.weekStartsOn);// Test if weekStartsOn is between 0 and 6 _and_ is not NaN
if(!(0<=weekStartsOn&&6>=weekStartsOn)){throw new RangeError("weekStartsOn must be between 0 and 6 inclusively")}var date=toDate(dirtyDate,options),day=toInteger(dirtyDay),currentDay=date.getDay(),remainder=day%7,dayIndex=(remainder+7)%7,diff=(dayIndex<weekStartsOn?7:0)+day-currentDay;return addDays(date,diff,options)}var index$2X={default:setDay};_exports.$index$172=index$2X;function setDayOfYear(dirtyDate,dirtyDayOfYear){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),dayOfYear=toInteger(dirtyDayOfYear);date.setMonth(0);date.setDate(dayOfYear);return date}var index$2Y={default:setDayOfYear};_exports.$index$173=index$2Y;function setHours(dirtyDate,dirtyHours){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),hours=toInteger(dirtyHours);date.setHours(hours);return date}var index$2Z={default:setHours};_exports.$index$174=index$2Z;function setISODay(dirtyDate,dirtyDay){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),day=toInteger(dirtyDay),currentDay=getISODay(date),diff=day-currentDay;return addDays(date,diff)}var index$2_={default:setISODay};_exports.$index$175=index$2_;function setISOWeek(dirtyDate,dirtyISOWeek){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),isoWeek=toInteger(dirtyISOWeek),diff=getISOWeek(date)-isoWeek;date.setDate(date.getDate()-7*diff);return date}var index$2$={default:setISOWeek};_exports.$index$176=index$2$;function setMilliseconds(dirtyDate,dirtyMilliseconds){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),milliseconds=toInteger(dirtyMilliseconds);date.setMilliseconds(milliseconds);return date}var index$30={default:setMilliseconds};_exports.$index$178=index$30;function setMinutes(dirtyDate,dirtyMinutes){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),minutes=toInteger(dirtyMinutes);date.setMinutes(minutes);return date}var index$31={default:setMinutes};_exports.$index$179=index$31;function setMonth(dirtyDate,dirtyMonth){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),month=toInteger(dirtyMonth),year=date.getFullYear(),day=date.getDate(),dateWithDesiredMonth=new Date(0);dateWithDesiredMonth.setFullYear(year,month,15);dateWithDesiredMonth.setHours(0,0,0,0);var daysInMonth=getDaysInMonth(dateWithDesiredMonth);// Set the last day of the new month
// if the original date was the last day of the longer month
date.setMonth(month,Math.min(day,daysInMonth));return date}var index$32={default:setMonth};_exports.$index$180=index$32;function setQuarter(dirtyDate,dirtyQuarter){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),quarter=toInteger(dirtyQuarter),oldQuarter=Math.floor(date.getMonth()/3)+1,diff=quarter-oldQuarter;return setMonth(date,date.getMonth()+3*diff)}var index$33={default:setQuarter};_exports.$index$181=index$33;function setSeconds(dirtyDate,dirtySeconds){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),seconds=toInteger(dirtySeconds);date.setSeconds(seconds);return date}var index$34={default:setSeconds};_exports.$index$182=index$34;function setWeek(dirtyDate,dirtyWeek,dirtyOptions){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),week=toInteger(dirtyWeek),diff=getWeek(date,dirtyOptions)-week;date.setDate(date.getDate()-7*diff);return date}var index$35={default:setWeek};_exports.$index$183=index$35;function setWeekYear(dirtyDate,dirtyWeekYear,dirtyOptions){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var options=dirtyOptions||{},locale=options.locale,localeFirstWeekContainsDate=locale&&locale.options&&locale.options.firstWeekContainsDate,defaultFirstWeekContainsDate=null==localeFirstWeekContainsDate?1:toInteger(localeFirstWeekContainsDate),firstWeekContainsDate=null==options.firstWeekContainsDate?defaultFirstWeekContainsDate:toInteger(options.firstWeekContainsDate),date=toDate(dirtyDate),weekYear=toInteger(dirtyWeekYear),diff=differenceInCalendarDays(date,startOfWeekYear(date,dirtyOptions)),firstWeek=new Date(0);firstWeek.setFullYear(weekYear,0,firstWeekContainsDate);firstWeek.setHours(0,0,0,0);date=startOfWeekYear(firstWeek,dirtyOptions);date.setDate(date.getDate()+diff);return date}var index$36={default:setWeekYear};_exports.$index$184=index$36;function setYear(dirtyDate,dirtyYear){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),year=toInteger(dirtyYear);// Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date
if(isNaN(date)){return new Date(NaN)}date.setFullYear(year);return date}var index$37={default:setYear};_exports.$index$185=index$37;function startOfDecade(dirtyDate){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),year=date.getFullYear(),decade=10*Math.floor(year/10);date.setFullYear(decade,0,1);date.setHours(0,0,0,0);return date}var index$38={default:startOfDecade};_exports.$index$187=index$38;function startOfToday(){return startOfDay(Date.now())}var index$39={default:startOfToday};/**
    * @name startOfTomorrow
    * @category Day Helpers
    * @summary Return the start of tomorrow.
    * @pure false
    *
    * @description
    * Return the start of tomorrow.
    *
    * > ⚠️ Please note that this function is not present in the FP submodule as
    * > it uses `Date.now()` internally hence impure and can't be safely curried.
    *
    * ### v2.0.0 breaking changes:
    *
    * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
    *
    * @returns {Date} the start of tomorrow
    *
    * @example
    * // If today is 6 October 2014:
    * var result = startOfTomorrow()
    * //=> Tue Oct 7 2014 00:00:00
    */_exports.$index$195=index$39;function startOfTomorrow(){var now=new Date,year=now.getFullYear(),month=now.getMonth(),day=now.getDate(),date=new Date(0);date.setFullYear(year,month,day+1);date.setHours(0,0,0,0);return date}var index$3a={default:startOfTomorrow};/**
    * @name startOfYesterday
    * @category Day Helpers
    * @summary Return the start of yesterday.
    * @pure false
    *
    * @description
    * Return the start of yesterday.
    *
    * > ⚠️ Please note that this function is not present in the FP submodule as
    * > it uses `Date.now()` internally hence impure and can't be safely curried.
    *
    * ### v2.0.0 breaking changes:
    *
    * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
    *
    * @returns {Date} the start of yesterday
    *
    * @example
    * // If today is 6 October 2014:
    * var result = startOfYesterday()
    * //=> Sun Oct 5 2014 00:00:00
    */_exports.$index$196=index$3a;function startOfYesterday(){var now=new Date,year=now.getFullYear(),month=now.getMonth(),day=now.getDate(),date=new Date(0);date.setFullYear(year,month,day-1);date.setHours(0,0,0,0);return date}var index$3b={default:startOfYesterday};_exports.$index$200=index$3b;function subHours(dirtyDate,dirtyAmount){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var amount=toInteger(dirtyAmount);return addHours(dirtyDate,-amount)}var index$3c={default:subHours};_exports.$index$202=index$3c;function subMinutes(dirtyDate,dirtyAmount){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var amount=toInteger(dirtyAmount);return addMinutes(dirtyDate,-amount)}var index$3d={default:subMinutes};_exports.$index$205=index$3d;function subMonths(dirtyDate,dirtyAmount){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var amount=toInteger(dirtyAmount);return addMonths(dirtyDate,-amount)}var index$3e={default:subMonths};_exports.$index$206=index$3e;function subQuarters(dirtyDate,dirtyAmount){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var amount=toInteger(dirtyAmount);return addQuarters(dirtyDate,-amount)}var index$3f={default:subQuarters};_exports.$index$207=index$3f;function subSeconds(dirtyDate,dirtyAmount){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var amount=toInteger(dirtyAmount);return addSeconds(dirtyDate,-amount)}var index$3g={default:subSeconds};_exports.$index$208=index$3g;function subWeeks(dirtyDate,dirtyAmount){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var amount=toInteger(dirtyAmount);return addWeeks(dirtyDate,-amount)}var index$3h={default:subWeeks};_exports.$index$209=index$3h;function subYears(dirtyDate,dirtyAmount){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var amount=toInteger(dirtyAmount);return addYears(dirtyDate,-amount)}var index$3i={default:subYears};// This file is generated automatically by `scripts/build/indices.js`. Please, don't change it.
_exports.$index$210=index$3i;var index$3j={addBusinessDays:addBusinessDays,addDays:addDays,addHours:addHours,addISOWeekYears:addISOWeekYears,addMilliseconds:addMilliseconds,addMinutes:addMinutes,addMonths:addMonths,addQuarters:addQuarters,addSeconds:addSeconds,addWeeks:addWeeks,addYears:addYears,areIntervalsOverlapping:areIntervalsOverlapping,closestIndexTo:closestIndexTo,closestTo:closestTo,compareAsc:compareAsc,compareDesc:compareDesc,differenceInBusinessDays:differenceInBusinessDays,differenceInCalendarDays:differenceInCalendarDays,differenceInCalendarISOWeekYears:differenceInCalendarISOWeekYears,differenceInCalendarISOWeeks:differenceInCalendarISOWeeks,differenceInCalendarMonths:differenceInCalendarMonths,differenceInCalendarQuarters:differenceInCalendarQuarters,differenceInCalendarWeeks:differenceInCalendarWeeks,differenceInCalendarYears:differenceInCalendarYears,differenceInDays:differenceInDays,differenceInHours:differenceInHours,differenceInISOWeekYears:differenceInISOWeekYears,differenceInMilliseconds:differenceInMilliseconds,differenceInMinutes:differenceInMinutes,differenceInMonths:differenceInMonths,differenceInQuarters:differenceInQuarters,differenceInSeconds:differenceInSeconds,differenceInWeeks:differenceInWeeks,differenceInYears:differenceInYears,eachDayOfInterval:eachDayOfInterval,eachWeekOfInterval:eachWeekOfInterval,eachWeekendOfInterval:eachWeekendOfInterval,eachWeekendOfMonth:eachWeekendOfMonth,eachWeekendOfYear:eachWeekendOfYear,endOfDay:endOfDay,endOfDecade:endOfDecade,endOfHour:endOfHour,endOfISOWeek:endOfISOWeek,endOfISOWeekYear:endOfISOWeekYear,endOfMinute:endOfMinute,endOfMonth:endOfMonth,endOfQuarter:endOfQuarter,endOfSecond:endOfSecond,endOfToday:endOfToday,endOfTomorrow:endOfTomorrow,endOfWeek:endOfWeek,endOfYear:endOfYear,endOfYesterday:endOfYesterday,format:format,formatDistance:formatDistance$1,formatDistanceStrict:formatDistanceStrict,formatDistanceToNow:formatDistanceToNow,formatRelative:formatRelative$1,fromUnixTime:fromUnixTime,getDate:getDate,getDay:getDay,getDayOfYear:getDayOfYear,getDaysInMonth:getDaysInMonth,getDaysInYear:getDaysInYear,getDecade:getDecade,getHours:getHours,getISODay:getISODay,getISOWeek:getISOWeek,getISOWeekYear:getISOWeekYear,getISOWeeksInYear:getISOWeeksInYear,getMilliseconds:getMilliseconds,getMinutes:getMinutes,getMonth:getMonth,getOverlappingDaysInIntervals:getOverlappingDaysInIntervals,getQuarter:getQuarter,getSeconds:getSeconds,getTime:getTime,getUnixTime:getUnixTime,getWeek:getWeek,getWeekOfMonth:getWeekOfMonth,getWeekYear:getWeekYear,getWeeksInMonth:getWeeksInMonth,getYear:getYear,isAfter:isAfter,isBefore:isBefore,isDate:isDate,isEqual:isEqual,isFirstDayOfMonth:isFirstDayOfMonth,isFriday:isFriday,isFuture:isFuture,isLastDayOfMonth:isLastDayOfMonth,isLeapYear:isLeapYear,isMonday:isMonday,isPast:isPast,isSameDay:isSameDay,isSameHour:isSameHour,isSameISOWeek:isSameISOWeek,isSameISOWeekYear:isSameISOWeekYear,isSameMinute:isSameMinute,isSameMonth:isSameMonth,isSameQuarter:isSameQuarter,isSameSecond:isSameSecond,isSameWeek:isSameWeek,isSameYear:isSameYear,isSaturday:isSaturday,isSunday:isSunday,isThisHour:isThisHour,isThisISOWeek:isThisISOWeek,isThisMinute:isThisMinute,isThisMonth:isThisMonth,isThisQuarter:isThisQuarter,isThisSecond:isThisSecond,isThisWeek:isThisWeek,isThisYear:isThisYear,isThursday:isThursday,isToday:isToday,isTomorrow:isTomorrow,isTuesday:isTuesday,isValid:isValid$1,isWednesday:isWednesday,isWeekend:isWeekend,isWithinInterval:isWithinInterval,isYesterday:isYesterday,lastDayOfDecade:lastDayOfDecade,lastDayOfISOWeek:lastDayOfISOWeek,lastDayOfISOWeekYear:lastDayOfISOWeekYear,lastDayOfMonth:lastDayOfMonth,lastDayOfQuarter:lastDayOfQuarter,lastDayOfWeek:lastDayOfWeek,lastDayOfYear:lastDayOfYear,lightFormat:lightFormat,max:max,min:min,parse:parse$1,parseISO:parseISO,roundToNearestMinutes:roundToNearestMinutes,setDate:setDate,setDay:setDay,setDayOfYear:setDayOfYear,setHours:setHours,setISODay:setISODay,setISOWeek:setISOWeek,setISOWeekYear:setISOWeekYear,setMilliseconds:setMilliseconds,setMinutes:setMinutes,setMonth:setMonth,setQuarter:setQuarter,setSeconds:setSeconds,setWeek:setWeek,setWeekYear:setWeekYear,setYear:setYear,startOfDay:startOfDay,startOfDecade:startOfDecade,startOfHour:startOfHour,startOfISOWeek:startOfISOWeek,startOfISOWeekYear:startOfISOWeekYear,startOfMinute:startOfMinute,startOfMonth:startOfMonth,startOfQuarter:startOfQuarter,startOfSecond:startOfSecond,startOfToday:startOfToday,startOfTomorrow:startOfTomorrow,startOfWeek:startOfWeek,startOfWeekYear:startOfWeekYear,startOfYear:startOfYear,startOfYesterday:startOfYesterday,subDays:subDays,subHours:subHours,subISOWeekYears:subISOWeekYears,subMilliseconds:subMilliseconds,subMinutes:subMinutes,subMonths:subMonths,subQuarters:subQuarters,subSeconds:subSeconds,subWeeks:subWeeks,subYears:subYears,toDate:toDate,maxTime:maxTime,minTime:minTime};/**
   @license
   Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at
   http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
   http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
   found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
   part of the polymer project is also subject to an additional IP rights grant
   found at http://polymer.github.io/PATENTS.txt
   */_exports.$index$106=index$3j;const supportsAdoptingStyleSheets="adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype;_exports.supportsAdoptingStyleSheets$1=_exports.supportsAdoptingStyleSheets=supportsAdoptingStyleSheets;const constructionToken=Symbol();class CSSResult{constructor(cssText,safeToken){if(safeToken!==constructionToken){throw new Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.")}this.cssText=cssText}// Note, this is a getter so that it's lazy. In practice, this means
// stylesheets are not created until the first element instance is made.
get styleSheet(){if(this._styleSheet===void 0){// Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet
// is constructable.
if(supportsAdoptingStyleSheets){this._styleSheet=new CSSStyleSheet;this._styleSheet.replaceSync(this.cssText)}else{this._styleSheet=null}}return this._styleSheet}toString(){return this.cssText}}/**
   * Wrap a value for interpolation in a css tagged template literal.
   *
   * This is unsafe because untrusted CSS text can be used to phone home
   * or exfiltrate data to an attacker controlled site. Take care to only use
   * this with trusted input.
   */_exports.CSSResult$1=_exports.CSSResult=CSSResult;const unsafeCSS=value=>{return new CSSResult(value+"",constructionToken)};_exports.unsafeCSS$1=_exports.unsafeCSS=unsafeCSS;const textFromCSSResult=value=>{if(value instanceof CSSResult){return value.cssText}else if("number"===typeof value){return value}else{throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but
            take care to ensure page security.`)}},css=(strings,...values)=>{const cssText=values.reduce((acc,v,idx)=>acc+textFromCSSResult(v)+strings[idx+1],strings[0]);return new CSSResult(cssText,constructionToken)};/**
    * Template tag which which can be used with LitElement's `style` property to
    * set element styles. For security reasons, only literal string values may be
    * used. To incorporate non-literal values `unsafeCSS` may be used inside a
    * template string part.
    */_exports.css$1=_exports.css=css;var cssTag={supportsAdoptingStyleSheets:supportsAdoptingStyleSheets,CSSResult:CSSResult,unsafeCSS:unsafeCSS,css:css};/**
    * @license
    * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    * This code may only be used under the BSD style license found at
    * http://polymer.github.io/LICENSE.txt
    * The complete set of authors may be found at
    * http://polymer.github.io/AUTHORS.txt
    * The complete set of contributors may be found at
    * http://polymer.github.io/CONTRIBUTORS.txt
    * Code distributed by Google as part of the polymer project is also
    * subject to an additional IP rights grant found at
    * http://polymer.github.io/PATENTS.txt
    */_exports.$cssTag=cssTag;const legacyCustomElement=(tagName,clazz)=>{window.customElements.define(tagName,clazz);// Cast as any because TS doesn't recognize the return type as being a
// subtype of the decorated class when clazz is typed as
// `Constructor<HTMLElement>` for some reason.
// `Constructor<HTMLElement>` is helpful to make sure the decorator is
// applied to elements however.
// tslint:disable-next-line:no-any
return clazz},standardCustomElement=(tagName,descriptor)=>{const{kind,elements}=descriptor;return{kind,elements,// This callback is called once the class is otherwise fully defined
finisher(clazz){window.customElements.define(tagName,clazz)}}},customElement=tagName=>classOrDescriptor=>"function"===typeof classOrDescriptor?legacyCustomElement(tagName,classOrDescriptor):standardCustomElement(tagName,classOrDescriptor);_exports.customElement$1=_exports.customElement=customElement;const standardProperty=(options,element)=>{// When decorating an accessor, pass it through and add property metadata.
// Note, the `hasOwnProperty` check in `createProperty` ensures we don't
// stomp over the user's accessor.
if("method"===element.kind&&element.descriptor&&!("value"in element.descriptor)){return Object.assign({},element,{finisher(clazz){clazz.createProperty(element.key,options)}})}else{// createProperty() takes care of defining the property, but we still
// must return some kind of descriptor, so return a descriptor for an
// unused prototype field. The finisher calls createProperty().
return{kind:"field",key:Symbol(),placement:"own",descriptor:{},// When @babel/plugin-proposal-decorators implements initializers,
// do this instead of the initializer below. See:
// https://github.com/babel/babel/issues/9260 extras: [
//   {
//     kind: 'initializer',
//     placement: 'own',
//     initializer: descriptor.initializer,
//   }
// ],
initializer(){if("function"===typeof element.initializer){this[element.key]=element.initializer.call(this)}},finisher(clazz){clazz.createProperty(element.key,options)}}}},legacyProperty=(options,proto,name)=>{proto.constructor.createProperty(name,options)};/**
    * A property decorator which creates a LitElement property which reflects a
    * corresponding attribute value. A `PropertyDeclaration` may optionally be
    * supplied to configure property features.
    *
    * @ExportDecoratedItems
    */function property(options){// tslint:disable-next-line:no-any decorator
return(protoOrDescriptor,name)=>name!==void 0?legacyProperty(options,protoOrDescriptor,name):standardProperty(options,protoOrDescriptor)}/**
   * A property decorator that converts a class property into a getter that
   * executes a querySelector on the element's renderRoot.
   *
   * @ExportDecoratedItems
   */function query(selector){return(protoOrDescriptor,// tslint:disable-next-line:no-any decorator
name)=>{const descriptor={get(){return this.renderRoot.querySelector(selector)},enumerable:!0,configurable:!0};return name!==void 0?legacyQuery(descriptor,protoOrDescriptor,name):standardQuery(descriptor,protoOrDescriptor)}}/**
   * A property decorator that converts a class property into a getter
   * that executes a querySelectorAll on the element's renderRoot.
   *
   * @ExportDecoratedItems
   */function queryAll(selector){return(protoOrDescriptor,// tslint:disable-next-line:no-any decorator
name)=>{const descriptor={get(){return this.renderRoot.querySelectorAll(selector)},enumerable:!0,configurable:!0};return name!==void 0?legacyQuery(descriptor,protoOrDescriptor,name):standardQuery(descriptor,protoOrDescriptor)}}const legacyQuery=(descriptor,proto,name)=>{Object.defineProperty(proto,name,descriptor)},standardQuery=(descriptor,element)=>({kind:"method",placement:"prototype",key:element.key,descriptor}),standardEventOptions=(options,element)=>{return Object.assign({},element,{finisher(clazz){Object.assign(clazz.prototype[element.key],options)}})},legacyEventOptions=// tslint:disable-next-line:no-any legacy decorator
(options,proto,name)=>{Object.assign(proto[name],options)},eventOptions=options=>// Return value typed as any to prevent TypeScript from complaining that
// standard decorator function signature does not match TypeScript decorator
// signature
// TODO(kschaaf): unclear why it was only failing on this decorator and not
// the others
(protoOrDescriptor,name)=>name!==void 0?legacyEventOptions(options,protoOrDescriptor,name):standardEventOptions(options,protoOrDescriptor);_exports.eventOptions$1=_exports.eventOptions=eventOptions;var decorators={customElement:customElement,property:property,query:query,queryAll:queryAll,eventOptions:eventOptions};/**
    * @license
    * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    * This code may only be used under the BSD style license found at
    * http://polymer.github.io/LICENSE.txt
    * The complete set of authors may be found at
    * http://polymer.github.io/AUTHORS.txt
    * The complete set of contributors may be found at
    * http://polymer.github.io/CONTRIBUTORS.txt
    * Code distributed by Google as part of the polymer project is also
    * subject to an additional IP rights grant found at
    * http://polymer.github.io/PATENTS.txt
    */_exports.$decorators=decorators;var _a;/**
         * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
         * replaced at compile time by the munged name for object[property]. We cannot
         * alias this function, so we have to use a small shim that has the same
         * behavior when not compiling.
         */window.JSCompiler_renameProperty=(prop,_obj)=>prop;const defaultConverter={toAttribute(value,type){switch(type){case Boolean:return value?"":null;case Object:case Array:// if the value is `null` or `undefined` pass this through
// to allow removing/no change behavior.
return null==value?value:JSON.stringify(value);}return value},fromAttribute(value,type){switch(type){case Boolean:return null!==value;case Number:return null===value?null:+value;case Object:case Array:return JSON.parse(value);}return value}};/**
    * Change function that returns true if `value` is different from `oldValue`.
    * This method is used as the default for a property's `hasChanged` function.
    */_exports.defaultConverter$1=_exports.defaultConverter=defaultConverter;const notEqual=(value,old)=>{// This ensures (old==NaN, value==NaN) always returns false
return old!==value&&(old===old||value===value)};_exports.notEqual$1=_exports.notEqual=notEqual;const defaultPropertyDeclaration={attribute:!0,type:String,converter:defaultConverter,reflect:!1,hasChanged:notEqual},microtaskPromise=Promise.resolve(!0),STATE_HAS_UPDATED=1,STATE_UPDATE_REQUESTED=1<<2,STATE_IS_REFLECTING_TO_ATTRIBUTE=1<<3,STATE_IS_REFLECTING_TO_PROPERTY=1<<4,STATE_HAS_CONNECTED=1<<5,finalized="finalized";/**
                                * Base element class which manages element properties and attributes. When
                                * properties change, the `update` method is asynchronously called. This method
                                * should be supplied by subclassers to render updates as desired.
                                */class UpdatingElement extends HTMLElement{constructor(){super();this._updateState=0;this._instanceProperties=void 0;this._updatePromise=microtaskPromise;this._hasConnectedResolver=void 0;/**
                                             * Map with keys for any properties that have changed since the last
                                             * update cycle with previous values.
                                             */this._changedProperties=new Map;/**
                                          * Map with keys of properties that should be reflected when updated.
                                          */this._reflectingProperties=void 0;this.initialize()}/**
     * Returns a list of attributes corresponding to the registered properties.
     * @nocollapse
     */static get observedAttributes(){// note: piggy backing on this to ensure we're finalized.
this.finalize();const attributes=[];// Use forEach so this works even if for/of loops are compiled to for loops
// expecting arrays
this._classProperties.forEach((v,p)=>{const attr=this._attributeNameForProperty(p,v);if(attr!==void 0){this._attributeToPropertyMap.set(attr,p);attributes.push(attr)}});return attributes}/**
     * Ensures the private `_classProperties` property metadata is created.
     * In addition to `finalize` this is also called in `createProperty` to
     * ensure the `@property` decorator can add property metadata.
     */ /** @nocollapse */static _ensureClassProperties(){// ensure private storage for property declarations.
if(!this.hasOwnProperty(JSCompiler_renameProperty("_classProperties",this))){this._classProperties=new Map;// NOTE: Workaround IE11 not supporting Map constructor argument.
const superProperties=Object.getPrototypeOf(this)._classProperties;if(superProperties!==void 0){superProperties.forEach((v,k)=>this._classProperties.set(k,v))}}}/**
     * Creates a property accessor on the element prototype if one does not exist.
     * The property setter calls the property's `hasChanged` property option
     * or uses a strict identity check to determine whether or not to request
     * an update.
     * @nocollapse
     */static createProperty(name,options=defaultPropertyDeclaration){// Note, since this can be called by the `@property` decorator which
// is called before `finalize`, we ensure storage exists for property
// metadata.
this._ensureClassProperties();this._classProperties.set(name,options);// Do not generate an accessor if the prototype already has one, since
// it would be lost otherwise and that would never be the user's intention;
// Instead, we expect users to call `requestUpdate` themselves from
// user-defined accessors. Note that if the super has an accessor we will
// still overwrite it
if(options.noAccessor||this.prototype.hasOwnProperty(name)){return}const key="symbol"===typeof name?Symbol():`__${name}`;Object.defineProperty(this.prototype,name,{// tslint:disable-next-line:no-any no symbol in index
get(){return this[key]},set(value){const oldValue=this[name];this[key]=value;this._requestUpdate(name,oldValue)},configurable:!0,enumerable:!0})}/**
     * Creates property accessors for registered properties and ensures
     * any superclasses are also finalized.
     * @nocollapse
     */static finalize(){// finalize any superclasses
const superCtor=Object.getPrototypeOf(this);if(!superCtor.hasOwnProperty(finalized)){superCtor.finalize()}this[finalized]=!0;this._ensureClassProperties();// initialize Map populated in observedAttributes
this._attributeToPropertyMap=new Map;// make any properties
// Note, only process "own" properties since this element will inherit
// any properties defined on the superClass, and finalization ensures
// the entire prototype chain is finalized.
if(this.hasOwnProperty(JSCompiler_renameProperty("properties",this))){const props=this.properties,propKeys=[...Object.getOwnPropertyNames(props),...("function"===typeof Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(props):[])];// support symbols in properties (IE11 does not support this)
// This for/of is ok because propKeys is an array
for(const p of propKeys){// note, use of `any` is due to TypeSript lack of support for symbol in
// index types
// tslint:disable-next-line:no-any no symbol in index
this.createProperty(p,props[p])}}}/**
     * Returns the property name for the given attribute `name`.
     * @nocollapse
     */static _attributeNameForProperty(name,options){const attribute=options.attribute;return!1===attribute?void 0:"string"===typeof attribute?attribute:"string"===typeof name?name.toLowerCase():void 0}/**
     * Returns true if a property should request an update.
     * Called when a property value is set and uses the `hasChanged`
     * option for the property if present or a strict identity check.
     * @nocollapse
     */static _valueHasChanged(value,old,hasChanged=notEqual){return hasChanged(value,old)}/**
     * Returns the property value for the given attribute value.
     * Called via the `attributeChangedCallback` and uses the property's
     * `converter` or `converter.fromAttribute` property option.
     * @nocollapse
     */static _propertyValueFromAttribute(value,options){const type=options.type,converter=options.converter||defaultConverter,fromAttribute="function"===typeof converter?converter:converter.fromAttribute;return fromAttribute?fromAttribute(value,type):value}/**
     * Returns the attribute value for the given property value. If this
     * returns undefined, the property will *not* be reflected to an attribute.
     * If this returns null, the attribute will be removed, otherwise the
     * attribute will be set to the value.
     * This uses the property's `reflect` and `type.toAttribute` property options.
     * @nocollapse
     */static _propertyValueToAttribute(value,options){if(options.reflect===void 0){return}const type=options.type,converter=options.converter,toAttribute=converter&&converter.toAttribute||defaultConverter.toAttribute;return toAttribute(value,type)}/**
     * Performs element initialization. By default captures any pre-set values for
     * registered properties.
     */initialize(){this._saveInstanceProperties();// ensures first update will be caught by an early access of
// `updateComplete`
this._requestUpdate()}/**
     * Fixes any properties set on the instance before upgrade time.
     * Otherwise these would shadow the accessor and break these properties.
     * The properties are stored in a Map which is played back after the
     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
     * (<=41), properties created for native platform properties like (`id` or
     * `name`) may not have default values set in the element constructor. On
     * these browsers native properties appear on instances and therefore their
     * default value will overwrite any element default (e.g. if the element sets
     * this.id = 'id' in the constructor, the 'id' will become '' since this is
     * the native platform default).
     */_saveInstanceProperties(){// Use forEach so this works even if for/of loops are compiled to for loops
// expecting arrays
this.constructor._classProperties.forEach((_v,p)=>{if(this.hasOwnProperty(p)){const value=this[p];delete this[p];if(!this._instanceProperties){this._instanceProperties=new Map}this._instanceProperties.set(p,value)}})}/**
     * Applies previously saved instance properties.
     */_applyInstanceProperties(){// Use forEach so this works even if for/of loops are compiled to for loops
// expecting arrays
// tslint:disable-next-line:no-any
this._instanceProperties.forEach((v,p)=>this[p]=v);this._instanceProperties=void 0}connectedCallback(){this._updateState=this._updateState|STATE_HAS_CONNECTED;// Ensure first connection completes an update. Updates cannot complete
// before connection and if one is pending connection the
// `_hasConnectionResolver` will exist. If so, resolve it to complete the
// update, otherwise requestUpdate.
if(this._hasConnectedResolver){this._hasConnectedResolver();this._hasConnectedResolver=void 0}}/**
     * Allows for `super.disconnectedCallback()` in extensions while
     * reserving the possibility of making non-breaking feature additions
     * when disconnecting at some point in the future.
     */disconnectedCallback(){}/**
                             * Synchronizes property values when attributes change.
                             */attributeChangedCallback(name,old,value){if(old!==value){this._attributeToProperty(name,value)}}_propertyToAttribute(name,value,options=defaultPropertyDeclaration){const ctor=this.constructor,attr=ctor._attributeNameForProperty(name,options);if(attr!==void 0){const attrValue=ctor._propertyValueToAttribute(value,options);// an undefined value does not change the attribute.
if(attrValue===void 0){return}// Track if the property is being reflected to avoid
// setting the property again via `attributeChangedCallback`. Note:
// 1. this takes advantage of the fact that the callback is synchronous.
// 2. will behave incorrectly if multiple attributes are in the reaction
// stack at time of calling. However, since we process attributes
// in `update` this should not be possible (or an extreme corner case
// that we'd like to discover).
// mark state reflecting
this._updateState=this._updateState|STATE_IS_REFLECTING_TO_ATTRIBUTE;if(null==attrValue){this.removeAttribute(attr)}else{this.setAttribute(attr,attrValue)}// mark state not reflecting
this._updateState=this._updateState&~STATE_IS_REFLECTING_TO_ATTRIBUTE}}_attributeToProperty(name,value){// Use tracking info to avoid deserializing attribute value if it was
// just set from a property setter.
if(this._updateState&STATE_IS_REFLECTING_TO_ATTRIBUTE){return}const ctor=this.constructor,propName=ctor._attributeToPropertyMap.get(name);if(propName!==void 0){const options=ctor._classProperties.get(propName)||defaultPropertyDeclaration;// mark state reflecting
this._updateState=this._updateState|STATE_IS_REFLECTING_TO_PROPERTY;this[propName]=// tslint:disable-next-line:no-any
ctor._propertyValueFromAttribute(value,options);// mark state not reflecting
this._updateState=this._updateState&~STATE_IS_REFLECTING_TO_PROPERTY}}/**
     * This private version of `requestUpdate` does not access or return the
     * `updateComplete` promise. This promise can be overridden and is therefore
     * not free to access.
     */_requestUpdate(name,oldValue){let shouldRequestUpdate=!0;// If we have a property key, perform property update steps.
if(name!==void 0){const ctor=this.constructor,options=ctor._classProperties.get(name)||defaultPropertyDeclaration;if(ctor._valueHasChanged(this[name],oldValue,options.hasChanged)){if(!this._changedProperties.has(name)){this._changedProperties.set(name,oldValue)}// Add to reflecting properties set.
// Note, it's important that every change has a chance to add the
// property to `_reflectingProperties`. This ensures setting
// attribute + property reflects correctly.
if(!0===options.reflect&&!(this._updateState&STATE_IS_REFLECTING_TO_PROPERTY)){if(this._reflectingProperties===void 0){this._reflectingProperties=new Map}this._reflectingProperties.set(name,options)}}else{// Abort the request if the property should not be considered changed.
shouldRequestUpdate=!1}}if(!this._hasRequestedUpdate&&shouldRequestUpdate){this._enqueueUpdate()}}/**
     * Requests an update which is processed asynchronously. This should
     * be called when an element should update based on some state not triggered
     * by setting a property. In this case, pass no arguments. It should also be
     * called when manually implementing a property setter. In this case, pass the
     * property `name` and `oldValue` to ensure that any configured property
     * options are honored. Returns the `updateComplete` Promise which is resolved
     * when the update completes.
     *
     * @param name {PropertyKey} (optional) name of requesting property
     * @param oldValue {any} (optional) old value of requesting property
     * @returns {Promise} A Promise that is resolved when the update completes.
     */requestUpdate(name,oldValue){this._requestUpdate(name,oldValue);return this.updateComplete}/**
     * Sets up the element to asynchronously update.
     */_enqueueUpdate(){var _this=this;return babelHelpers.asyncToGenerator(function*(){// Mark state updating...
_this._updateState=_this._updateState|STATE_UPDATE_REQUESTED;let resolve,reject;const previousUpdatePromise=_this._updatePromise;_this._updatePromise=new Promise((res,rej)=>{resolve=res;reject=rej});try{// Ensure any previous update has resolved before updating.
// This `await` also ensures that property changes are batched.
yield previousUpdatePromise}catch(e){}// Ignore any previous errors. We only care that the previous cycle is
// done. Any error should have been handled in the previous update.
// Make sure the element has connected before updating.
if(!_this._hasConnected){yield new Promise(res=>_this._hasConnectedResolver=res)}try{const result=_this.performUpdate();// If `performUpdate` returns a Promise, we await it. This is done to
// enable coordinating updates with a scheduler. Note, the result is
// checked to avoid delaying an additional microtask unless we need to.
if(null!=result){yield result}}catch(e){reject(e)}resolve(!_this._hasRequestedUpdate)})()}get _hasConnected(){return this._updateState&STATE_HAS_CONNECTED}get _hasRequestedUpdate(){return this._updateState&STATE_UPDATE_REQUESTED}get hasUpdated(){return this._updateState&STATE_HAS_UPDATED}/**
     * Performs an element update. Note, if an exception is thrown during the
     * update, `firstUpdated` and `updated` will not be called.
     *
     * You can override this method to change the timing of updates. If this
     * method is overridden, `super.performUpdate()` must be called.
     *
     * For instance, to schedule updates to occur just before the next frame:
     *
     * ```
     * protected async performUpdate(): Promise<unknown> {
     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
     *   super.performUpdate();
     * }
     * ```
     */performUpdate(){// Mixin instance properties once, if they exist.
if(this._instanceProperties){this._applyInstanceProperties()}let shouldUpdate=!1;const changedProperties=this._changedProperties;try{shouldUpdate=this.shouldUpdate(changedProperties);if(shouldUpdate){this.update(changedProperties)}}catch(e){// Prevent `firstUpdated` and `updated` from running when there's an
// update exception.
shouldUpdate=!1;throw e}finally{// Ensure element can accept additional updates after an exception.
this._markUpdated()}if(shouldUpdate){if(!(this._updateState&STATE_HAS_UPDATED)){this._updateState=this._updateState|STATE_HAS_UPDATED;this.firstUpdated(changedProperties)}this.updated(changedProperties)}}_markUpdated(){this._changedProperties=new Map;this._updateState=this._updateState&~STATE_UPDATE_REQUESTED}/**
     * Returns a Promise that resolves when the element has completed updating.
     * The Promise value is a boolean that is `true` if the element completed the
     * update without triggering another update. The Promise result is `false` if
     * a property was set inside `updated()`. If the Promise is rejected, an
     * exception was thrown during the update.
     *
     * To await additional asynchronous work, override the `_getUpdateComplete`
     * method. For example, it is sometimes useful to await a rendered element
     * before fulfilling this Promise. To do this, first await
     * `super._getUpdateComplete()`, then any subsequent state.
     *
     * @returns {Promise} The Promise returns a boolean that indicates if the
     * update resolved without triggering another update.
     */get updateComplete(){return this._getUpdateComplete()}/**
     * Override point for the `updateComplete` promise.
     *
     * It is not safe to override the `updateComplete` getter directly due to a
     * limitation in TypeScript which means it is not possible to call a
     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target
     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).
     * This method should be overridden instead. For example:
     *
     *   class MyElement extends LitElement {
     *     async _getUpdateComplete() {
     *       await super._getUpdateComplete();
     *       await this._myChild.updateComplete;
     *     }
     *   }
     */_getUpdateComplete(){return this._updatePromise}/**
     * Controls whether or not `update` should be called when the element requests
     * an update. By default, this method always returns `true`, but this can be
     * customized to control when to update.
     *
     * * @param _changedProperties Map of changed properties with old values
     */shouldUpdate(_changedProperties){return!0}/**
     * Updates the element. This method reflects property values to attributes.
     * It can be overridden to render and keep updated element DOM.
     * Setting properties inside this method will *not* trigger
     * another update.
     *
     * * @param _changedProperties Map of changed properties with old values
     */update(_changedProperties){if(this._reflectingProperties!==void 0&&0<this._reflectingProperties.size){// Use forEach so this works even if for/of loops are compiled to for
// loops expecting arrays
this._reflectingProperties.forEach((v,k)=>this._propertyToAttribute(k,this[k],v));this._reflectingProperties=void 0}}/**
     * Invoked whenever the element is updated. Implement to perform
     * post-updating tasks via DOM APIs, for example, focusing an element.
     *
     * Setting properties inside this method will trigger the element to update
     * again after this update cycle completes.
     *
     * * @param _changedProperties Map of changed properties with old values
     */updated(_changedProperties){}/**
                                  * Invoked when the element is first updated. Implement to perform one time
                                  * work on the element after update.
                                  *
                                  * Setting properties inside this method will trigger the element to update
                                  * again after this update cycle completes.
                                  *
                                  * * @param _changedProperties Map of changed properties with old values
                                  */firstUpdated(_changedProperties){}}_exports.UpdatingElement$1=_exports.UpdatingElement=UpdatingElement;_a=finalized;/**
                 * Marks class as having finished creating properties.
                 */UpdatingElement[_a]=!0;var updatingElement={defaultConverter:defaultConverter,notEqual:notEqual,UpdatingElement:UpdatingElement};/**
    * @license
    * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    * This code may only be used under the BSD style license found at
    * http://polymer.github.io/LICENSE.txt
    * The complete set of authors may be found at
    * http://polymer.github.io/AUTHORS.txt
    * The complete set of contributors may be found at
    * http://polymer.github.io/CONTRIBUTORS.txt
    * Code distributed by Google as part of the polymer project is also
    * subject to an additional IP rights grant found at
    * http://polymer.github.io/PATENTS.txt
    */_exports.$updatingElement=updatingElement;const directives=new WeakMap,directive=f=>(...args)=>{const d=f(...args);directives.set(d,!0);return d};/**
                                   * Brands a function as a directive factory function so that lit-html will call
                                   * the function during template rendering, rather than passing as a value.
                                   *
                                   * A _directive_ is a function that takes a Part as an argument. It has the
                                   * signature: `(part: Part) => void`.
                                   *
                                   * A directive _factory_ is a function that takes arguments for data and
                                   * configuration and returns a directive. Users of directive usually refer to
                                   * the directive factory as the directive. For example, "The repeat directive".
                                   *
                                   * Usually a template author will invoke a directive factory in their template
                                   * with relevant arguments, which will then return a directive function.
                                   *
                                   * Here's an example of using the `repeat()` directive factory that takes an
                                   * array and a function to render an item:
                                   *
                                   * ```js
                                   * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`
                                   * ```
                                   *
                                   * When `repeat` is invoked, it returns a directive function that closes over
                                   * `items` and the template function. When the outer template is rendered, the
                                   * return directive function is called with the Part for the expression.
                                   * `repeat` then performs it's custom logic to render multiple items.
                                   *
                                   * @param f The directive factory function. Must be a function that returns a
                                   * function of the signature `(part: Part) => void`. The returned function will
                                   * be called with the part object.
                                   *
                                   * @example
                                   *
                                   * import {directive, html} from 'lit-html';
                                   *
                                   * const immutable = directive((v) => (part) => {
                                   *   if (part.value !== v) {
                                   *     part.setValue(v)
                                   *   }
                                   * });
                                   */_exports.directive$1=_exports.directive=directive;const isDirective=o=>{return"function"===typeof o&&directives.has(o)};_exports.isDirective$1=_exports.isDirective=isDirective;var directive$1={directive:directive,isDirective:isDirective};/**
    * @license
    * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    * This code may only be used under the BSD style license found at
    * http://polymer.github.io/LICENSE.txt
    * The complete set of authors may be found at
    * http://polymer.github.io/AUTHORS.txt
    * The complete set of contributors may be found at
    * http://polymer.github.io/CONTRIBUTORS.txt
    * Code distributed by Google as part of the polymer project is also
    * subject to an additional IP rights grant found at
    * http://polymer.github.io/PATENTS.txt
    */ /**
        * True if the custom elements polyfill is in use.
        */_exports.$directive=directive$1;const isCEPolyfill=window.customElements!==void 0&&window.customElements.polyfillWrapFlushCallback!==void 0;/**
                                                                                                                                   * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),
                                                                                                                                   * into another container (could be the same container), before `before`. If
                                                                                                                                   * `before` is null, it appends the nodes to the container.
                                                                                                                                   */_exports.isCEPolyfill=isCEPolyfill;const reparentNodes=(container,start,end=null,before=null)=>{while(start!==end){const n=start.nextSibling;container.insertBefore(start,before);start=n}};/**
    * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from
    * `container`.
    */_exports.reparentNodes$1=_exports.reparentNodes=reparentNodes;const removeNodes=(container,start,end=null)=>{while(start!==end){const n=start.nextSibling;container.removeChild(start);start=n}};_exports.removeNodes$1=_exports.removeNodes=removeNodes;var dom$1={isCEPolyfill:isCEPolyfill,reparentNodes:reparentNodes,removeNodes:removeNodes};/**
    * @license
    * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
    * This code may only be used under the BSD style license found at
    * http://polymer.github.io/LICENSE.txt
    * The complete set of authors may be found at
    * http://polymer.github.io/AUTHORS.txt
    * The complete set of contributors may be found at
    * http://polymer.github.io/CONTRIBUTORS.txt
    * Code distributed by Google as part of the polymer project is also
    * subject to an additional IP rights grant found at
    * http://polymer.github.io/PATENTS.txt
    */ /**
        * A sentinel value that signals that a value was handled by a directive and
        * should not be written to the DOM.
        */_exports.$dom=dom$1;const noChange={};/**
                             * A sentinel value that signals a NodePart to fully clear its content.
                             */_exports.noChange$1=_exports.noChange=noChange;const nothing={};_exports.nothing$1=_exports.nothing=nothing;var part={noChange:noChange,nothing:nothing};/**
    * @license
    * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    * This code may only be used under the BSD style license found at
    * http://polymer.github.io/LICENSE.txt
    * The complete set of authors may be found at
    * http://polymer.github.io/AUTHORS.txt
    * The complete set of contributors may be found at
    * http://polymer.github.io/CONTRIBUTORS.txt
    * Code distributed by Google as part of the polymer project is also
    * subject to an additional IP rights grant found at
    * http://polymer.github.io/PATENTS.txt
    */ /**
        * An expression marker with embedded unique key to avoid collision with
        * possible text in templates.
        */_exports.$part=part;const marker=`{{lit-${(Math.random()+"").slice(2)}}}`;/**
                                                                    * An expression marker used text-positions, multi-binding attributes, and
                                                                    * attributes with markup-like text values.
                                                                    */_exports.marker=marker;const nodeMarker=`<!--${marker}-->`;_exports.nodeMarker=nodeMarker;const markerRegex=new RegExp(`${marker}|${nodeMarker}`);/**
                                                                   * Suffix appended to all bound attribute names.
                                                                   */_exports.markerRegex=markerRegex;const boundAttributeSuffix="$lit$";/**
                                              * An updateable Template that tracks the location of dynamic parts.
                                              */_exports.boundAttributeSuffix=boundAttributeSuffix;class Template{constructor(result,element){this.parts=[];this.element=element;const nodesToRemove=[],stack=[],walker=document.createTreeWalker(element.content,133/* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,null,!1);// Keeps track of the last index associated with a part. We try to delete
// unnecessary nodes, but we never want to associate two different parts
// to the same index. They must have a constant node between.
let lastPartIndex=0,index=-1,partIndex=0;const{strings,values:{length}}=result;while(partIndex<length){const node=walker.nextNode();if(null===node){// We've exhausted the content inside a nested template element.
// Because we still have parts (the outer for-loop), we know:
// - There is a template in the stack
// - The walker will find a nextNode outside the template
walker.currentNode=stack.pop();continue}index++;if(1===node.nodeType/* Node.ELEMENT_NODE */){if(node.hasAttributes()){const attributes=node.attributes,{length}=attributes;// Per
// https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,
// attributes are not guaranteed to be returned in document order.
// In particular, Edge/IE can return them out of order, so we cannot
// assume a correspondence between part index and attribute index.
let count=0;for(let i=0;i<length;i++){if(endsWith(attributes[i].name,boundAttributeSuffix)){count++}}while(0<count--){// Get the template literal section leading up to the first
// expression in this attribute
const stringForPart=strings[partIndex],name=lastAttributeNameRegex.exec(stringForPart)[2],attributeLookupName=name.toLowerCase()+boundAttributeSuffix,attributeValue=node.getAttribute(attributeLookupName);// Find the attribute name
node.removeAttribute(attributeLookupName);const statics=attributeValue.split(markerRegex);this.parts.push({type:"attribute",index,name,strings:statics});partIndex+=statics.length-1}}if("TEMPLATE"===node.tagName){stack.push(node);walker.currentNode=node.content}}else if(3===node.nodeType/* Node.TEXT_NODE */){const data=node.data;if(0<=data.indexOf(marker)){const parent=node.parentNode,strings=data.split(markerRegex),lastIndex=strings.length-1;// Generate a new text node for each literal section
// These nodes are also used as the markers for node parts
for(let i=0;i<lastIndex;i++){let insert,s=strings[i];if(""===s){insert=createMarker()}else{const match=lastAttributeNameRegex.exec(s);if(null!==match&&endsWith(match[2],boundAttributeSuffix)){s=s.slice(0,match.index)+match[1]+match[2].slice(0,-boundAttributeSuffix.length)+match[3]}insert=document.createTextNode(s)}parent.insertBefore(insert,node);this.parts.push({type:"node",index:++index})}// If there's no text, we must insert a comment to mark our place.
// Else, we can trust it will stick around after cloning.
if(""===strings[lastIndex]){parent.insertBefore(createMarker(),node);nodesToRemove.push(node)}else{node.data=strings[lastIndex]}// We have a part for each match found
partIndex+=lastIndex}}else if(8===node.nodeType/* Node.COMMENT_NODE */){if(node.data===marker){const parent=node.parentNode;// Add a new marker node to be the startNode of the Part if any of
// the following are true:
//  * We don't have a previousSibling
//  * The previousSibling is already the start of a previous part
if(null===node.previousSibling||index===lastPartIndex){index++;parent.insertBefore(createMarker(),node)}lastPartIndex=index;this.parts.push({type:"node",index});// If we don't have a nextSibling, keep this node so we have an end.
// Else, we can remove it to save future costs.
if(null===node.nextSibling){node.data=""}else{nodesToRemove.push(node);index--}partIndex++}else{let i=-1;while(-1!==(i=node.data.indexOf(marker,i+1))){// Comment node has a binding marker inside, make an inactive part
// The binding won't work, but subsequent bindings will
// TODO (justinfagnani): consider whether it's even worth it to
// make bindings in comments work
this.parts.push({type:"node",index:-1});partIndex++}}}}// Remove text binding nodes after the walk to not disturb the TreeWalker
for(const n of nodesToRemove){n.parentNode.removeChild(n)}}}_exports.Template$1=_exports.Template=Template;const endsWith=(str,suffix)=>{const index=str.length-suffix.length;return 0<=index&&str.slice(index)===suffix},isTemplatePartActive=part=>-1!==part.index;_exports.isTemplatePartActive$1=_exports.isTemplatePartActive=isTemplatePartActive;// Allows `document.createComment('')` to be renamed for a
// small manual size-savings.
const createMarker=()=>document.createComment("");/**
                                                               * This regex extracts the attribute name preceding an attribute-position
                                                               * expression. It does this by matching the syntax allowed for attributes
                                                               * against the string literal directly preceding the expression, assuming that
                                                               * the expression is in an attribute-value position.
                                                               *
                                                               * See attributes in the HTML spec:
                                                               * https://www.w3.org/TR/html5/syntax.html#elements-attributes
                                                               *
                                                               * " \x09\x0a\x0c\x0d" are HTML space characters:
                                                               * https://www.w3.org/TR/html5/infrastructure.html#space-characters
                                                               *
                                                               * "\0-\x1F\x7F-\x9F" are Unicode control characters, which includes every
                                                               * space character except " ".
                                                               *
                                                               * So an attribute is:
                                                               *  * The name: any character except a control character, space character, ('),
                                                               *    ("), ">", "=", or "/"
                                                               *  * Followed by zero or more space characters
                                                               *  * Followed by "="
                                                               *  * Followed by zero or more space characters
                                                               *  * Followed by:
                                                               *    * Any character except space, ('), ("), "<", ">", "=", (`), or
                                                               *    * (") then any non-("), or
                                                               *    * (') then any non-(')
                                                               */_exports.createMarker$1=_exports.createMarker=createMarker;const lastAttributeNameRegex=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;_exports.lastAttributeNameRegex=lastAttributeNameRegex;var template$1={marker:marker,nodeMarker:nodeMarker,markerRegex:markerRegex,boundAttributeSuffix:boundAttributeSuffix,Template:Template,isTemplatePartActive:isTemplatePartActive,createMarker:createMarker,lastAttributeNameRegex:lastAttributeNameRegex};_exports.$template=template$1;class TemplateInstance{constructor(template,processor,options){this.__parts=[];this.template=template;this.processor=processor;this.options=options}update(values){let i=0;for(const part of this.__parts){if(part!==void 0){part.setValue(values[i])}i++}for(const part of this.__parts){if(part!==void 0){part.commit()}}}_clone(){// There are a number of steps in the lifecycle of a template instance's
// DOM fragment:
//  1. Clone - create the instance fragment
//  2. Adopt - adopt into the main document
//  3. Process - find part markers and create parts
//  4. Upgrade - upgrade custom elements
//  5. Update - set node, attribute, property, etc., values
//  6. Connect - connect to the document. Optional and outside of this
//     method.
//
// We have a few constraints on the ordering of these steps:
//  * We need to upgrade before updating, so that property values will pass
//    through any property setters.
//  * We would like to process before upgrading so that we're sure that the
//    cloned fragment is inert and not disturbed by self-modifying DOM.
//  * We want custom elements to upgrade even in disconnected fragments.
//
// Given these constraints, with full custom elements support we would
// prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect
//
// But Safari dooes not implement CustomElementRegistry#upgrade, so we
// can not implement that order and still have upgrade-before-update and
// upgrade disconnected fragments. So we instead sacrifice the
// process-before-upgrade constraint, since in Custom Elements v1 elements
// must not modify their light DOM in the constructor. We still have issues
// when co-existing with CEv0 elements like Polymer 1, and with polyfills
// that don't strictly adhere to the no-modification rule because shadow
// DOM, which may be created in the constructor, is emulated by being placed
// in the light DOM.
//
// The resulting order is on native is: Clone, Adopt, Upgrade, Process,
// Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade
// in one step.
//
// The Custom Elements v1 polyfill supports upgrade(), so the order when
// polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,
// Connect.
const fragment=isCEPolyfill?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),stack=[],parts=this.template.parts,walker=document.createTreeWalker(fragment,133/* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,null,!1);let partIndex=0,nodeIndex=0,part,node=walker.nextNode();// Loop through all the nodes and parts of a template
while(partIndex<parts.length){part=parts[partIndex];if(!isTemplatePartActive(part)){this.__parts.push(void 0);partIndex++;continue}// Progress the tree walker until we find our next part's node.
// Note that multiple parts may share the same node (attribute parts
// on a single element), so this loop may not run at all.
while(nodeIndex<part.index){nodeIndex++;if("TEMPLATE"===node.nodeName){stack.push(node);walker.currentNode=node.content}if(null===(node=walker.nextNode())){// We've exhausted the content inside a nested template element.
// Because we still have parts (the outer for-loop), we know:
// - There is a template in the stack
// - The walker will find a nextNode outside the template
walker.currentNode=stack.pop();node=walker.nextNode()}}// We've arrived at our part's node.
if("node"===part.type){const part=this.processor.handleTextExpression(this.options);part.insertAfterNode(node.previousSibling);this.__parts.push(part)}else{this.__parts.push(...this.processor.handleAttributeExpressions(node,part.name,part.strings,this.options))}partIndex++}if(isCEPolyfill){document.adoptNode(fragment);customElements.upgrade(fragment)}return fragment}}_exports.TemplateInstance$1=_exports.TemplateInstance=TemplateInstance;var templateInstance={TemplateInstance:TemplateInstance};_exports.$templateInstance=templateInstance;const commentMarker=` ${marker} `;/**
                                      * The return type of `html`, which holds a Template and the values from
                                      * interpolated expressions.
                                      */class TemplateResult{constructor(strings,values,type,processor){this.strings=strings;this.values=values;this.type=type;this.processor=processor}/**
     * Returns a string of HTML used to create a `<template>` element.
     */getHTML(){const l=this.strings.length-1;let html="",isCommentBinding=!1;for(let i=0;i<l;i++){const s=this.strings[i],commentOpen=s.lastIndexOf("<!--");// For each binding we want to determine the kind of marker to insert
// into the template source before it's parsed by the browser's HTML
// parser. The marker type is based on whether the expression is in an
// attribute, text, or comment poisition.
//   * For node-position bindings we insert a comment with the marker
//     sentinel as its text content, like <!--{{lit-guid}}-->.
//   * For attribute bindings we insert just the marker sentinel for the
//     first binding, so that we support unquoted attribute bindings.
//     Subsequent bindings can use a comment marker because multi-binding
//     attributes must be quoted.
//   * For comment bindings we insert just the marker sentinel so we don't
//     close the comment.
//
// The following code scans the template source, but is *not* an HTML
// parser. We don't need to track the tree structure of the HTML, only
// whether a binding is inside a comment, and if not, if it appears to be
// the first binding in an attribute.
// We're in comment position if we have a comment open with no following
// comment close. Because <-- can appear in an attribute value there can
// be false positives.
isCommentBinding=(-1<commentOpen||isCommentBinding)&&-1===s.indexOf("-->",commentOpen+1);// Check to see if we have an attribute-like sequence preceeding the
// expression. This can match "name=value" like structures in text,
// comments, and attribute values, so there can be false-positives.
const attributeMatch=lastAttributeNameRegex.exec(s);if(null===attributeMatch){// We're only in this branch if we don't have a attribute-like
// preceeding sequence. For comments, this guards against unusual
// attribute values like <div foo="<!--${'bar'}">. Cases like
// <!-- foo=${'bar'}--> are handled correctly in the attribute branch
// below.
html+=s+(isCommentBinding?commentMarker:nodeMarker)}else{// For attributes we use just a marker sentinel, and also append a
// $lit$ suffix to the name to opt-out of attribute-specific parsing
// that IE and Edge do for style and certain SVG attributes.
html+=s.substr(0,attributeMatch.index)+attributeMatch[1]+attributeMatch[2]+boundAttributeSuffix+attributeMatch[3]+marker}}html+=this.strings[l];return html}getTemplateElement(){const template=document.createElement("template");template.innerHTML=this.getHTML();return template}}/**
   * A TemplateResult for SVG fragments.
   *
   * This class wraps HTML in an `<svg>` tag in order to parse its contents in the
   * SVG namespace, then modifies the template to remove the `<svg>` tag so that
   * clones only container the original fragment.
   */_exports.TemplateResult$3=_exports.TemplateResult$2=_exports.TemplateResult$1=_exports.TemplateResult=TemplateResult;class SVGTemplateResult extends TemplateResult{getHTML(){return`<svg>${super.getHTML()}</svg>`}getTemplateElement(){const template=super.getTemplateElement(),content=template.content,svgElement=content.firstChild;content.removeChild(svgElement);reparentNodes(content,svgElement.firstChild);return template}}_exports.SVGTemplateResult$2=_exports.SVGTemplateResult$1=_exports.SVGTemplateResult=SVGTemplateResult;var templateResult={TemplateResult:TemplateResult,SVGTemplateResult:SVGTemplateResult};_exports.$templateResult=templateResult;const isPrimitive=value=>{return null===value||!("object"===typeof value||"function"===typeof value)};_exports.isPrimitive$1=_exports.isPrimitive=isPrimitive;const isIterable=value=>{return Array.isArray(value)||// tslint:disable-next-line:no-any
!!(value&&value[Symbol.iterator])};/**
    * Writes attribute values to the DOM for a group of AttributeParts bound to a
    * single attibute. The value is only set once even if there are multiple parts
    * for an attribute.
    */_exports.isIterable$1=_exports.isIterable=isIterable;class AttributeCommitter{constructor(element,name,strings){this.dirty=!0;this.element=element;this.name=name;this.strings=strings;this.parts=[];for(let i=0;i<strings.length-1;i++){this.parts[i]=this._createPart()}}/**
     * Creates a single part. Override this to create a differnt type of part.
     */_createPart(){return new AttributePart(this)}_getValue(){const strings=this.strings,l=strings.length-1;let text="";for(let i=0;i<l;i++){text+=strings[i];const part=this.parts[i];if(part!==void 0){const v=part.value;if(isPrimitive(v)||!isIterable(v)){text+="string"===typeof v?v:v+""}else{for(const t of v){text+="string"===typeof t?t:t+""}}}}text+=strings[l];return text}commit(){if(this.dirty){this.dirty=!1;this.element.setAttribute(this.name,this._getValue())}}}/**
   * A Part that controls all or part of an attribute value.
   */_exports.AttributeCommitter$1=_exports.AttributeCommitter=AttributeCommitter;class AttributePart{constructor(committer){this.value=void 0;this.committer=committer}setValue(value){if(value!==noChange&&(!isPrimitive(value)||value!==this.value)){this.value=value;// If the value is a not a directive, dirty the committer so that it'll
// call setAttribute. If the value is a directive, it'll dirty the
// committer if it calls setValue().
if(!isDirective(value)){this.committer.dirty=!0}}}commit(){while(isDirective(this.value)){const directive=this.value;this.value=noChange;directive(this)}if(this.value===noChange){return}this.committer.commit()}}/**
   * A Part that controls a location within a Node tree. Like a Range, NodePart
   * has start and end locations and can set and update the Nodes between those
   * locations.
   *
   * NodeParts support several value types: primitives, Nodes, TemplateResults,
   * as well as arrays and iterables of those types.
   */_exports.AttributePart$1=_exports.AttributePart=AttributePart;class NodePart{constructor(options){this.value=void 0;this.__pendingValue=void 0;this.options=options}/**
     * Appends this part into a container.
     *
     * This part must be empty, as its contents are not automatically moved.
     */appendInto(container){this.startNode=container.appendChild(createMarker());this.endNode=container.appendChild(createMarker())}/**
     * Inserts this part after the `ref` node (between `ref` and `ref`'s next
     * sibling). Both `ref` and its next sibling must be static, unchanging nodes
     * such as those that appear in a literal section of a template.
     *
     * This part must be empty, as its contents are not automatically moved.
     */insertAfterNode(ref){this.startNode=ref;this.endNode=ref.nextSibling}/**
     * Appends this part into a parent part.
     *
     * This part must be empty, as its contents are not automatically moved.
     */appendIntoPart(part){part.__insert(this.startNode=createMarker());part.__insert(this.endNode=createMarker())}/**
     * Inserts this part after the `ref` part.
     *
     * This part must be empty, as its contents are not automatically moved.
     */insertAfterPart(ref){ref.__insert(this.startNode=createMarker());this.endNode=ref.endNode;ref.endNode=this.startNode}setValue(value){this.__pendingValue=value}commit(){while(isDirective(this.__pendingValue)){const directive=this.__pendingValue;this.__pendingValue=noChange;directive(this)}const value=this.__pendingValue;if(value===noChange){return}if(isPrimitive(value)){if(value!==this.value){this.__commitText(value)}}else if(value instanceof TemplateResult){this.__commitTemplateResult(value)}else if(value instanceof Node){this.__commitNode(value)}else if(isIterable(value)){this.__commitIterable(value)}else if(value===nothing){this.value=nothing;this.clear()}else{// Fallback, will render the string representation
this.__commitText(value)}}__insert(node){this.endNode.parentNode.insertBefore(node,this.endNode)}__commitNode(value){if(this.value===value){return}this.clear();this.__insert(value);this.value=value}__commitText(value){const node=this.startNode.nextSibling;value=null==value?"":value;// If `value` isn't already a string, we explicitly convert it here in case
// it can't be implicitly converted - i.e. it's a symbol.
const valueAsString="string"===typeof value?value:value+"";if(node===this.endNode.previousSibling&&3===node.nodeType/* Node.TEXT_NODE */){// If we only have a single text node between the markers, we can just
// set its value, rather than replacing it.
// TODO(justinfagnani): Can we just check if this.value is primitive?
node.data=valueAsString}else{this.__commitNode(document.createTextNode(valueAsString))}this.value=value}__commitTemplateResult(value){const template=this.options.templateFactory(value);if(this.value instanceof TemplateInstance&&this.value.template===template){this.value.update(value.values)}else{// Make sure we propagate the template processor from the TemplateResult
// so that we use its syntax extension, etc. The template factory comes
// from the render function options so that it can control template
// caching and preprocessing.
const instance=new TemplateInstance(template,value.processor,this.options),fragment=instance._clone();instance.update(value.values);this.__commitNode(fragment);this.value=instance}}__commitIterable(value){// For an Iterable, we create a new InstancePart per item, then set its
// value to the item. This is a little bit of overhead for every item in
// an Iterable, but it lets us recurse easily and efficiently update Arrays
// of TemplateResults that will be commonly returned from expressions like:
// array.map((i) => html`${i}`), by reusing existing TemplateInstances.
// If _value is an array, then the previous render was of an
// iterable and _value will contain the NodeParts from the previous
// render. If _value is not an array, clear this part and make a new
// array for NodeParts.
if(!Array.isArray(this.value)){this.value=[];this.clear()}// Lets us keep track of how many items we stamped so we can clear leftover
// items from a previous render
const itemParts=this.value;let partIndex=0,itemPart;for(const item of value){// Try to reuse an existing part
itemPart=itemParts[partIndex];// If no existing part, create a new one
if(itemPart===void 0){itemPart=new NodePart(this.options);itemParts.push(itemPart);if(0===partIndex){itemPart.appendIntoPart(this)}else{itemPart.insertAfterPart(itemParts[partIndex-1])}}itemPart.setValue(item);itemPart.commit();partIndex++}if(partIndex<itemParts.length){// Truncate the parts array so _value reflects the current state
itemParts.length=partIndex;this.clear(itemPart&&itemPart.endNode)}}clear(startNode=this.startNode){removeNodes(this.startNode.parentNode,startNode.nextSibling,this.endNode)}}/**
   * Implements a boolean attribute, roughly as defined in the HTML
   * specification.
   *
   * If the value is truthy, then the attribute is present with a value of
   * ''. If the value is falsey, the attribute is removed.
   */_exports.NodePart$1=_exports.NodePart=NodePart;class BooleanAttributePart{constructor(element,name,strings){this.value=void 0;this.__pendingValue=void 0;if(2!==strings.length||""!==strings[0]||""!==strings[1]){throw new Error("Boolean attributes can only contain a single expression")}this.element=element;this.name=name;this.strings=strings}setValue(value){this.__pendingValue=value}commit(){while(isDirective(this.__pendingValue)){const directive=this.__pendingValue;this.__pendingValue=noChange;directive(this)}if(this.__pendingValue===noChange){return}const value=!!this.__pendingValue;if(this.value!==value){if(value){this.element.setAttribute(this.name,"")}else{this.element.removeAttribute(this.name)}this.value=value}this.__pendingValue=noChange}}/**
   * Sets attribute values for PropertyParts, so that the value is only set once
   * even if there are multiple parts for a property.
   *
   * If an expression controls the whole property value, then the value is simply
   * assigned to the property under control. If there are string literals or
   * multiple expressions, then the strings are expressions are interpolated into
   * a string first.
   */_exports.BooleanAttributePart$1=_exports.BooleanAttributePart=BooleanAttributePart;class PropertyCommitter extends AttributeCommitter{constructor(element,name,strings){super(element,name,strings);this.single=2===strings.length&&""===strings[0]&&""===strings[1]}_createPart(){return new PropertyPart(this)}_getValue(){if(this.single){return this.parts[0].value}return super._getValue()}commit(){if(this.dirty){this.dirty=!1;// tslint:disable-next-line:no-any
this.element[this.name]=this._getValue()}}}_exports.PropertyCommitter$1=_exports.PropertyCommitter=PropertyCommitter;class PropertyPart extends AttributePart{}// Detect event listener options support. If the `capture` property is read
// from the options object, then options are supported. If not, then the thrid
// argument to add/removeEventListener is interpreted as the boolean capture
// value so we should only pass the `capture` property.
_exports.PropertyPart$1=_exports.PropertyPart=PropertyPart;let eventOptionsSupported=!1;try{const options={get capture(){eventOptionsSupported=!0;return!1}};// tslint:disable-next-line:no-any
window.addEventListener("test",options,options);// tslint:disable-next-line:no-any
window.removeEventListener("test",options,options)}catch(_e){}class EventPart{constructor(element,eventName,eventContext){this.value=void 0;this.__pendingValue=void 0;this.element=element;this.eventName=eventName;this.eventContext=eventContext;this.__boundHandleEvent=e=>this.handleEvent(e)}setValue(value){this.__pendingValue=value}commit(){while(isDirective(this.__pendingValue)){const directive=this.__pendingValue;this.__pendingValue=noChange;directive(this)}if(this.__pendingValue===noChange){return}const newListener=this.__pendingValue,oldListener=this.value,shouldRemoveListener=null==newListener||null!=oldListener&&(newListener.capture!==oldListener.capture||newListener.once!==oldListener.once||newListener.passive!==oldListener.passive),shouldAddListener=null!=newListener&&(null==oldListener||shouldRemoveListener);if(shouldRemoveListener){this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options)}if(shouldAddListener){this.__options=getOptions(newListener);this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)}this.value=newListener;this.__pendingValue=noChange}handleEvent(event){if("function"===typeof this.value){this.value.call(this.eventContext||this.element,event)}else{this.value.handleEvent(event)}}}// We copy options because of the inconsistent behavior of browsers when reading
// the third argument of add/removeEventListener. IE11 doesn't support options
// at all. Chrome 41 only reads `capture` if the argument is an object.
_exports.EventPart$1=_exports.EventPart=EventPart;const getOptions=o=>o&&(eventOptionsSupported?{capture:o.capture,passive:o.passive,once:o.once}:o.capture);var parts={isPrimitive:isPrimitive,isIterable:isIterable,AttributeCommitter:AttributeCommitter,AttributePart:AttributePart,NodePart:NodePart,BooleanAttributePart:BooleanAttributePart,PropertyCommitter:PropertyCommitter,PropertyPart:PropertyPart,EventPart:EventPart};_exports.$parts=parts;class DefaultTemplateProcessor{/**
   * Create parts for an attribute-position binding, given the event, attribute
   * name, and string literals.
   *
   * @param element The element containing the binding
   * @param name  The attribute name
   * @param strings The string literals. There are always at least two strings,
   *   event for fully-controlled bindings with a single expression.
   */handleAttributeExpressions(element,name,strings,options){const prefix=name[0];if("."===prefix){const committer=new PropertyCommitter(element,name.slice(1),strings);return committer.parts}if("@"===prefix){return[new EventPart(element,name.slice(1),options.eventContext)]}if("?"===prefix){return[new BooleanAttributePart(element,name.slice(1),strings)]}const committer=new AttributeCommitter(element,name,strings);return committer.parts}/**
     * Create parts for a text-position binding.
     * @param templateFactory
     */handleTextExpression(options){return new NodePart(options)}}_exports.DefaultTemplateProcessor$1=_exports.DefaultTemplateProcessor=DefaultTemplateProcessor;const defaultTemplateProcessor=new DefaultTemplateProcessor;_exports.defaultTemplateProcessor$1=_exports.defaultTemplateProcessor=defaultTemplateProcessor;var defaultTemplateProcessor$1={DefaultTemplateProcessor:DefaultTemplateProcessor,defaultTemplateProcessor:defaultTemplateProcessor};_exports.$defaultTemplateProcessor=defaultTemplateProcessor$1;function templateFactory(result){let templateCache=templateCaches.get(result.type);if(templateCache===void 0){templateCache={stringsArray:new WeakMap,keyString:new Map};templateCaches.set(result.type,templateCache)}let template=templateCache.stringsArray.get(result.strings);if(template!==void 0){return template}// If the TemplateStringsArray is new, generate a key from the strings
// This key is shared between all templates with identical content
const key=result.strings.join(marker);// Check if we already have a Template for this key
template=templateCache.keyString.get(key);if(template===void 0){// If we have not seen this key before, create a new Template
template=new Template(result,result.getTemplateElement());// Cache the Template for this key
templateCache.keyString.set(key,template)}// Cache all future queries for this TemplateStringsArray
templateCache.stringsArray.set(result.strings,template);return template}const templateCaches=new Map;_exports.templateCaches$1=_exports.templateCaches=templateCaches;var templateFactory$1={templateFactory:templateFactory,templateCaches:templateCaches};_exports.$templateFactory=templateFactory$1;const parts$1=new WeakMap;/**
                                     * Renders a template result or other value to a container.
                                     *
                                     * To update a container with new values, reevaluate the template literal and
                                     * call `render` with the new result.
                                     *
                                     * @param result Any value renderable by NodePart - typically a TemplateResult
                                     *     created by evaluating a template tag like `html` or `svg`.
                                     * @param container A DOM parent to render to. The entire contents are either
                                     *     replaced, or efficiently updated if the same result type was previous
                                     *     rendered there.
                                     * @param options RenderOptions for the entire render tree rendered to this
                                     *     container. Render options must *not* change between renders to the same
                                     *     container, as those changes will not effect previously rendered DOM.
                                     */_exports.parts$1=_exports.parts=parts$1;const render=(result,container,options)=>{let part=parts$1.get(container);if(part===void 0){removeNodes(container,container.firstChild);parts$1.set(container,part=new NodePart(Object.assign({templateFactory},options)));part.appendInto(container)}part.setValue(result);part.commit()};_exports.render$2=_exports.render=render;var render$1={parts:parts$1,render:render};// This line will be used in regexes to search for lit-html usage.
// TODO(justinfagnani): inject version number at build time
_exports.$render=render$1;(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.1.2");/**
                                                                                * Interprets a template literal as an HTML template that can efficiently
                                                                                * render to and update a container.
                                                                                */const html$1=(strings,...values)=>new TemplateResult(strings,values,"html",defaultTemplateProcessor);/**
                                                                                                                    * Interprets a template literal as an SVG template that can efficiently
                                                                                                                    * render to and update a container.
                                                                                                                    */_exports.html$5=_exports.html$4=_exports.html=html$1;const svg=(strings,...values)=>new SVGTemplateResult(strings,values,"svg",defaultTemplateProcessor);_exports.svg$2=_exports.svg$1=_exports.svg=svg;var litHtml={html:html$1,svg:svg,DefaultTemplateProcessor:DefaultTemplateProcessor,defaultTemplateProcessor:defaultTemplateProcessor,directive:directive,isDirective:isDirective,removeNodes:removeNodes,reparentNodes:reparentNodes,noChange:noChange,nothing:nothing,AttributeCommitter:AttributeCommitter,AttributePart:AttributePart,BooleanAttributePart:BooleanAttributePart,EventPart:EventPart,isIterable:isIterable,isPrimitive:isPrimitive,NodePart:NodePart,PropertyCommitter:PropertyCommitter,PropertyPart:PropertyPart,parts:parts$1,render:render,templateCaches:templateCaches,templateFactory:templateFactory,TemplateInstance:TemplateInstance,SVGTemplateResult:SVGTemplateResult,TemplateResult:TemplateResult,createMarker:createMarker,isTemplatePartActive:isTemplatePartActive,Template:Template};_exports.$litHtml=litHtml;const walkerNodeFilter=133/* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;/**
                                                                            * Removes the list of nodes from a Template safely. In addition to removing
                                                                            * nodes from the Template, the Template part indices are updated to match
                                                                            * the mutated Template DOM.
                                                                            *
                                                                            * As the template is walked the removal state is tracked and
                                                                            * part indices are adjusted as needed.
                                                                            *
                                                                            * div
                                                                            *   div#1 (remove) <-- start removing (removing node is div#1)
                                                                            *     div
                                                                            *       div#2 (remove)  <-- continue removing (removing node is still div#1)
                                                                            *         div
                                                                            * div <-- stop removing since previous sibling is the removing node (div#1,
                                                                            * removed 4 nodes)
                                                                            */function removeNodesFromTemplate(template,nodesToRemove){const{element:{content},parts}=template,walker=document.createTreeWalker(content,walkerNodeFilter,null,!1);let partIndex=nextActiveIndexInTemplateParts(parts),part=parts[partIndex],nodeIndex=-1,removeCount=0;const nodesToRemoveInTemplate=[];let currentRemovingNode=null;while(walker.nextNode()){nodeIndex++;const node=walker.currentNode;// End removal if stepped past the removing node
if(node.previousSibling===currentRemovingNode){currentRemovingNode=null}// A node to remove was found in the template
if(nodesToRemove.has(node)){nodesToRemoveInTemplate.push(node);// Track node we're removing
if(null===currentRemovingNode){currentRemovingNode=node}}// When removing, increment count by which to adjust subsequent part indices
if(null!==currentRemovingNode){removeCount++}while(part!==void 0&&part.index===nodeIndex){// If part is in a removed node deactivate it by setting index to -1 or
// adjust the index as needed.
part.index=null!==currentRemovingNode?-1:part.index-removeCount;// go to the next active part.
partIndex=nextActiveIndexInTemplateParts(parts,partIndex);part=parts[partIndex]}}nodesToRemoveInTemplate.forEach(n=>n.parentNode.removeChild(n))}const countNodes=node=>{let count=11===node.nodeType/* Node.DOCUMENT_FRAGMENT_NODE */?0:1;const walker=document.createTreeWalker(node,walkerNodeFilter,null,!1);while(walker.nextNode()){count++}return count},nextActiveIndexInTemplateParts=(parts,startIndex=-1)=>{for(let i=startIndex+1;i<parts.length;i++){const part=parts[i];if(isTemplatePartActive(part)){return i}}return-1};/**
    * Inserts the given node into the Template, optionally before the given
    * refNode. In addition to inserting the node into the Template, the Template
    * part indices are updated to match the mutated Template DOM.
    */function insertNodeIntoTemplate(template,node,refNode=null){const{element:{content},parts}=template;// If there's no refNode, then put node at end of template.
// No part indices need to be shifted in this case.
if(null===refNode||refNode===void 0){content.appendChild(node);return}const walker=document.createTreeWalker(content,walkerNodeFilter,null,!1);let partIndex=nextActiveIndexInTemplateParts(parts),insertCount=0,walkerIndex=-1;while(walker.nextNode()){walkerIndex++;const walkerNode=walker.currentNode;if(walkerNode===refNode){insertCount=countNodes(node);refNode.parentNode.insertBefore(node,refNode)}while(-1!==partIndex&&parts[partIndex].index===walkerIndex){// If we've inserted the node, simply adjust all subsequent parts
if(0<insertCount){while(-1!==partIndex){parts[partIndex].index+=insertCount;partIndex=nextActiveIndexInTemplateParts(parts,partIndex)}return}partIndex=nextActiveIndexInTemplateParts(parts,partIndex)}}}var modifyTemplate={removeNodesFromTemplate:removeNodesFromTemplate,insertNodeIntoTemplate:insertNodeIntoTemplate};_exports.$modifyTemplate=modifyTemplate;const getTemplateCacheKey=(type,scopeName)=>`${type}--${scopeName}`;let compatibleShadyCSSVersion=!0;if("undefined"===typeof window.ShadyCSS){compatibleShadyCSSVersion=!1}else if("undefined"===typeof window.ShadyCSS.prepareTemplateDom){console.warn(`Incompatible ShadyCSS version detected. `+`Please update to at least @webcomponents/webcomponentsjs@2.0.2 and `+`@webcomponents/shadycss@1.3.1.`);compatibleShadyCSSVersion=!1}/**
   * Template factory which scopes template DOM using ShadyCSS.
   * @param scopeName {string}
   */const shadyTemplateFactory=scopeName=>result=>{const cacheKey=getTemplateCacheKey(result.type,scopeName);let templateCache=templateCaches.get(cacheKey);if(templateCache===void 0){templateCache={stringsArray:new WeakMap,keyString:new Map};templateCaches.set(cacheKey,templateCache)}let template=templateCache.stringsArray.get(result.strings);if(template!==void 0){return template}const key=result.strings.join(marker);template=templateCache.keyString.get(key);if(template===void 0){const element=result.getTemplateElement();if(compatibleShadyCSSVersion){window.ShadyCSS.prepareTemplateDom(element,scopeName)}template=new Template(result,element);templateCache.keyString.set(key,template)}templateCache.stringsArray.set(result.strings,template);return template},TEMPLATE_TYPES=["html","svg"],removeStylesFromLitTemplates=scopeName=>{TEMPLATE_TYPES.forEach(type=>{const templates=templateCaches.get(getTemplateCacheKey(type,scopeName));if(templates!==void 0){templates.keyString.forEach(template=>{const{element:{content}}=template,styles=new Set;// IE 11 doesn't support the iterable param Set constructor
Array.from(content.querySelectorAll("style")).forEach(s=>{styles.add(s)});removeNodesFromTemplate(template,styles)})}})},shadyRenderSet=new Set,prepareTemplateStyles=(scopeName,renderedDOM,template)=>{shadyRenderSet.add(scopeName);// If `renderedDOM` is stamped from a Template, then we need to edit that
// Template's underlying template element. Otherwise, we create one here
// to give to ShadyCSS, which still requires one while scoping.
const templateElement=!!template?template.element:document.createElement("template"),styles=renderedDOM.querySelectorAll("style"),{length}=styles;// Move styles out of rendered DOM and store.
// If there are no styles, skip unnecessary work
if(0===length){// Ensure prepareTemplateStyles is called to support adding
// styles via `prepareAdoptedCssText` since that requires that
// `prepareTemplateStyles` is called.
//
// ShadyCSS will only update styles containing @apply in the template
// given to `prepareTemplateStyles`. If no lit Template was given,
// ShadyCSS will not be able to update uses of @apply in any relevant
// template. However, this is not a problem because we only create the
// template for the purpose of supporting `prepareAdoptedCssText`,
// which doesn't support @apply at all.
window.ShadyCSS.prepareTemplateStyles(templateElement,scopeName);return}const condensedStyle=document.createElement("style");// Collect styles into a single style. This helps us make sure ShadyCSS
// manipulations will not prevent us from being able to fix up template
// part indices.
// NOTE: collecting styles is inefficient for browsers but ShadyCSS
// currently does this anyway. When it does not, this should be changed.
for(let i=0;i<length;i++){const style=styles[i];style.parentNode.removeChild(style);condensedStyle.textContent+=style.textContent}// Remove styles from nested templates in this scope.
removeStylesFromLitTemplates(scopeName);// And then put the condensed style into the "root" template passed in as
// `template`.
const content=templateElement.content;if(!!template){insertNodeIntoTemplate(template,condensedStyle,content.firstChild)}else{content.insertBefore(condensedStyle,content.firstChild)}// Note, it's important that ShadyCSS gets the template that `lit-html`
// will actually render so that it can update the style inside when
// needed (e.g. @apply native Shadow DOM case).
window.ShadyCSS.prepareTemplateStyles(templateElement,scopeName);const style=content.querySelector("style");if(window.ShadyCSS.nativeShadow&&null!==style){// When in native Shadow DOM, ensure the style created by ShadyCSS is
// included in initially rendered output (`renderedDOM`).
renderedDOM.insertBefore(style.cloneNode(!0),renderedDOM.firstChild)}else if(!!template){// When no style is left in the template, parts will be broken as a
// result. To fix this, we put back the style node ShadyCSS removed
// and then tell lit to remove that node from the template.
// There can be no style in the template in 2 cases (1) when Shady DOM
// is in use, ShadyCSS removes all styles, (2) when native Shadow DOM
// is in use ShadyCSS removes the style if it contains no content.
// NOTE, ShadyCSS creates its own style so we can safely add/remove
// `condensedStyle` here.
content.insertBefore(condensedStyle,content.firstChild);const removes=new Set([condensedStyle]);removeNodesFromTemplate(template,removes)}},render$2=(result,container,options)=>{if(!options||"object"!==typeof options||!options.scopeName){throw new Error("The `scopeName` option is required.")}const scopeName=options.scopeName,hasRendered=parts$1.has(container),needsScoping=compatibleShadyCSSVersion&&11===container.nodeType/* Node.DOCUMENT_FRAGMENT_NODE */&&!!container.host,firstScopeRender=needsScoping&&!shadyRenderSet.has(scopeName),renderContainer=firstScopeRender?document.createDocumentFragment():container;render(result,renderContainer,Object.assign({templateFactory:shadyTemplateFactory(scopeName)},options));// When performing first scope render,
// (1) We've rendered into a fragment so that there's a chance to
// `prepareTemplateStyles` before sub-elements hit the DOM
// (which might cause them to render based on a common pattern of
// rendering in a custom element's `connectedCallback`);
// (2) Scope the template with ShadyCSS one time only for this scope.
// (3) Render the fragment into the container and make sure the
// container knows its `part` is the one we just rendered. This ensures
// DOM will be re-used on subsequent renders.
if(firstScopeRender){const part=parts$1.get(renderContainer);parts$1.delete(renderContainer);// ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)
// that should apply to `renderContainer` even if the rendered value is
// not a TemplateInstance. However, it will only insert scoped styles
// into the document if `prepareTemplateStyles` has already been called
// for the given scope name.
const template=part.value instanceof TemplateInstance?part.value.template:void 0;prepareTemplateStyles(scopeName,renderContainer,template);removeNodes(container,container.firstChild);container.appendChild(renderContainer);parts$1.set(container,part)}// After elements have hit the DOM, update styling if this is the
// initial render to this container.
// This is needed whenever dynamic changes are made so it would be
// safest to do every render; however, this would regress performance
// so we leave it up to the user to call `ShadyCSS.styleElement`
// for dynamic changes.
if(!hasRendered&&needsScoping){window.ShadyCSS.styleElement(container.host)}};_exports.render$1=render$2;var shadyRender={render:render$2,html:html$1,svg:svg,TemplateResult:TemplateResult};// IMPORTANT: do not change the property name or the assignment expression.
// This line will be used in regexes to search for LitElement usage.
// TODO(justinfagnani): inject version number at build time
_exports.$shadyRender=shadyRender;(window.litElementVersions||(window.litElementVersions=[])).push("2.2.1");/**
                                                                                      * Minimal implementation of Array.prototype.flat
                                                                                      * @param arr the array to flatten
                                                                                      * @param result the accumlated result
                                                                                      */function arrayFlat(styles,result=[]){for(let i=0,length=styles.length;i<length;i++){const value=styles[i];if(Array.isArray(value)){arrayFlat(value,result)}else{result.push(value)}}return result}/** Deeply flattens styles array. Uses native flat if available. */const flattenStyles=styles=>styles.flat?styles.flat(1/0):arrayFlat(styles);class LitElement extends UpdatingElement{/** @nocollapse */static finalize(){// The Closure JS Compiler does not always preserve the correct "this"
// when calling static super methods (b/137460243), so explicitly bind.
super.finalize.call(this);// Prepare styling that is stamped at first render time. Styling
// is built from user provided `styles` or is inherited from the superclass.
this._styles=this.hasOwnProperty(JSCompiler_renameProperty("styles",this))?this._getUniqueStyles():this._styles||[]}/** @nocollapse */static _getUniqueStyles(){// Take care not to call `this.styles` multiple times since this generates
// new CSSResults each time.
// TODO(sorvell): Since we do not cache CSSResults by input, any
// shared styles will generate new stylesheet objects, which is wasteful.
// This should be addressed when a browser ships constructable
// stylesheets.
const userStyles=this.styles,styles=[];if(Array.isArray(userStyles)){const flatStyles=flattenStyles(userStyles),styleSet=flatStyles.reduceRight((set,s)=>{set.add(s);// on IE set.add does not return the set.
return set},new Set);// As a performance optimization to avoid duplicated styling that can
// occur especially when composing via subclassing, de-duplicate styles
// preserving the last item in the list. The last item is kept to
// try to preserve cascade order with the assumption that it's most
// important that last added styles override previous styles.
// Array.from does not work on Set in IE
styleSet.forEach(v=>styles.unshift(v))}else if(userStyles){styles.push(userStyles)}return styles}/**
     * Performs element initialization. By default this calls `createRenderRoot`
     * to create the element `renderRoot` node and captures any pre-set values for
     * registered properties.
     */initialize(){super.initialize();this.renderRoot=this.createRenderRoot();// Note, if renderRoot is not a shadowRoot, styles would/could apply to the
// element's getRootNode(). While this could be done, we're choosing not to
// support this now since it would require different logic around de-duping.
if(window.ShadowRoot&&this.renderRoot instanceof window.ShadowRoot){this.adoptStyles()}}/**
     * Returns the node into which the element should render and by default
     * creates and returns an open shadowRoot. Implement to customize where the
     * element's DOM is rendered. For example, to render into the element's
     * childNodes, return `this`.
     * @returns {Element|DocumentFragment} Returns a node into which to render.
     */createRenderRoot(){return this.attachShadow({mode:"open"})}/**
     * Applies styling to the element shadowRoot using the `static get styles`
     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where
     * available and will fallback otherwise. When Shadow DOM is polyfilled,
     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM
     * is available but `adoptedStyleSheets` is not, styles are appended to the
     * end of the `shadowRoot` to [mimic spec
     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).
     */adoptStyles(){const styles=this.constructor._styles;if(0===styles.length){return}// There are three separate cases here based on Shadow DOM support.
// (1) shadowRoot polyfilled: use ShadyCSS
// (2) shadowRoot.adoptedStyleSheets available: use it.
// (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after
// rendering
if(window.ShadyCSS!==void 0&&!window.ShadyCSS.nativeShadow){window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map(s=>s.cssText),this.localName)}else if(supportsAdoptingStyleSheets){this.renderRoot.adoptedStyleSheets=styles.map(s=>s.styleSheet)}else{// This must be done after rendering so the actual style insertion is done
// in `update`.
this._needsShimAdoptedStyleSheets=!0}}connectedCallback(){super.connectedCallback();// Note, first update/render handles styleElement so we only call this if
// connected after first update.
if(this.hasUpdated&&window.ShadyCSS!==void 0){window.ShadyCSS.styleElement(this)}}/**
     * Updates the element. This method reflects property values to attributes
     * and calls `render` to render DOM via lit-html. Setting properties inside
     * this method will *not* trigger another update.
     * * @param _changedProperties Map of changed properties with old values
     */update(changedProperties){super.update(changedProperties);const templateResult=this.render();if(templateResult instanceof TemplateResult){this.constructor.render(templateResult,this.renderRoot,{scopeName:this.localName,eventContext:this})}// When native Shadow DOM is used but adoptedStyles are not supported,
// insert styling after rendering to ensure adoptedStyles have highest
// priority.
if(this._needsShimAdoptedStyleSheets){this._needsShimAdoptedStyleSheets=!1;this.constructor._styles.forEach(s=>{const style=document.createElement("style");style.textContent=s.cssText;this.renderRoot.appendChild(style)})}}/**
     * Invoked on each update to perform rendering tasks. This method must return
     * a lit-html TemplateResult. Setting properties inside this method will *not*
     * trigger the element to update.
     */render(){}}/**
   * Ensure this class is marked as `finalized` as an optimization ensuring
   * it will not needlessly try to `finalize`.
   *
   * Note this property name is a string to prevent breaking Closure JS Compiler
   * optimizations. See updating-element.ts for more information.
   */_exports.LitElement=LitElement;LitElement.finalized=!0;/**
                                 * Render method used to render the lit-html TemplateResult to the element's
                                 * DOM.
                                 * @param {TemplateResult} Template to render.
                                 * @param {Element|DocumentFragment} Node into which to render.
                                 * @param {String} Element name.
                                 * @nocollapse
                                 */LitElement.render=render$2;var litElement={LitElement:LitElement,defaultConverter:defaultConverter,notEqual:notEqual,UpdatingElement:UpdatingElement,customElement:customElement,property:property,query:query,queryAll:queryAll,eventOptions:eventOptions,html:html$1,svg:svg,TemplateResult:TemplateResult,SVGTemplateResult:SVGTemplateResult,supportsAdoptingStyleSheets:supportsAdoptingStyleSheets,CSSResult:CSSResult,unsafeCSS:unsafeCSS,css:css};// TODO(kschaaf): Refactor into Part API?
_exports.$litElement=litElement;const createAndInsertPart=(containerPart,beforePart)=>{const container=containerPart.startNode.parentNode,beforeNode=beforePart===void 0?containerPart.endNode:beforePart.startNode,startNode=container.insertBefore(createMarker(),beforeNode);container.insertBefore(createMarker(),beforeNode);const newPart=new NodePart(containerPart.options);newPart.insertAfterNode(startNode);return newPart},updatePart=(part,value)=>{part.setValue(value);part.commit();return part},insertPartBefore=(containerPart,part,ref)=>{const container=containerPart.startNode.parentNode,beforeNode=ref?ref.startNode:containerPart.endNode,endNode=part.endNode.nextSibling;if(endNode!==beforeNode){reparentNodes(container,part.startNode,endNode,beforeNode)}},removePart=part=>{removeNodes(part.startNode.parentNode,part.startNode,part.endNode.nextSibling)},generateMap=(list,start,end)=>{const map=new Map;for(let i=start;i<=end;i++){map.set(list[i],i)}return map},partListCache=new WeakMap,keyListCache=new WeakMap,repeat=directive((items,keyFnOrTemplate,template)=>{let keyFn;if(template===void 0){template=keyFnOrTemplate}else if(keyFnOrTemplate!==void 0){keyFn=keyFnOrTemplate}return containerPart=>{if(!(containerPart instanceof NodePart)){throw new Error("repeat can only be used in text bindings")}// Old part & key lists are retrieved from the last update
// (associated with the part for this instance of the directive)
const oldParts=partListCache.get(containerPart)||[],oldKeys=keyListCache.get(containerPart)||[],newParts=[],newValues=[],newKeys=[];let index=0;for(const item of items){newKeys[index]=keyFn?keyFn(item,index):index;newValues[index]=template(item,index);index++}// Maps from key to index for current and previous update; these
// are generated lazily only when needed as a performance
// optimization, since they are only required for multiple
// non-contiguous changes in the list, which are less common.
let newKeyToIndexMap,oldKeyToIndexMap,oldHead=0,oldTail=oldParts.length-1,newHead=0,newTail=newValues.length-1;// Overview of O(n) reconciliation algorithm (general approach
// based on ideas found in ivi, vue, snabbdom, etc.):
//
// * We start with the list of old parts and new values (and
//   arrays of their respective keys), head/tail pointers into
//   each, and we build up the new list of parts by updating
//   (and when needed, moving) old parts or creating new ones.
//   The initial scenario might look like this (for brevity of
//   the diagrams, the numbers in the array reflect keys
//   associated with the old parts or new values, although keys
//   and parts/values are actually stored in parallel arrays
//   indexed using the same head/tail pointers):
//
//      oldHead v                 v oldTail
//   oldKeys:  [0, 1, 2, 3, 4, 5, 6]
//   newParts: [ ,  ,  ,  ,  ,  ,  ]
//   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new
//                                      item order
//      newHead ^                 ^ newTail
//
// * Iterate old & new lists from both sides, updating,
//   swapping, or removing parts at the head/tail locations
//   until neither head nor tail can move.
//
// * Example below: keys at head pointers match, so update old
//   part 0 in-place (no need to move it) and record part 0 in
//   the `newParts` list. The last thing we do is advance the
//   `oldHead` and `newHead` pointers (will be reflected in the
//   next diagram).
//
//      oldHead v                 v oldTail
//   oldKeys:  [0, 1, 2, 3, 4, 5, 6]
//   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0
//   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead
//                                      & newHead
//      newHead ^                 ^ newTail
//
// * Example below: head pointers don't match, but tail
//   pointers do, so update part 6 in place (no need to move
//   it), and record part 6 in the `newParts` list. Last,
//   advance the `oldTail` and `oldHead` pointers.
//
//         oldHead v              v oldTail
//   oldKeys:  [0, 1, 2, 3, 4, 5, 6]
//   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6
//   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail
//                                      & newTail
//         newHead ^              ^ newTail
//
// * If neither head nor tail match; next check if one of the
//   old head/tail items was removed. We first need to generate
//   the reverse map of new keys to index (`newKeyToIndexMap`),
//   which is done once lazily as a performance optimization,
//   since we only hit this case if multiple non-contiguous
//   changes were made. Note that for contiguous removal
//   anywhere in the list, the head and tails would advance
//   from either end and pass each other before we get to this
//   case and removals would be handled in the final while loop
//   without needing to generate the map.
//
// * Example below: The key at `oldTail` was removed (no longer
//   in the `newKeyToIndexMap`), so remove that part from the
//   DOM and advance just the `oldTail` pointer.
//
//         oldHead v           v oldTail
//   oldKeys:  [0, 1, 2, 3, 4, 5, 6]
//   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove
//   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail
//         newHead ^           ^ newTail
//
// * Once head and tail cannot move, any mismatches are due to
//   either new or moved items; if a new key is in the previous
//   "old key to old index" map, move the old part to the new
//   location, otherwise create and insert a new part. Note
//   that when moving an old part we null its position in the
//   oldParts array if it lies between the head and tail so we
//   know to skip it when the pointers get there.
//
// * Example below: neither head nor tail match, and neither
//   were removed; so find the `newHead` key in the
//   `oldKeyToIndexMap`, and move that old part's DOM into the
//   next head position (before `oldParts[oldHead]`). Last,
//   null the part in the `oldPart` array since it was
//   somewhere in the remaining oldParts still to be scanned
//   (between the head and tail pointers) so that we know to
//   skip that old part on future iterations.
//
//         oldHead v        v oldTail
//   oldKeys:  [0, 1, -, 3, 4, 5, 6]
//   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2
//   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance
//                                      newHead
//         newHead ^           ^ newTail
//
// * Note that for moves/insertions like the one above, a part
//   inserted at the head pointer is inserted before the
//   current `oldParts[oldHead]`, and a part inserted at the
//   tail pointer is inserted before `newParts[newTail+1]`. The
//   seeming asymmetry lies in the fact that new parts are
//   moved into place outside in, so to the right of the head
//   pointer are old parts, and to the right of the tail
//   pointer are new parts.
//
// * We always restart back from the top of the algorithm,
//   allowing matching and simple updates in place to
//   continue...
//
// * Example below: the head pointers once again match, so
//   simply update part 1 and record it in the `newParts`
//   array.  Last, advance both head pointers.
//
//         oldHead v        v oldTail
//   oldKeys:  [0, 1, -, 3, 4, 5, 6]
//   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1
//   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead
//                                      & newHead
//            newHead ^        ^ newTail
//
// * As mentioned above, items that were moved as a result of
//   being stuck (the final else clause in the code below) are
//   marked with null, so we always advance old pointers over
//   these so we're comparing the next actual old value on
//   either end.
//
// * Example below: `oldHead` is null (already placed in
//   newParts), so advance `oldHead`.
//
//            oldHead v     v oldTail
//   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:
//   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead
//   newKeys:  [0, 2, 1, 4, 3, 7, 6]
//               newHead ^     ^ newTail
//
// * Note it's not critical to mark old parts as null when they
//   are moved from head to tail or tail to head, since they
//   will be outside the pointer range and never visited again.
//
// * Example below: Here the old tail key matches the new head
//   key, so the part at the `oldTail` position and move its
//   DOM to the new head position (before `oldParts[oldHead]`).
//   Last, advance `oldTail` and `newHead` pointers.
//
//               oldHead v  v oldTail
//   oldKeys:  [0, 1, -, 3, 4, 5, 6]
//   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new
//   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,
//                                     advance oldTail & newHead
//               newHead ^     ^ newTail
//
// * Example below: Old and new head keys match, so update the
//   old head part in place, and advance the `oldHead` and
//   `newHead` pointers.
//
//               oldHead v oldTail
//   oldKeys:  [0, 1, -, 3, 4, 5, 6]
//   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3
//   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &
//                                      newHead
//                  newHead ^  ^ newTail
//
// * Once the new or old pointers move past each other then all
//   we have left is additions (if old list exhausted) or
//   removals (if new list exhausted). Those are handled in the
//   final while loops at the end.
//
// * Example below: `oldHead` exceeded `oldTail`, so we're done
//   with the main loop.  Create the remaining part and insert
//   it at the new head position, and the update is complete.
//
//                   (oldHead > oldTail)
//   oldKeys:  [0, 1, -, 3, 4, 5, 6]
//   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7
//   newKeys:  [0, 2, 1, 4, 3, 7, 6]
//                     newHead ^ newTail
//
// * Note that the order of the if/else clauses is not
//   important to the algorithm, as long as the null checks
//   come first (to ensure we're always working on valid old
//   parts) and that the final else clause comes last (since
//   that's where the expensive moves occur). The order of
//   remaining clauses is is just a simple guess at which cases
//   will be most common.
//
// * TODO(kschaaf) Note, we could calculate the longest
//   increasing subsequence (LIS) of old items in new position,
//   and only move those not in the LIS set. However that costs
//   O(nlogn) time and adds a bit more code, and only helps
//   make rare types of mutations require fewer moves. The
//   above handles removes, adds, reversal, swaps, and single
//   moves of contiguous items in linear time, in the minimum
//   number of moves. As the number of multiple moves where LIS
//   might help approaches a random shuffle, the LIS
//   optimization becomes less helpful, so it seems not worth
//   the code at this point. Could reconsider if a compelling
//   case arises.
while(oldHead<=oldTail&&newHead<=newTail){if(null===oldParts[oldHead]){// `null` means old part at head has already been used
// below; skip
oldHead++}else if(null===oldParts[oldTail]){// `null` means old part at tail has already been used
// below; skip
oldTail--}else if(oldKeys[oldHead]===newKeys[newHead]){// Old head matches new head; update in place
newParts[newHead]=updatePart(oldParts[oldHead],newValues[newHead]);oldHead++;newHead++}else if(oldKeys[oldTail]===newKeys[newTail]){// Old tail matches new tail; update in place
newParts[newTail]=updatePart(oldParts[oldTail],newValues[newTail]);oldTail--;newTail--}else if(oldKeys[oldHead]===newKeys[newTail]){// Old head matches new tail; update and move to new tail
newParts[newTail]=updatePart(oldParts[oldHead],newValues[newTail]);insertPartBefore(containerPart,oldParts[oldHead],newParts[newTail+1]);oldHead++;newTail--}else if(oldKeys[oldTail]===newKeys[newHead]){// Old tail matches new head; update and move to new head
newParts[newHead]=updatePart(oldParts[oldTail],newValues[newHead]);insertPartBefore(containerPart,oldParts[oldTail],oldParts[oldHead]);oldTail--;newHead++}else{if(newKeyToIndexMap===void 0){// Lazily generate key-to-index maps, used for removals &
// moves below
newKeyToIndexMap=generateMap(newKeys,newHead,newTail);oldKeyToIndexMap=generateMap(oldKeys,oldHead,oldTail)}if(!newKeyToIndexMap.has(oldKeys[oldHead])){// Old head is no longer in new list; remove
removePart(oldParts[oldHead]);oldHead++}else if(!newKeyToIndexMap.has(oldKeys[oldTail])){// Old tail is no longer in new list; remove
removePart(oldParts[oldTail]);oldTail--}else{// Any mismatches at this point are due to additions or
// moves; see if we have an old part we can reuse and move
// into place
const oldIndex=oldKeyToIndexMap.get(newKeys[newHead]),oldPart=oldIndex!==void 0?oldParts[oldIndex]:null;if(null===oldPart){// No old part for this value; create a new one and
// insert it
const newPart=createAndInsertPart(containerPart,oldParts[oldHead]);updatePart(newPart,newValues[newHead]);newParts[newHead]=newPart}else{// Reuse old part
newParts[newHead]=updatePart(oldPart,newValues[newHead]);insertPartBefore(containerPart,oldPart,oldParts[oldHead]);// This marks the old part as having been used, so that
// it will be skipped in the first two checks above
oldParts[oldIndex]=null}newHead++}}}// Add parts for any remaining new values
while(newHead<=newTail){// For all remaining additions, we insert before last new
// tail, since old pointers are no longer valid
const newPart=createAndInsertPart(containerPart,newParts[newTail+1]);updatePart(newPart,newValues[newHead]);newParts[newHead++]=newPart}// Remove any remaining unused old parts
while(oldHead<=oldTail){const oldPart=oldParts[oldHead++];if(null!==oldPart){removePart(oldPart)}}// Save order of new parts for next round
partListCache.set(containerPart,newParts);keyListCache.set(containerPart,newKeys)}});_exports.repeat=repeat;var repeat$1={repeat:repeat};// unsafeHTML directive, and the DocumentFragment that was last set as a value.
// The DocumentFragment is used as a unique key to check if the last value
// rendered to the part was with unsafeHTML. If not, we'll always re-render the
// value passed to unsafeHTML.
_exports.$repeat=repeat$1;const previousValues=new WeakMap,unsafeHTML=directive(value=>part=>{if(!(part instanceof NodePart)){throw new Error("unsafeHTML can only be used in text bindings")}const previousValue=previousValues.get(part);if(previousValue!==void 0&&isPrimitive(value)&&value===previousValue.value&&part.value===previousValue.fragment){return}const template=document.createElement("template");template.innerHTML=value;// innerHTML casts to string internally
const fragment=document.importNode(template.content,!0);part.setValue(fragment);previousValues.set(part,{value,fragment})});/**
                                       * Renders the result as HTML, rather than text.
                                       *
                                       * Note, this is unsafe to use with any user-provided input that hasn't been
                                       * sanitized or escaped, as it may lead to cross-site-scripting
                                       * vulnerabilities.
                                       */_exports.unsafeHTML=unsafeHTML;var unsafeHtml={unsafeHTML:unsafeHTML};/**
   @license
   Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */ /**
        This is a JavaScript mixin that you can use to connect a Custom Element base
        class to a Redux store. The `stateChanged(state)` method will be called when
        the state is updated.
      
        Example:
      
            import { connect } from 'pwa-helpers/connect-mixin.js';
      
            class MyElement extends connect(store)(HTMLElement) {
              stateChanged(state) {
                this.textContent = state.data.count.toString();
              }
            }
      */_exports.$unsafeHtml=unsafeHtml;const connect=store=>baseElement=>class extends baseElement{connectedCallback(){if(super.connectedCallback){super.connectedCallback()}this._storeUnsubscribe=store.subscribe(()=>this.stateChanged(store.getState()));this.stateChanged(store.getState())}disconnectedCallback(){this._storeUnsubscribe();if(super.disconnectedCallback){super.disconnectedCallback()}}/**
     * The `stateChanged(state)` method will be called when the state is updated.
     */stateChanged(_state){}};_exports.connect=connect;var connectMixin={connect:connect};/**
   @license
   Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */ /**
        A Redux store enhancer that lets you lazy-install reducers after the store
        has booted up. Use this if your application lazy-loads routes that are connected
        to a Redux store.
      
        Example:
      
            import { combineReducers } from 'redux';
            import { lazyReducerEnhancer } from 'pwa-helpers/lazy-reducer-enhancer.js';
            import someReducer from './reducers/someReducer.js';
      
            export const store = createStore(
              (state, action) => state,
              compose(lazyReducerEnhancer(combineReducers))
            );
      
        Then, in your page/element, you can lazy load a specific reducer with:
      
            store.addReducers({
              someReducer
            });
      */_exports.$connectMixin=connectMixin;const lazyReducerEnhancer=combineReducers=>{const enhancer=nextCreator=>{return(origReducer,preloadedState)=>{let lazyReducers={};const nextStore=nextCreator(origReducer,preloadedState);return Object.assign({},nextStore,{addReducers(newReducers){const combinedReducerMap=Object.assign({},lazyReducers,newReducers);this.replaceReducer(combineReducers(lazyReducers=combinedReducerMap))}})}};return enhancer};_exports.lazyReducerEnhancer=lazyReducerEnhancer;var lazyReducerEnhancer$1={lazyReducerEnhancer:lazyReducerEnhancer};/**
   @license
   Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */ /**
        Utility method that calls a callback whenever a media-query matches in response
        to the viewport size changing. The callback should take a boolean parameter
        (with `true` meaning the media query is matched).
      
        Example:
      
            import { installMediaQueryWatcher } from 'pwa-helpers/media-query.js';
      
            installMediaQueryWatcher(`(min-width: 600px)`, (matches) => {
              console.log(matches ? 'wide screen' : 'narrow sreen');
            });
      */_exports.$lazyReducerEnhancer=lazyReducerEnhancer$1;const installMediaQueryWatcher=(mediaQuery,layoutChangedCallback)=>{let mql=window.matchMedia(mediaQuery);mql.addListener(e=>layoutChangedCallback(e.matches));layoutChangedCallback(mql.matches)};_exports.installMediaQueryWatcher=installMediaQueryWatcher;var mediaQuery={installMediaQueryWatcher:installMediaQueryWatcher};/**
   @license
   Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */ /**
        Utility method that updates the page's open graph and Twitter card metadata.
        It takes an object as a parameter with the following properties:
        title | description | url | image.
      
        If the `url` is not specified, `window.location.href` will be used; for
        all other properties, if they aren't specified, then that metadata field will not
        be set.
      
        Example (in your top level element or document, or in the router callback):
      
            import { updateMetadata } from 'pwa-helpers/metadata.js';
      
            updateMetadata({
              title: 'My App - view 1',
              description: 'This is my sample app',
              url: window.location.href,
              image: '/assets/view1-hero.png'
            });
      
      */_exports.$mediaQuery=mediaQuery;const updateMetadata=({title,description,url,image,imageAlt})=>{if(title){document.title=title;setMetaTag("property","og:title",title)}if(description){setMetaTag("name","description",description);setMetaTag("property","og:description",description)}if(image){setMetaTag("property","og:image",image)}if(imageAlt){setMetaTag("property","og:image:alt",imageAlt)}url=url||window.location.href;setMetaTag("property","og:url",url)};/**
     Utility method to create or update the content of a meta tag based on an
     attribute name/value pair.
   
     Example (in your top level element or document, or in the router callback):
   
         import { setMetaTag } from 'pwa-helpers/metadata.js';
   
         setMetaTag('name', 'twitter:card', 'summary');
         
     This would create the following meta tag in the head of the document (or
     update the content attribute if a meta tag with name="twitter:card" exists):
   
         <meta name="twitter:card" content="summary">
   
   */_exports.updateMetadata=updateMetadata;function setMetaTag(attrName,attrValue,content){let element=document.head.querySelector(`meta[${attrName}="${attrValue}"]`);if(!element){element=document.createElement("meta");element.setAttribute(attrName,attrValue);document.head.appendChild(element)}element.setAttribute("content",content||"")}var metadata={updateMetadata:updateMetadata,setMetaTag:setMetaTag};/**
   @license
   Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */ /**
        Utility method that calls a callback whenever the network connectivity of the app changes.
        The callback should take a boolean parameter (with `true` meaning
        the network is offline, and `false` meaning online)
      
        Example:
      
            import { installOfflineWatcher } from 'pwa-helpers/network.js';
      
            installOfflineWatcher((offline) => {
              console.log('You are ' + offline ? ' offline' : 'online');
            });
      */_exports.$metadata=metadata;const installOfflineWatcher=offlineUpdatedCallback=>{window.addEventListener("online",()=>offlineUpdatedCallback(!1));window.addEventListener("offline",()=>offlineUpdatedCallback(!0));offlineUpdatedCallback(!1===navigator.onLine)};_exports.installOfflineWatcher=installOfflineWatcher;var network={installOfflineWatcher:installOfflineWatcher};/**
   @license
   Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */ /**
        Basic router that calls a callback whenever the location is updated.
      
        Example:
      
            import { installRouter } from 'pwa-helpers/router.js';
      
            installRouter((location) => handleNavigation(location));
      
        For example, if you're using this router in a Redux-connected component,
        you could dispatch an action in the callback:
      
            import { installRouter } from 'pwa-helpers/router.js';
            import { navigate } from '../actions/app.js';
      
            installRouter((location) => store.dispatch(navigate(location)))
      
        If you need to force a navigation to a new location programmatically, you can
        do so by pushing a new state using the History API, and then manually
        calling the callback with the new location:
      
            window.history.pushState({}, '', '/new-route');
            handleNavigation(window.location);
      
        Optionally, you can use the second argument to read the event that caused the
        navigation. For example, you may want to scroll to top only after a link click.
      
            installRouter((location, event) => {
              // Only scroll to top on link clicks, not popstate events.
              if (event && event.type === 'click') {
                window.scrollTo(0, 0);
              }
              handleNavigation(location);
            });
      */_exports.$network=network;const installRouter=locationUpdatedCallback=>{document.body.addEventListener("click",e=>{if(e.defaultPrevented||0!==e.button||e.metaKey||e.ctrlKey||e.shiftKey)return;const anchor=e.composedPath().filter(n=>"A"===n.tagName)[0];if(!anchor||anchor.target||anchor.hasAttribute("download")||"external"===anchor.getAttribute("rel"))return;const href=anchor.href;if(!href||-1!==href.indexOf("mailto:"))return;const location=window.location,origin=location.origin||location.protocol+"//"+location.host;if(0!==href.indexOf(origin))return;e.preventDefault();if(href!==location.href){window.history.pushState({},"",href);locationUpdatedCallback(location,e)}});window.addEventListener("popstate",e=>locationUpdatedCallback(window.location,e));locationUpdatedCallback(window.location,null/* event */)};_exports.installRouter=installRouter;var router={installRouter:installRouter};_exports.$router=router;function createThunkMiddleware(extraArgument){return function(_ref){var dispatch=_ref.dispatch,getState=_ref.getState;return function(next){return function(action){if("function"===typeof action){return action(dispatch,getState,extraArgument)}return next(action)}}}}var thunk=createThunkMiddleware();_exports.$indexDefault$209=thunk;thunk.withExtraArgument=createThunkMiddleware;var index$3k={default:thunk};_exports.$index$212=index$3k;function symbolObservablePonyfill(root){var result,Symbol=root.Symbol;if("function"===typeof Symbol){if(Symbol.observable){result=Symbol.observable}else{result=Symbol("observable");Symbol.observable=result}}else{result="@@observable"}return result};var ponyfill={default:symbolObservablePonyfill};_exports.$ponyfill=ponyfill;var root$1;if("undefined"!==typeof self){root$1=self}else if("undefined"!==typeof window){root$1=window}else if("undefined"!==typeof global){root$1=global}else if("undefined"!==typeof module){root$1=module}else{root$1=Function("return this")()}var result=symbolObservablePonyfill(root$1);_exports.$indexDefault$210=result;var index$3l={default:result};_exports.$index$214=index$3l;var randomString=function randomString(){return Math.random().toString(36).substring(7).split("").join(".")},ActionTypes={INIT:"@@redux/INIT"+randomString(),REPLACE:"@@redux/REPLACE"+randomString(),PROBE_UNKNOWN_ACTION:function PROBE_UNKNOWN_ACTION(){return"@@redux/PROBE_UNKNOWN_ACTION"+randomString()}};_exports.__DO_NOT_USE__ActionTypes=ActionTypes;/**
    * @param {any} obj The object to inspect.
    * @returns {boolean} True if the argument appears to be a plain object.
    */function isPlainObject(obj){if("object"!==typeof obj||null===obj)return!1;var proto=obj;while(null!==Object.getPrototypeOf(proto)){proto=Object.getPrototypeOf(proto)}return Object.getPrototypeOf(obj)===proto}/**
   * Creates a Redux store that holds the state tree.
   * The only way to change the data in the store is to call `dispatch()` on it.
   *
   * There should only be a single store in your app. To specify how different
   * parts of the state tree respond to actions, you may combine several reducers
   * into a single reducer function by using `combineReducers`.
   *
   * @param {Function} reducer A function that returns the next state tree, given
   * the current state tree and the action to handle.
   *
   * @param {any} [preloadedState] The initial state. You may optionally specify it
   * to hydrate the state from the server in universal apps, or to restore a
   * previously serialized user session.
   * If you use `combineReducers` to produce the root reducer function, this must be
   * an object with the same shape as `combineReducers` keys.
   *
   * @param {Function} [enhancer] The store enhancer. You may optionally specify it
   * to enhance the store with third-party capabilities such as middleware,
   * time travel, persistence, etc. The only store enhancer that ships with Redux
   * is `applyMiddleware()`.
   *
   * @returns {Store} A Redux store that lets you read the state, dispatch actions
   * and subscribe to changes.
   */function createStore(reducer,preloadedState,enhancer){var _ref2;if("function"===typeof preloadedState&&"function"===typeof enhancer||"function"===typeof enhancer&&"function"===typeof arguments[3]){throw new Error("It looks like you are passing several store enhancers to "+"createStore(). This is not supported. Instead, compose them "+"together to a single function.")}if("function"===typeof preloadedState&&"undefined"===typeof enhancer){enhancer=preloadedState;preloadedState=void 0}if("undefined"!==typeof enhancer){if("function"!==typeof enhancer){throw new Error("Expected the enhancer to be a function.")}return enhancer(createStore)(reducer,preloadedState)}if("function"!==typeof reducer){throw new Error("Expected the reducer to be a function.")}var currentReducer=reducer,currentState=preloadedState,currentListeners=[],nextListeners=currentListeners,isDispatching=!1;/**
                              * This makes a shallow copy of currentListeners so we can use
                              * nextListeners as a temporary list while dispatching.
                              *
                              * This prevents any bugs around consumers calling
                              * subscribe/unsubscribe in the middle of a dispatch.
                              */function ensureCanMutateNextListeners(){if(nextListeners===currentListeners){nextListeners=currentListeners.slice()}}/**
     * Reads the state tree managed by the store.
     *
     * @returns {any} The current state tree of your application.
     */function getState(){if(isDispatching){throw new Error("You may not call store.getState() while the reducer is executing. "+"The reducer has already received the state as an argument. "+"Pass it down from the top reducer instead of reading it from the store.")}return currentState}/**
     * Adds a change listener. It will be called any time an action is dispatched,
     * and some part of the state tree may potentially have changed. You may then
     * call `getState()` to read the current state tree inside the callback.
     *
     * You may call `dispatch()` from a change listener, with the following
     * caveats:
     *
     * 1. The subscriptions are snapshotted just before every `dispatch()` call.
     * If you subscribe or unsubscribe while the listeners are being invoked, this
     * will not have any effect on the `dispatch()` that is currently in progress.
     * However, the next `dispatch()` call, whether nested or not, will use a more
     * recent snapshot of the subscription list.
     *
     * 2. The listener should not expect to see all state changes, as the state
     * might have been updated multiple times during a nested `dispatch()` before
     * the listener is called. It is, however, guaranteed that all subscribers
     * registered before the `dispatch()` started will be called with the latest
     * state by the time it exits.
     *
     * @param {Function} listener A callback to be invoked on every dispatch.
     * @returns {Function} A function to remove this change listener.
     */function subscribe(listener){if("function"!==typeof listener){throw new Error("Expected the listener to be a function.")}if(isDispatching){throw new Error("You may not call store.subscribe() while the reducer is executing. "+"If you would like to be notified after the store has been updated, subscribe from a "+"component and invoke store.getState() in the callback to access the latest state. "+"See https://redux.js.org/api-reference/store#subscribe(listener) for more details.")}var isSubscribed=!0;ensureCanMutateNextListeners();nextListeners.push(listener);return function unsubscribe(){if(!isSubscribed){return}if(isDispatching){throw new Error("You may not unsubscribe from a store listener while the reducer is executing. "+"See https://redux.js.org/api-reference/store#subscribe(listener) for more details.")}isSubscribed=!1;ensureCanMutateNextListeners();var index=nextListeners.indexOf(listener);nextListeners.splice(index,1)}}/**
     * Dispatches an action. It is the only way to trigger a state change.
     *
     * The `reducer` function, used to create the store, will be called with the
     * current state tree and the given `action`. Its return value will
     * be considered the **next** state of the tree, and the change listeners
     * will be notified.
     *
     * The base implementation only supports plain object actions. If you want to
     * dispatch a Promise, an Observable, a thunk, or something else, you need to
     * wrap your store creating function into the corresponding middleware. For
     * example, see the documentation for the `redux-thunk` package. Even the
     * middleware will eventually dispatch plain object actions using this method.
     *
     * @param {Object} action A plain object representing “what changed”. It is
     * a good idea to keep actions serializable so you can record and replay user
     * sessions, or use the time travelling `redux-devtools`. An action must have
     * a `type` property which may not be `undefined`. It is a good idea to use
     * string constants for action types.
     *
     * @returns {Object} For convenience, the same action object you dispatched.
     *
     * Note that, if you use a custom middleware, it may wrap `dispatch()` to
     * return something else (for example, a Promise you can await).
     */function dispatch(action){if(!isPlainObject(action)){throw new Error("Actions must be plain objects. "+"Use custom middleware for async actions.")}if("undefined"===typeof action.type){throw new Error("Actions may not have an undefined \"type\" property. "+"Have you misspelled a constant?")}if(isDispatching){throw new Error("Reducers may not dispatch actions.")}try{isDispatching=!0;currentState=currentReducer(currentState,action)}finally{isDispatching=!1}for(var listeners=currentListeners=nextListeners,i=0,listener;i<listeners.length;i++){listener=listeners[i];listener()}return action}/**
     * Replaces the reducer currently used by the store to calculate the state.
     *
     * You might need this if your app implements code splitting and you want to
     * load some of the reducers dynamically. You might also need this if you
     * implement a hot reloading mechanism for Redux.
     *
     * @param {Function} nextReducer The reducer for the store to use instead.
     * @returns {void}
     */function replaceReducer(nextReducer){if("function"!==typeof nextReducer){throw new Error("Expected the nextReducer to be a function.")}currentReducer=nextReducer;// This action has a similiar effect to ActionTypes.INIT.
// Any reducers that existed in both the new and old rootReducer
// will receive the previous state. This effectively populates
// the new state tree with any relevant data from the old one.
dispatch({type:ActionTypes.REPLACE})}/**
     * Interoperability point for observable/reactive libraries.
     * @returns {observable} A minimal observable of state changes.
     * For more information, see the observable proposal:
     * https://github.com/tc39/proposal-observable
     */function observable(){var _ref,outerSubscribe=subscribe;return _ref={/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */subscribe:function subscribe(observer){if("object"!==typeof observer||null===observer){throw new TypeError("Expected the observer to be an object.")}function observeState(){if(observer.next){observer.next(getState())}}observeState();var unsubscribe=outerSubscribe(observeState);return{unsubscribe:unsubscribe}}},_ref[result]=function(){return this},_ref}// When a store is created, an "INIT" action is dispatched so that every
// reducer returns their initial state. This effectively populates
// the initial state tree.
dispatch({type:ActionTypes.INIT});return _ref2={dispatch:dispatch,subscribe:subscribe,getState:getState,replaceReducer:replaceReducer},_ref2[result]=observable,_ref2}/**
   * Prints a warning in the console if it exists.
   *
   * @param {String} message The warning message.
   * @returns {void}
   */function warning(message){/* eslint-disable no-console */if("undefined"!==typeof console&&"function"===typeof console.error){console.error(message)}/* eslint-enable no-console */try{// This error was thrown as a convenience so that if you enable
// "break on all exceptions" in your console,
// it would pause the execution at this line.
throw new Error(message)}catch(e){}// eslint-disable-line no-empty
}function getUndefinedStateErrorMessage(key,action){var actionType=action&&action.type,actionDescription=actionType&&"action \""+(actionType+"")+"\""||"an action";return"Given "+actionDescription+", reducer \""+key+"\" returned undefined. "+"To ignore an action, you must explicitly return the previous state. "+"If you want this reducer to hold no value, you can return null instead of undefined."}function getUnexpectedStateShapeWarningMessage(inputState,reducers,action,unexpectedKeyCache){var reducerKeys=Object.keys(reducers),argumentName=action&&action.type===ActionTypes.INIT?"preloadedState argument passed to createStore":"previous state received by the reducer";if(0===reducerKeys.length){return"Store does not have a valid reducer. Make sure the argument passed "+"to combineReducers is an object whose values are reducers."}if(!isPlainObject(inputState)){return"The "+argumentName+" has unexpected type of \""+{}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1]+"\". Expected argument to be an object with the following "+("keys: \""+reducerKeys.join("\", \"")+"\"")}var unexpectedKeys=Object.keys(inputState).filter(function(key){return!reducers.hasOwnProperty(key)&&!unexpectedKeyCache[key]});unexpectedKeys.forEach(function(key){unexpectedKeyCache[key]=!0});if(action&&action.type===ActionTypes.REPLACE)return;if(0<unexpectedKeys.length){return"Unexpected "+(1<unexpectedKeys.length?"keys":"key")+" "+("\""+unexpectedKeys.join("\", \"")+"\" found in "+argumentName+". ")+"Expected to find one of the known reducer keys instead: "+("\""+reducerKeys.join("\", \"")+"\". Unexpected keys will be ignored.")}}function assertReducerShape(reducers){Object.keys(reducers).forEach(function(key){var reducer=reducers[key],initialState=reducer(void 0,{type:ActionTypes.INIT});if("undefined"===typeof initialState){throw new Error("Reducer \""+key+"\" returned undefined during initialization. "+"If the state passed to the reducer is undefined, you must "+"explicitly return the initial state. The initial state may "+"not be undefined. If you don't want to set a value for this reducer, "+"you can use null instead of undefined.")}if("undefined"===typeof reducer(void 0,{type:ActionTypes.PROBE_UNKNOWN_ACTION()})){throw new Error("Reducer \""+key+"\" returned undefined when probed with a random type. "+("Don't try to handle "+ActionTypes.INIT+" or other actions in \"redux/*\" ")+"namespace. They are considered private. Instead, you must return the "+"current state for any unknown actions, unless it is undefined, "+"in which case you must return the initial state, regardless of the "+"action type. The initial state may not be undefined, but can be null.")}})}/**
   * Turns an object whose values are different reducer functions, into a single
   * reducer function. It will call every child reducer, and gather their results
   * into a single state object, whose keys correspond to the keys of the passed
   * reducer functions.
   *
   * @param {Object} reducers An object whose values correspond to different
   * reducer functions that need to be combined into one. One handy way to obtain
   * it is to use ES6 `import * as reducers` syntax. The reducers may never return
   * undefined for any action. Instead, they should return their initial state
   * if the state passed to them was undefined, and the current state for any
   * unrecognized action.
   *
   * @returns {Function} A reducer function that invokes every reducer inside the
   * passed object, and builds a state object with the same shape.
   */function combineReducers(reducers){for(var reducerKeys=Object.keys(reducers),finalReducers={},i=0,key;i<reducerKeys.length;i++){key=reducerKeys[i];if("production"!==process.env.NODE_ENV){if("undefined"===typeof reducers[key]){warning("No reducer provided for key \""+key+"\"")}}if("function"===typeof reducers[key]){finalReducers[key]=reducers[key]}}var finalReducerKeys=Object.keys(finalReducers),unexpectedKeyCache;// This is used to make sure we don't warn about the same
// keys multiple times.
if("production"!==process.env.NODE_ENV){unexpectedKeyCache={}}var shapeAssertionError;try{assertReducerShape(finalReducers)}catch(e){shapeAssertionError=e}return function combination(state,action){if(void 0===state){state={}}if(shapeAssertionError){throw shapeAssertionError}if("production"!==process.env.NODE_ENV){var warningMessage=getUnexpectedStateShapeWarningMessage(state,finalReducers,action,unexpectedKeyCache);if(warningMessage){warning(warningMessage)}}for(var hasChanged=!1,nextState={},_i=0;_i<finalReducerKeys.length;_i++){var _key=finalReducerKeys[_i],reducer=finalReducers[_key],previousStateForKey=state[_key],nextStateForKey=reducer(previousStateForKey,action);if("undefined"===typeof nextStateForKey){var errorMessage=getUndefinedStateErrorMessage(_key,action);throw new Error(errorMessage)}nextState[_key]=nextStateForKey;hasChanged=hasChanged||nextStateForKey!==previousStateForKey}return hasChanged?nextState:state}}function bindActionCreator(actionCreator,dispatch){return function(){return dispatch(actionCreator.apply(this,arguments))}}/**
   * Turns an object whose values are action creators, into an object with the
   * same keys, but with every function wrapped into a `dispatch` call so they
   * may be invoked directly. This is just a convenience method, as you can call
   * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
   *
   * For convenience, you can also pass an action creator as the first argument,
   * and get a dispatch wrapped function in return.
   *
   * @param {Function|Object} actionCreators An object whose values are action
   * creator functions. One handy way to obtain it is to use ES6 `import * as`
   * syntax. You may also pass a single function.
   *
   * @param {Function} dispatch The `dispatch` function available on your Redux
   * store.
   *
   * @returns {Function|Object} The object mimicking the original object, but with
   * every action creator wrapped into the `dispatch` call. If you passed a
   * function as `actionCreators`, the return value will also be a single
   * function.
   */function bindActionCreators(actionCreators,dispatch){if("function"===typeof actionCreators){return bindActionCreator(actionCreators,dispatch)}if("object"!==typeof actionCreators||null===actionCreators){throw new Error("bindActionCreators expected an object or a function, instead received "+(null===actionCreators?"null":typeof actionCreators)+". "+"Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?")}var boundActionCreators={};for(var key in actionCreators){var actionCreator=actionCreators[key];if("function"===typeof actionCreator){boundActionCreators[key]=bindActionCreator(actionCreator,dispatch)}}return boundActionCreators}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0})}else{obj[key]=value}return obj}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){keys.push.apply(keys,Object.getOwnPropertySymbols(object))}if(enumerableOnly)keys=keys.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable});return keys}function _objectSpread2(target){for(var i=1,source;i<arguments.length;i++){source=null!=arguments[i]?arguments[i]:{};if(i%2){ownKeys(source,!0).forEach(function(key){_defineProperty(target,key,source[key])})}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source))}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}}return target}/**
   * Composes single-argument functions from right to left. The rightmost
   * function can take multiple arguments as it provides the signature for
   * the resulting composite function.
   *
   * @param {...Function} funcs The functions to compose.
   * @returns {Function} A function obtained by composing the argument functions
   * from right to left. For example, compose(f, g, h) is identical to doing
   * (...args) => f(g(h(...args))).
   */function compose(){for(var _len=arguments.length,funcs=Array(_len),_key=0;_key<_len;_key++){funcs[_key]=arguments[_key]}if(0===funcs.length){return function(arg){return arg}}if(1===funcs.length){return funcs[0]}return funcs.reduce(function(a,b){return function(){return a(b.apply(void 0,arguments))}})}/**
   * Creates a store enhancer that applies middleware to the dispatch method
   * of the Redux store. This is handy for a variety of tasks, such as expressing
   * asynchronous actions in a concise manner, or logging every action payload.
   *
   * See `redux-thunk` package as an example of the Redux middleware.
   *
   * Because middleware is potentially asynchronous, this should be the first
   * store enhancer in the composition chain.
   *
   * Note that each middleware will be given the `dispatch` and `getState` functions
   * as named arguments.
   *
   * @param {...Function} middlewares The middleware chain to be applied.
   * @returns {Function} A store enhancer applying the middleware.
   */function applyMiddleware(){for(var _len=arguments.length,middlewares=Array(_len),_key=0;_key<_len;_key++){middlewares[_key]=arguments[_key]}return function(createStore){return function(){var store=createStore.apply(void 0,arguments),_dispatch=function dispatch(){throw new Error("Dispatching while constructing your middleware is not allowed. "+"Other middleware would not be applied to this dispatch.")},middlewareAPI={getState:store.getState,dispatch:function dispatch(){return _dispatch.apply(void 0,arguments)}},chain=middlewares.map(function(middleware){return middleware(middlewareAPI)});_dispatch=compose.apply(void 0,chain)(store.dispatch);return _objectSpread2({},store,{dispatch:_dispatch})}}}/*
   * This is a dummy function to check if the function name has been altered by minification.
   * If the function has been minified and NODE_ENV !== 'production', warn the user.
   */function isCrushed(){}if("production"!==process.env.NODE_ENV&&"string"===typeof isCrushed.name&&"isCrushed"!==isCrushed.name){warning("You are currently using minified code outside of NODE_ENV === \"production\". "+"This means that you are running a slower development build of Redux. "+"You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify "+"or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) "+"to ensure you have the correct code for your production build.")}var redux={__DO_NOT_USE__ActionTypes:ActionTypes,applyMiddleware:applyMiddleware,bindActionCreators:bindActionCreators,combineReducers:combineReducers,compose:compose,createStore:createStore};_exports.$redux=redux;function defaultEqualityCheck(a,b){return a===b}function areArgumentsShallowlyEqual(equalityCheck,prev,next){if(null===prev||null===next||prev.length!==next.length){return!1}// Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.
for(var length=prev.length,i=0;i<length;i++){if(!equalityCheck(prev[i],next[i])){return!1}}return!0}function defaultMemoize(func){var equalityCheck=1<arguments.length&&arguments[1]!==void 0?arguments[1]:defaultEqualityCheck,lastArgs=null,lastResult=null;// we reference arguments instead of spreading them for performance reasons
return function(){if(!areArgumentsShallowlyEqual(equalityCheck,lastArgs,arguments)){// apply arguments instead of spreading for performance.
lastResult=func.apply(null,arguments)}lastArgs=arguments;return lastResult}}function getDependencies(funcs){var dependencies=Array.isArray(funcs[0])?funcs[0]:funcs;if(!dependencies.every(function(dep){return"function"===typeof dep})){var dependencyTypes=dependencies.map(function(dep){return typeof dep}).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, "+("instead received the following types: ["+dependencyTypes+"]"))}return dependencies}function createSelectorCreator(memoize){for(var _len=arguments.length,memoizeOptions=Array(1<_len?_len-1:0),_key=1;_key<_len;_key++){memoizeOptions[_key-1]=arguments[_key]}return function(){for(var _len2=arguments.length,funcs=Array(_len2),_key2=0;_key2<_len2;_key2++){funcs[_key2]=arguments[_key2]}var recomputations=0,resultFunc=funcs.pop(),dependencies=getDependencies(funcs),memoizedResultFunc=memoize.apply(void 0,[function(){recomputations++;// apply arguments instead of spreading for performance.
return resultFunc.apply(null,arguments)}].concat(memoizeOptions)),selector=memoize(function(){for(var params=[],length=dependencies.length,i=0;i<length;i++){// apply arguments instead of spreading and mutate a local list of params for performance.
params.push(dependencies[i].apply(null,arguments))}// apply arguments instead of spreading for performance.
return memoizedResultFunc.apply(null,params)});selector.resultFunc=resultFunc;selector.dependencies=dependencies;selector.recomputations=function(){return recomputations};selector.resetRecomputations=function(){return recomputations=0};return selector}}var createSelector=createSelectorCreator(defaultMemoize);_exports.createSelector=createSelector;function createStructuredSelector(selectors){var selectorCreator=1<arguments.length&&arguments[1]!==void 0?arguments[1]:createSelector;if("object"!==typeof selectors){throw new Error("createStructuredSelector expects first argument to be an object "+("where each property is a selector, instead received a "+typeof selectors))}var objectKeys=Object.keys(selectors);return selectorCreator(objectKeys.map(function(key){return selectors[key]}),function(){for(var _len3=arguments.length,values=Array(_len3),_key3=0;_key3<_len3;_key3++){values[_key3]=arguments[_key3]}return values.reduce(function(composition,value,index){composition[objectKeys[index]]=value;return composition},{})})}var index$3m={defaultMemoize:defaultMemoize,createSelectorCreator:createSelectorCreator,createSelector:createSelector,createStructuredSelector:createStructuredSelector};_exports.$index$213=index$3m;const UPDATE_PAGE="UPDATE_PAGE";_exports.UPDATE_PAGE=UPDATE_PAGE;const UPDATE_OFFLINE="UPDATE_OFFLINE";_exports.UPDATE_OFFLINE=UPDATE_OFFLINE;const UPDATE_DRAWER_STATE="UPDATE_DRAWER_STATE";_exports.UPDATE_DRAWER_STATE=UPDATE_DRAWER_STATE;const CLOSE_MODAL="CLOSE_MODAL";_exports.CLOSE_MODAL=CLOSE_MODAL;const OPEN_SNACKBAR="OPEN_SNACKBAR";_exports.OPEN_SNACKBAR=OPEN_SNACKBAR;const CLOSE_SNACKBAR="CLOSE_SNACKBAR";_exports.CLOSE_SNACKBAR=CLOSE_SNACKBAR;const UPDATE_SUBTITLE="UPDATE_SUBTITLE";_exports.UPDATE_SUBTITLE=UPDATE_SUBTITLE;const SET_ANNOUNCER_LABEL="SET_ANNOUNCER_LABEL";_exports.SET_ANNOUNCER_LABEL=SET_ANNOUNCER_LABEL;const CLEAR_ANNOUNCER_LABEL="CLEAR_ANNOUNCER_LABEL";_exports.CLEAR_ANNOUNCER_LABEL=CLEAR_ANNOUNCER_LABEL;const navigate=location=>dispatch=>{// Extract the page name from path.
// Any other info you might want to extract from the path (like page type),
// you can do here.
const pathname=location.pathname,parts=pathname.slice(1).split("/"),page=parts[0]||"home",articleSlug=parts[1];//let query = 'Article';
let query="posts";dispatch(loadPage(page,query,articleSlug));dispatch(updateDrawerState(!1))};_exports.navigate=navigate;const loadPage=(page,query,articleSlug)=>/*#__PURE__*/function(){var _ref3=babelHelpers.asyncToGenerator(function*(dispatch,getState){let module;switch(page){case"home":break;case"blog":module=yield new Promise((res,rej)=>_require.default(["./ts-blog.js"],res,rej)).then(bundle=>bundle&&bundle.$tsBlog||{});dispatch(module.fetchArticles(query));break;case"article":module=yield new Promise((res,rej)=>_require.default(["./ts-article.js"],res,rej)).then(bundle=>bundle&&bundle.$tsArticle||{});yield dispatch(module.fetchArticle(articleSlug));if(isFetchArticleFailed(getState().article)){page="404"}break;case"care":yield new Promise((res,rej)=>_require.default(["./ts-care.js"],res,rej)).then(bundle=>bundle&&bundle.$tsCare||{});break;case"design":yield new Promise((res,rej)=>_require.default(["./ts-design.js"],res,rej)).then(bundle=>bundle&&bundle.$tsDesign||{});break;case"hosting":yield new Promise((res,rej)=>_require.default(["./ts-hosting.js"],res,rej)).then(bundle=>bundle&&bundle.$tsHosting||{});break;case"emergency":yield new Promise((res,rej)=>_require.default(["./ts-emergency.js"],res,rej)).then(bundle=>bundle&&bundle.$tsEmergency||{});break;case"migrations":yield new Promise((res,rej)=>_require.default(["./ts-migrations.js"],res,rej)).then(bundle=>bundle&&bundle.$tsMigrations||{});break;case"pagespeed":yield new Promise((res,rej)=>_require.default(["./ts-pagespeed.js"],res,rej)).then(bundle=>bundle&&bundle.$tsPagespeed||{});break;case"privacy":yield new Promise((res,rej)=>_require.default(["./ts-privacy.js"],res,rej)).then(bundle=>bundle&&bundle.$tsPrivacy||{});break;case"security":yield new Promise((res,rej)=>_require.default(["./ts-security.js"],res,rej)).then(bundle=>bundle&&bundle.$tsSecurity||{});break;case"contact":yield new Promise((res,rej)=>_require.default(["./ts-contact.js"],res,rej)).then(bundle=>bundle&&bundle.$tsContact||{});break;default:page="404";}if("404"===page){new Promise((res,rej)=>_require.default(["./ts-view404.js"],res,rej)).then(bundle=>bundle&&bundle.$tsView404||{})}dispatch(updatePage(page))});return function(_x,_x2){return _ref3.apply(this,arguments)}}(),refreshPage=()=>(dispatch,getState)=>{const state=getState();// load page using the current state
dispatch(loadPage(state.app.page,state.articles&&state.articles.query,state.article&&state.article.slug))};_exports.refreshPage=refreshPage;const updatePage=page=>{return{type:UPDATE_PAGE,page}},isFetchArticleFailed=article=>{return!article.isFetching&&article.failure};let snackbarTimer;const showSnackbar=()=>dispatch=>{dispatch({type:OPEN_SNACKBAR});clearTimeout(snackbarTimer);snackbarTimer=setTimeout(()=>dispatch({type:CLOSE_SNACKBAR}),3e3)};_exports.showSnackbar=showSnackbar;const updateOffline=offline=>(dispatch,getState)=>{const prev=getState().app.offline;dispatch({type:UPDATE_OFFLINE,offline});if(prev!==void 0){dispatch(showSnackbar())}//  automatically refresh when you come back online (offline was true and now is false)
if(!0===prev&&!1===offline){dispatch(refreshPage())}};_exports.updateOffline=updateOffline;const updateLayout=wide=>(dispatch,getState)=>{if(getState().app.drawerOpened){dispatch(updateDrawerState(!1))}};_exports.updateLayout=updateLayout;const updateDrawerState=opened=>(dispatch,getState)=>{if(getState().app.drawerOpened!==opened){dispatch({type:UPDATE_DRAWER_STATE,opened})}};_exports.updateDrawerState=updateDrawerState;const updateSubTitle=subTitle=>{return{type:UPDATE_SUBTITLE,subTitle}};_exports.updateSubTitle=updateSubTitle;const updateLocationURL=url=>dispatch=>{window.history.pushState({},"",url);dispatch(navigate(window.location))};_exports.updateLocationURL=updateLocationURL;const setAnnouncerLabel=label=>{return{type:SET_ANNOUNCER_LABEL,label}},clearAnnouncerLabel=()=>{return{type:CLEAR_ANNOUNCER_LABEL}};let announcerTimer=0;const announceLabel=label=>dispatch=>{dispatch(clearAnnouncerLabel());// Debounce announcements.
clearTimeout(announcerTimer);announcerTimer=setTimeout(()=>{dispatch(setAnnouncerLabel(label))},300)};_exports.announceLabel=announceLabel;var app={UPDATE_PAGE:UPDATE_PAGE,UPDATE_OFFLINE:UPDATE_OFFLINE,UPDATE_DRAWER_STATE:UPDATE_DRAWER_STATE,CLOSE_MODAL:CLOSE_MODAL,OPEN_SNACKBAR:OPEN_SNACKBAR,CLOSE_SNACKBAR:CLOSE_SNACKBAR,UPDATE_SUBTITLE:UPDATE_SUBTITLE,SET_ANNOUNCER_LABEL:SET_ANNOUNCER_LABEL,CLEAR_ANNOUNCER_LABEL:CLEAR_ANNOUNCER_LABEL,navigate:navigate,refreshPage:refreshPage,showSnackbar:showSnackbar,updateOffline:updateOffline,updateLayout:updateLayout,updateDrawerState:updateDrawerState,updateSubTitle:updateSubTitle,updateLocationURL:updateLocationURL,announceLabel:announceLabel};/**
     Main application configuration file.
   
     HP_HOST: Add your production domain here.
     WP_REST_API_HOST: Add the production wp-rest api domain here.
     WP_REST_PATH: Defaults to latest wp-rest api path. Should be updated if changed.
     CDN_HOST_URL: Add the CDN domain assigned to your by your provider. Set to HP_HOST if none.
   
     Import this file on all all elements that use absolute urls to
     external providers
   */_exports.$app=app;const HP_HOST=window.location.href;_exports.HP_HOST=HP_HOST;const WP_REST_API_HOST="api.hyperpress.app";_exports.WP_REST_API_HOST=WP_REST_API_HOST;const WP_REST_PATH="wp-json/wp/v2";_exports.WP_REST_PATH=WP_REST_PATH;const CDN_HOST_URL="cdn1-themesurgesonslt.netdna-ssl.com";_exports.CDN_HOST_URL=CDN_HOST_URL;var config={HP_HOST:HP_HOST,WP_REST_API_HOST:WP_REST_API_HOST,WP_REST_PATH:WP_REST_PATH,CDN_HOST_URL:CDN_HOST_URL};_exports.$config=config;const REQUEST_ARTICLES="REQUEST_ARTICLES";_exports.REQUEST_ARTICLES=REQUEST_ARTICLES;const RECEIVE_ARTICLES="RECEIVE_ARTICLES";_exports.RECEIVE_ARTICLES=RECEIVE_ARTICLES;const FAIL_ARTICLES="FAIL_ARTICLES";_exports.FAIL_ARTICLES=FAIL_ARTICLES;const fetchArticles=query=>(dispatch,getState)=>{// Check to see if the cached results are from the same query.
// This is useful for avoiding a network request.
if(shouldFetchArticles(getState(),query)){dispatch(requestArticles(query));if(query){fetch(`https://${WP_REST_API_HOST}/${WP_REST_PATH}/${query}/?per_page=10`,{}).then(res=>res.json()).then(data=>dispatch(receiveArticles(query,data))).catch(()=>dispatch(failArticles(query)))}else{// query is empty, clear the results
dispatch(receiveArticles(query,[]))}}};_exports.fetchArticles=fetchArticles;const shouldFetchArticles=(state,query)=>{return state.articles.failure||state.articles.query!==query&&!state.articles.isFetching},requestArticles=query=>{return{type:REQUEST_ARTICLES,query}},receiveArticles=(query,data)=>{return{type:RECEIVE_ARTICLES,query,data}},failArticles=query=>{return{type:FAIL_ARTICLES,query}};// Filters
var articles={REQUEST_ARTICLES:REQUEST_ARTICLES,RECEIVE_ARTICLES:RECEIVE_ARTICLES,FAIL_ARTICLES:FAIL_ARTICLES,fetchArticles:fetchArticles};_exports.$articles=articles;class PageViewElement extends LitElement{// Only render this page if it's actually visible.
shouldUpdate(){return this.active}static get properties(){return{active:{type:Boolean}}}}_exports.PageViewElement=PageViewElement;var pageViewElement={PageViewElement:PageViewElement};_exports.$pageViewElement=pageViewElement;class SnackBar extends LitElement{static get styles(){return[css`
      :host {
        display: block;
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        padding: 12px;
        background-color: var(--app-secondary-color);
        color: white;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        text-align: center;
        will-change: transform;
        transform: translate3d(0, 100%, 0);
        transition-property: visibility, transform;
        transition-duration: 0.2s;
        visibility: hidden;
      }
      :host([active]) {
        visibility: visible;
        transform: translate3d(0, 0, 0);
      }
      @media (min-width: 460px) {
        :host {
          width: 320px;
          margin: auto;
        }
      }
    `]}render(){return html$1`
    <slot></slot>
  `}static get properties(){return{active:{type:Boolean}}}}window.customElements.define("snack-bar",SnackBar);const TsLayoutStyle=css`

.ts-main-content {
    margin: 40px auto;
    max-width: 1400px;
    padding: 0 24px;
    position: relative
}

.ts-visually-hidden {
    position: absolute;
    height: 1px;
    width: 1px;
    overflow: hidden;
    clip: rect(1px, 1px, 1px, 1px)
}

.ts-visually-show {
    position: static;
    height: auto;
    width: auto;
    overflow: visible;
    clip: auto
}

.ts-text-left {
    text-align: left
}

.ts-text-right,
[dir=rtl] .ts-text-left {
    text-align: right
}

[dir=rtl] .ts-text-right {
    text-align: left
}

.ts-text-center {
    text-align: center
}

.ts-text-justify {
    text-align: justify
}

.ts-valign-bottom {
    vertical-align: bottom
}

.ts-valign-middle {
    vertical-align: middle
}

.ts-valign-top {
    vertical-align: top
}

.ts-text-center {
    text-align: center
}

.ts-text-left {
    text-align: left
}

.ts-text-right {
    text-align: right
}

.ts-section {
  padding: 42px 0px;
}

.ts-full-width-page .ts-main-content,
.ts-landing-page .ts-main-content,
.ts-products-page .ts-main-content {
    max-width: 1592px;
    padding: 0 120px
}

.ts-article-inner,
.ts-main-content {
    min-height: calc(100vh - 582px)
}

.ts-header-no-upper-tabs .ts-article-inner,
.ts-header-no-upper-tabs .ts-main-content {
    min-height: calc(100vh - 526px)
}

.ts-header-no-lower-tabs .ts-article-inner,
.ts-header-no-lower-tabs .ts-main-content {
    min-height: calc(100vh - 562px)
}

.ts-header-no-upper-tabs.ts-header-no-lower-tabs .ts-article-inner,
.ts-header-no-upper-tabs.ts-header-no-lower-tabs .ts-main-content {
    min-height: calc(100vh - 478px)
}

.ts-home-page.ts-header-no-upper-tabs.ts-header-no-lower-tabs .ts-main-content {
    min-height: calc(100vh - 710px)
}

.ts-404.ts-header-no-upper-tabs .ts-article-inner,
.ts-404.ts-header-no-upper-tabs .ts-main-content,
.ts-404.ts-header-no-lower-tabs .ts-article-inner,
.ts-404.ts-header-no-lower-tabs .ts-main-content,
.ts-404.ts-header-no-upper-tabs.ts-header-no-lower-tabs .ts-article-inner,
.ts-404.ts-header-no-upper-tabs.ts-header-no-lower-tabs .ts-main-content {
    min-height: calc(100vh - 356px)
}

.ts-site-mask,
.ui-widget-overlay {
    background: #212121;
    cursor: pointer;
    display: none;
    height: 100vh;
    opacity: .5;
    position: fixed;
    top: 0;
    width: 100%;
    z-index: 10011
}

.ui-widget-overlay {
    display: block
}

.ts-article {
    margin-left: 320px;
    position: relative;
    width: calc(100% - 496px)
}

.ts-article-inner {
    float: left;
    width: 100%
}
.hypersite-main-content  {
  padding: 0 24px;
}

.hypersite-full-width-page .hypersite-main-content {
    margin-bottom: 0
}

.hypersite-full-width-page .hypersite-main-content {
    margin: 0 auto
}

.hypersite-full-width-page .hypersite-banner {
    margin-top: 0
}

.ts-hero .content-set {
  margin: 40px 0
}

.ts-hero .content-set p {
  margin: 16px 0 0
}

.ts-hero .content-set hr {
  border-top-color: #fbbc04;
  border-top-style: solid;
  border-top-width: 2px;
  margin: 32px auto;
  width: 160px
}

.ts-section-header__link {
  padding-top: 40px;
}
.ts-content-header__link {
  padding-top: 30px;
}

.ts-hero .content-set hr.blue {
  border-top-color: #4285f4
}

.ts-hero .content-set hr.green {
  border-top-color: #34a853
}

.ts-hero .content-set hr.red {
  border-top-color: #ea4335
}

.ts-hero .content-set hr.yellow {
  border-top-color: #fbbc04
}

.ts-hero__content--background .content-set {
  margin-left: 16px;
  margin-right: 16px
}

.ts-hero__content--background p {
  color: inherit
}

.ts-full-bleed,
.ts-full-bleed--bg,
.ts-full-bleed--constrained {
  margin-left: calc(50% - 49.4vw);
  margin-right: calc(50% - 49.4vw)
}

.ts-full-bleed--bg {
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  padding-left: calc(50vw - 49.4%);
  padding-right: calc(50vw - 49.4%)
}

.ts-full-bleed p {
  color: inherit
}

.ts-full-width-page .ts-main-content, .ts-landing-page .ts-main-content, .ts-products-page .ts-main-content {
    padding: 0 24px;
}

@media screen and (min-width:600px) {
  .ts-full-width-page .ts-main-content,
  .ts-landing-page .ts-main-content,
  .ts-products-page .ts-main-content,
  .ts-main-content {
      padding: 0 16px
  }
  .ts-section-nav+.ts-article,
  .ts-section-nav+.ts-page-nav+.ts-article {
      margin: 0;
      width: 100%
  }
  .hypersite-main-content {
      padding: 0 40px;
  }
  .ts-hero .content-set hr {
      margin-top: 48px;
      width: 280px
  }
  .ts-hero .content-set {
      margin: 80px 0 0 0;
  }
  .ts-hero__content--background .content-set {
      margin-left: 32px;
      margin-right: 32px
  }
  .ts-full-width-page .ts-main-content, .ts-landing-page .ts-main-content, .ts-products-page .ts-main-content {
    padding: 0 40px;
  }
}

@media screen and (min-width:1024px) {
  .ts-full-width-page .ts-main-content,
  .ts-landing-page .ts-main-content,
  .ts-products-page .ts-main-content {
      padding: 0 80px
  }
  .ts-section-nav+.ts-article,
  .ts-section-nav+.ts-page-nav+.ts-article {
      margin-left: 320px
  }
  .ts-article {
      margin: 0;
      width: 100%
  }
  .hypersite-main-content {
    padding: 0 80px;
  }
  .ts-hero img.ts-hero__image--scaled {
    max-width: unset
  }
  .ts-full-bleed--constrained {
    margin-left: auto;
    margin-right: auto
  }
  .ts-full-width-page .ts-main-content, .ts-landing-page .ts-main-content, .ts-products-page .ts-main-content {
    padding: 0 80px;
  }
}

@media screen and (min-width:1201px) {
    .ts-has-apix .ts-main-content {
        margin-right: 400px;
        max-width: 1000px;
        padding-right: 0
    }
    .ts-has-apix .ts-article {
        width: calc(100% - 272px);
        margin-left: 256px
    }
    .ts-section-nav+.ts-article,
    .ts-section-nav+.ts-page-nav+.ts-article {
        width: calc(100% - 296px)
    }
    .ts-article {
        width: calc(100% - 496px)
    }
}

@media screen and (min-width:1401px) {
    .ts-has-apix .ts-main-content {
        margin-right: calc((100% - 1400px)/2 + 400px);
        max-width: 1000px
    }
}

`;_exports.TsLayoutStyle=TsLayoutStyle;var tsStyleLayout={TsLayoutStyle:TsLayoutStyle};_exports.$tsStyleLayout=tsStyleLayout;const TsButtonStyle=css`
  .ts-button {
    align-items: center;
    border: 0;
    border-radius: 4px;
    box-shadow: none;
    box-sizing: border-box;
    cursor: pointer;
    display: inline-flex;
    font: 500 1em "Roboto", Arial, sans-serif;
    height: 44px;
    justify-content: center;
    letter-spacing: 0.5px;
    min-width: auto;
    outline: none;
    padding: 1.7em 24px;
    position: relative;
    text-decoration: none;
    text-transform: uppercase;
    transition: none;
    vertical-align: inherit;
  }
  .ts-button:disabled,
  .ts-button:disabled:focus,
  .ts-button:disabled:hover {
    background-color: var(--app-button-disabled-background-color);
    border-color: var(--app-button-disabled-background-color);
    color: var(--app-reverse-text-color);
    cursor: default;
  }
  .ts-button:active {
    box-shadow: none;
  }
  .ts-button:focus {
    text-decoration: none;
  }
  .ts-button--primary {
    background-color: var(--app-primary-color);
    color: var(--app-reverse-text-color);
  }
  .ts-button--primary:hover {
    background-color: var(--app-primary-hover-color);
    transition: background-color .3s ease-out;
    -webkit-transition: background-color .3s ease-out;
    -o-transition: background-color .3s ease-out;
  }
  .ts-button--primary:active,
  .ts-button--primary:focus {
    background-color: var(--app-primary-color);
  }
  .ts-button--primary:active::before,
  .ts-button--primary:focus::before {
    background-color: var(--app-reverse-text-color);
    content: "";
    height: 100%;
    opacity: 0.24;
    position: absolute;
    width: 100%;
  }
  .ts-button--primary.ts-button--reversed {
    background-color: var(--app-reverse-text-color);
    color: var(--app-secondary-color);
  }
  .ts-button--primary.ts-button--reversed:focus,
  .ts-button--primary.ts-button--reversed:hover {
    background-color:var(--app-button-primary-reversed);
  }
  .ts-button--secondary {
    background-color: var(--app-reverse-text-color);
    border: 1px solid var(--app-button-disabled-background-color);
    color: var(--app-primary-color);
    padding: 0 23px;
  }
  .ts-button--secondary:active,
  .ts-button--secondary:focus,
  .ts-button--secondary:hover {
    border-color: var(--app-button-secondary-border);
  }
  .ts-button--secondary:hover {
    background-color: var(--app-primary-section-background-color);
  }
  .ts-button--secondary:active,
  .ts-button--secondary:focus {
    background-color: var(--app-button-disabled-background-color);
  }
  .ts-button--secondary.ts-button--dark,
  .ts-button--secondary.ts-button--reversed {
    background-clip: padding-box;
    background-color: transparent;
    padding-left: 22px;
    padding-right: 22px;
  }
  .ts-button--secondary.ts-button--reversed {
    border-color: var(--app-reverse-text-color);
    border-width: 2px;
    color: var(--app-reverse-text-color);
  }
  .ts-button--secondary.ts-button--reversed:active,
  .ts-button--secondary.ts-button--reversed:focus,
  .ts-button--secondary.ts-button--reversed:hover {
    background-color:var(--app-button-primary-reversed);
    border-color:var(--app-button-primary-reversed);
    color: var(--app-secondary-color);
  }
  .ts-button--flat {
    border-radius: 0;
    color: var(--app-primary-color);
    height: auto;
    padding: 0;
  }
  .ts-button--flat:visited {
    color: var(--app-primary-color);
  }
  .ts-button--flat:focus,
  .ts-button--flat:hover {
    color: var(--app-primary-color);
  }
  .ts-button--flat:focus {
    background-color: var(--app-button-flat-background-color);
    outline: 10px solid var(--app-button-flat-background-color);
  }
  .ts-button--flat .ts-button__icon {
    display: inherit;
    font-size: 16px;
    padding-left: 4px;
  }
  .ts-button--flat .ts-button__icon--external {
    transform: rotate(-45deg);
  }
  .ts-button--flat .ts-button__icon--jump {
    padding-bottom: 4px;
    padding-left: 0;
    transform: rotate(90deg);
  }
  .ts-button--flat .ts-button__icon--jump-back {
    padding-left: 0;
    padding-top: 4px;
    transform: rotate(270deg);
  }
  .ts-button--flat__heading {
    font-family: Roboto, Arial, sans-serif;
    font-size: 20px;
    font-weight: 500;
    letter-spacing: 0;
    line-height: 30px;
    margin: 0;
    color: var(--app-primary-text-color);
    text-transform: none;
  }

  @media all and (min-width: 600px) {
    .ts-button--flat__heading {
      font-size: 22px;
    }
  }
  .ts-button--flat__heading .ts-button__icon {
    color: var(--app-primary-color);
    font-size: 20px;
  }
  .ts-button--flat__heading:focus,
  .ts-button--flat__heading:hover {
    color: var(--app-primary-text-color);
    transition: background-color .3s ease-out;
    -webkit-transition: background-color .3s ease-out;
    -o-transition: background-color .3s ease-out;
  }
  .ts-button--flat__heading:focus .ts-button__icon,
  .ts-button--flat__heading:hover .ts-button__icon {
    color: var(--app-primary-hover-color);
    transition: background-color .3s ease-out;
    -webkit-transition: background-color .3s ease-out;
    -o-transition: background-color .3s ease-out;
  }
  .ts-button--flat svg {
    fill: currentColor;
    height: 24px;
    width: 24px;
  }
  .ts-button--flat.ts-button--reversed {
    color: var(--app-reverse-text-color);
  }
  .ts-button--flat.ts-button--reversed:hover {
    color:var(--app-button-primary-reversed);
    transition: background-color .3s ease-out;
    -webkit-transition: background-color .3s ease-out;
    -o-transition: background-color .3s ease-out;
  }
  .ts-button--flat.ts-button--reversed:focus {
    background-color: var(--app-button-flat-background-color);
    color: var(--app-primary-text-color);
    outline: 10px solid var(--app-button-flat-background-color);
  }
  .ts-button--flat.ts-button--reversed .ts-button__icon {
    color: inherit;
  }
  .ts-button--flat.ts-button--dark:focus {
    outline: 10px solid rgba(32, 33, 36, 0.2);
  }
  .ts-button--flat.ts-button--dark .ts-button__icon {
    color: inherit;
  }
  .ts-button.ts-button--dark {
    border-color: rgba(32, 33, 36, 0.4);
    color: var(--app-primary-text-color);
  }
  .ts-button.ts-button--dark:hover {
    color: rgba(32, 33, 36, 0.7);
    transition: background-color .3s ease-out;
    -webkit-transition: background-color .3s ease-out;
    -o-transition: background-color .3s ease-out;
  }
  .ts-button.ts-button--dark:focus {
    background-color: rgba(32, 33, 36, 0.2);
  }
  .ts-button__icon--no-wrap {
    align-items: inherit;
    display: inherit;
    justify-content: inherit;
    white-space: nowrap;
  }
  .ts-button-fab {
    align-items: center;
    background-color: var(--app-primary-color);
    border-radius: 50%;
    box-shadow: 0 1px 2px 0 rgba(60, 64, 67, 0.3),
      0 1px 3px 1px rgba(60, 64, 67, 0.15);
    display: inline-flex;
    height: 56px;
    justify-content: center;
    outline: none;
    text-decoration: none;
    transition: background-color 280ms cubic-bezier(0.4, 0, 0.2, 1),
      280ms cubic-bezier(0.4, 0, 0.2, 1);
    width: 56px;
    will-change: box-shadow, background;
  }
  .ts-button-fab:focus,
  .ts-button-fab:hover {
    background-color: var(--app-primary-hover-color);
    box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),
      0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12);
    text-decoration: none;
  }
  .ts-button-fab--red {
    background-color: var(--app-button-fab-red);
  }
  .ts-button-fab--red:focus,
  .ts-button-fab--red:hover {
    background-color:var(--app-button-fab-red-hover);
  }
  .ts-button-fab .material-icons {
    background: transparent;
    color: var(--app-reverse-text-color);
  }
  .ts-button__set .ts-button {
    margin-right: 16px;
    margin-top: 16px;
  }
  .ts-button__set .ts-button:first-child {
    margin-top: 24px;
  }
  .ts-button__set .ts-button:last-child {
    margin-right: 0;
  }
  span.ts-button,
  span.ts-button--flat,
  span.ts-button--flat.ts-button--reversed {
    cursor: inherit;
  }
  span.ts-button,
  span.ts-button--flat,
  span.ts-button--flat.ts-button--reversed,
  span.ts-button--flat.ts-button--reversed:focus,
  span.ts-button--flat.ts-button--reversed:hover,
  span.ts-button--flat:focus,
  span.ts-button--flat:hover,
  span.ts-button:focus,
  span.ts-button:hover {
    background-color: transparent;
    color: inherit;
    outline: none;
  }

  .ts-content-button {
    margin-bottom: 34px;
  }
`;_exports.TsButtonStyle=TsButtonStyle;var tsStyleButton={TsButtonStyle:TsButtonStyle};_exports.$tsStyleButton=tsStyleButton;const TsGridStyle=css`

.ts-grid, .ts-grid--alternate {
    display: grid;
    grid-column-gap: 16px;
    grid-template-columns: 4fr;
}
.ts-grid--alternate.ts-grid__no-gap, .ts-grid.ts-grid__no-gap {
    grid-column-gap: 0;
}
.ts-grid--alternate.ts-grid--horizontal-center, .ts-grid.ts-grid--horizontal-center {
    justify-items: center;
}
.ts-grid--alternate.ts-grid--horizontal-stretch, .ts-grid.ts-grid--horizontal-stretch {
    justify-items: stretch;
}
.ts-grid--alternate.ts-grid--vertical-center, .ts-grid.ts-grid--vertical-center {
    align-items: center;
}
.ts-grid--alternate.ts-grid--vertical-stretch, .ts-grid.ts-grid--vertical-stretch {
    align-items: stretch;
}
.ts-grid--alternate__col--horizontal-center, .ts-grid__col--horizontal-center {
    justify-self: center;
}
.ts-grid--alternate__col--horizontal-stretch, .ts-grid__col--horizontal-stretch {
    justify-self: stretch;
}
.ts-grid--alternate__col--vertical-center, .ts-grid__col--vertical-center {
    align-self: center;
}
.ts-grid--alternate__col--vertical-stretch, .ts-grid__col--vertical-stretch {
    align-self: center;
}
@media all and (min-width: 600px) {
  .ts-grid {
      grid-column-gap: 15px;
      grid-template-columns: repeat(12,  1fr);
  }
  .ts-grid .is-1 {
      grid-column: span 1/span 1;
  }
  .ts-grid .is-2 {
      grid-column: span 2/span 2;
  }
  .ts-grid .is-3 {
      grid-column: span 3/span 3;
  }
  .ts-grid .is-4 {
      grid-column: span 4/span 4;
  }
  .ts-grid .is-5 {
      grid-column: span 5/span 5;
  }
  .ts-grid .is-6 {
      grid-column: span 6/span 6;
  }
  .ts-grid .is-7 {
      grid-column: span 7/span 7;
  }
  .ts-grid .is-8 {
      grid-column: span 8/span 8;
  }
  .ts-grid .is-9 {
      grid-column: span 9/span 9;
  }
  .ts-grid .is-10 {
      grid-column: span 10/span 10;
  }
  .ts-grid .is-11 {
      grid-column: span 11/span 11;
  }
  .ts-grid .is-12 {
      grid-column: span 12/span 12;
  }
  .ts-grid .is-1--offset {
      grid-column-start: 2;
  }
  .ts-grid .is-2--offset {
      grid-column-start: 3;
  }
  .ts-grid .is-3--offset {
      grid-column-start: 4;
  }
  .ts-grid .is-4--offset {
      grid-column-start: 5;
  }
  .ts-grid .is-5--offset {
      grid-column-start: 6;
  }
  .ts-grid .is-6--offset {
      grid-column-start: 7;
  }
  .ts-grid .is-7--offset {
      grid-column-start: 8;
  }
  .ts-grid .is-8--offset {
      grid-column-start: 9;
  }
  .ts-grid .is-9--offset {
      grid-column-start: 10;
  }
  .ts-grid .is-10--offset {
      grid-column-start: 11;
  }
  .ts-grid .is-11--offset {
      grid-column-start: 12;
  }
  .ts-grid .is-12--offset {
      grid-column-start: 13;
  }
}
@media all and (min-width: 768px) {
  .ts-grid--alternate {
      grid-column-gap: 15px;
      grid-template-columns: repeat(12,  1fr);
  }
  .ts-grid--alternate .is-1 {
      grid-column: span 1/span 1;
  }
  .ts-grid--alternate .is-2 {
      grid-column: span 2/span 2;
  }
  .ts-grid--alternate .is-3 {
      grid-column: span 3/span 3;
  }
  .ts-grid--alternate .is-4 {
      grid-column: span 4/span 4;
  }
  .ts-grid--alternate .is-5 {
      grid-column: span 5/span 5;
  }
  .ts-grid--alternate .is-6 {
      grid-column: span 6/span 6;
  }
  .ts-grid--alternate .is-7 {
      grid-column: span 7/span 7;
  }
  .ts-grid--alternate .is-8 {
      grid-column: span 8/span 8;
  }
  .ts-grid--alternate .is-9 {
      grid-column: span 9/span 9;
  }
  .ts-grid--alternate .is-10 {
      grid-column: span 10/span 10;
  }
  .ts-grid--alternate .is-11 {
      grid-column: span 11/span 11;
  }
  .ts-grid--alternate .is-12 {
      grid-column: span 12/span 12;
  }
  .ts-grid--alternate .is-1--offset {
      grid-column-start: 2;
  }
  .ts-grid--alternate .is-2--offset {
      grid-column-start: 3;
  }
  .ts-grid--alternate .is-3--offset {
      grid-column-start: 4;
  }
  .ts-grid--alternate .is-4--offset {
      grid-column-start: 5;
  }
  .ts-grid--alternate .is-5--offset {
      grid-column-start: 6;
  }
  .ts-grid--alternate .is-6--offset {
      grid-column-start: 7;
  }
  .ts-grid--alternate .is-7--offset {
      grid-column-start: 8;
  }
  .ts-grid--alternate .is-8--offset {
      grid-column-start: 9;
  }
  .ts-grid--alternate .is-9--offset {
      grid-column-start: 10;
  }
  .ts-grid--alternate .is-10--offset {
      grid-column-start: 11;
  }
  .ts-grid--alternate .is-11--offset {
      grid-column-start: 12;
  }
  .ts-grid--alternate .is-12--offset {
      grid-column-start: 13;
  }
}
@media all and (min-width: 1024px) {
  .ts-grid, .ts-grid--alternate {
      grid-column-gap: 28px;
      grid-template-columns: repeat(12,  1fr);
  }
  .ts-grid .is-1__large, .ts-grid--alternate .is-1__large {
      grid-column: span 1/span 1;
  }
  .ts-grid .is-2__large, .ts-grid--alternate .is-2__large {
      grid-column: span 2/span 2;
  }
  .ts-grid .is-3__large, .ts-grid--alternate .is-3__large {
      grid-column: span 3/span 3;
  }
  .ts-grid .is-4__large, .ts-grid--alternate .is-4__large {
      grid-column: span 4/span 4;
  }
  .ts-grid .is-5__large, .ts-grid--alternate .is-5__large {
      grid-column: span 5/span 5;
  }
  .ts-grid .is-6__large, .ts-grid--alternate .is-6__large {
      grid-column: span 6/span 6;
  }
  .ts-grid .is-7__large, .ts-grid--alternate .is-7__large {
      grid-column: span 7/span 7;
  }
  .ts-grid .is-8__large, .ts-grid--alternate .is-8__large {
      grid-column: span 8/span 8;
  }
  .ts-grid .is-9__large, .ts-grid--alternate .is-9__large {
      grid-column: span 9/span 9;
  }
  .ts-grid .is-10__large, .ts-grid--alternate .is-10__large {
      grid-column: span 10/span 10;
  }
  .ts-grid .is-11__large, .ts-grid--alternate .is-11__large {
      grid-column: span 11/span 11;
  }
  .ts-grid .is-12__large, .ts-grid--alternate .is-12__large {
      grid-column: span 12/span 12;
  }
  .ts-grid .is-1__large--offset, .ts-grid--alternate .is-1__large--offset {
      grid-column-start: 2;
  }
  .ts-grid .is-2__large--offset, .ts-grid--alternate .is-2__large--offset {
      grid-column-start: 3;
  }
  .ts-grid .is-3__large--offset, .ts-grid--alternate .is-3__large--offset {
      grid-column-start: 4;
  }
  .ts-grid .is-4__large--offset, .ts-grid--alternate .is-4__large--offset {
      grid-column-start: 5;
  }
  .ts-grid .is-5__large--offset, .ts-grid--alternate .is-5__large--offset {
      grid-column-start: 6;
  }
  .ts-grid .is-6__large--offset, .ts-grid--alternate .is-6__large--offset {
      grid-column-start: 7;
  }
  .ts-grid .is-7__large--offset, .ts-grid--alternate .is-7__large--offset {
      grid-column-start: 8;
  }
  .ts-grid .is-8__large--offset, .ts-grid--alternate .is-8__large--offset {
      grid-column-start: 9;
  }
  .ts-grid .is-9__large--offset, .ts-grid--alternate .is-9__large--offset {
      grid-column-start: 10;
  }
  .ts-grid .is-10__large--offset, .ts-grid--alternate .is-10__large--offset {
      grid-column-start: 11;
  }
  .ts-grid .is-11__large--offset, .ts-grid--alternate .is-11__large--offset {
      grid-column-start: 12;
  }
  .ts-grid .is-12__large--offset, .ts-grid--alternate .is-12__large--offset {
      grid-column-start: 13;
  }
  .ts-grid--alternate__small-gap, .ts-grid__small-gap {
      grid-column-gap: 15px;
  }
}
@media all and (min-width: 1280px) {
  .ts-grid, .ts-grid--alternate {
      grid-column-gap: 28px;
      grid-template-columns: repeat(12,  1fr);
  }
  .ts-grid .is-1__xl, .ts-grid--alternate .is-1__xl {
      grid-column: span 1/span 1;
  }
  .ts-grid .is-2__xl, .ts-grid--alternate .is-2__xl {
      grid-column: span 2/span 2;
  }
  .ts-grid .is-3__xl, .ts-grid--alternate .is-3__xl {
      grid-column: span 3/span 3;
  }
  .ts-grid .is-4__xl, .ts-grid--alternate .is-4__xl {
      grid-column: span 4/span 4;
  }
  .ts-grid .is-5__xl, .ts-grid--alternate .is-5__xl {
      grid-column: span 5/span 5;
  }
  .ts-grid .is-6__xl, .ts-grid--alternate .is-6__xl {
      grid-column: span 6/span 6;
  }
  .ts-grid .is-7__xl, .ts-grid--alternate .is-7__xl {
      grid-column: span 7/span 7;
  }
  .ts-grid .is-8__xl, .ts-grid--alternate .is-8__xl {
      grid-column: span 8/span 8;
  }
  .ts-grid .is-9__xl, .ts-grid--alternate .is-9__xl {
      grid-column: span 9/span 9;
  }
  .ts-grid .is-10__xl, .ts-grid--alternate .is-10__xl {
      grid-column: span 10/span 10;
  }
  .ts-grid .is-11__xl, .ts-grid--alternate .is-11__xl {
      grid-column: span 11/span 11;
  }
  .ts-grid .is-12__xl, .ts-grid--alternate .is-12__xl {
      grid-column: span 12/span 12;
  }
  .ts-grid .is-1__xl--offset, .ts-grid--alternate .is-1__xl--offset {
      grid-column-start: 2;
  }
  .ts-grid .is-2__xl--offset, .ts-grid--alternate .is-2__xl--offset {
      grid-column-start: 3;
  }
  .ts-grid .is-3__xl--offset, .ts-grid--alternate .is-3__xl--offset {
      grid-column-start: 4;
  }
  .ts-grid .is-4__xl--offset, .ts-grid--alternate .is-4__xl--offset {
      grid-column-start: 5;
  }
  .ts-grid .is-5__xl--offset, .ts-grid--alternate .is-5__xl--offset {
      grid-column-start: 6;
  }
  .ts-grid .is-6__xl--offset, .ts-grid--alternate .is-6__xl--offset {
      grid-column-start: 7;
  }
  .ts-grid .is-7__xl--offset, .ts-grid--alternate .is-7__xl--offset {
      grid-column-start: 8;
  }
  .ts-grid .is-8__xl--offset, .ts-grid--alternate .is-8__xl--offset {
      grid-column-start: 9;
  }
  .ts-grid .is-9__xl--offset, .ts-grid--alternate .is-9__xl--offset {
      grid-column-start: 10;
  }
  .ts-grid .is-10__xl--offset, .ts-grid--alternate .is-10__xl--offset {
      grid-column-start: 11;
  }
  .ts-grid .is-11__xl--offset, .ts-grid--alternate .is-11__xl--offset {
      grid-column-start: 12;
  }
  .ts-grid .is-12__xl--offset, .ts-grid--alternate .is-12__xl--offset {
      grid-column-start: 13;
  }
  .ts-grid--alternate__small-gap, .ts-grid__small-gap {
      grid-column-gap: 15px;
  }
}

`;_exports.TsGridStyle=TsGridStyle;var tsStyleGrid={TsGridStyle:TsGridStyle};_exports.$tsStyleGrid=tsStyleGrid;const TsTypographyStyle=css`
  /* Material Design Typography */

  /* All screens smaller than 460px */

  .paper-font-light {
    font-weight: 300;
  }

  .paper-font-medium {
    font-weight: 400;
  }

  .paper-font-semibold {
    font-weight: 500;
  }

  #ts-site .ts-display1 {
    font-size: 40px;
    font-weight: 400;
    letter-spacing: 0;
    line-height: 48px;
    margin: 0;
  }

  #ts-site .ts-display1 strong {
    color: var(--app-primary-color);
    font-weight: inherit;
  }

  #ts-site .ts-display2 {
    font-size: 40px;
    font-weight: 400;
    letter-spacing: 0;
    line-height: 48px;
    margin: 0;
  }

  #ts-site .ts-display2 strong {
    color: var(--app-primary-color);
    font-weight: inherit;
  }

  #ts-site .ts-display3 {
    font-size: 36px;
    font-weight: 300;
    letter-spacing: 0;
    line-height: 44px;
    margin: 24px 0 0 -4px;
  }

  #ts-site .ts-display3 strong {
    color: var(--app-primary-color);
    font-weight: inherit;
  }

  #ts-site .ts-headline1 {
    font-size: 36px;
    font-weight: 400;
    letter-spacing: 0;
    line-height: 44px;
    margin: 0;
  }

  #ts-site .ts-headline1 strong {
    color: var(--app-primary-color);
    font-weight: inherit;
  }

  #ts-site .ts-headline2 {
    font-size: 32px;
    font-weight: 500;
    letter-spacing: 0;
    line-height: 40px;
    margin: 0;
  }

  #ts-site .ts-headline2 strong {
    color: var(--app-primary-color);
    font-weight: inherit;
  }

  #ts-site .ts-headline3 {
    font-size: 24px;
    font-weight: 500;
    letter-spacing: 0;
    line-height: 32px;
    margin: 0;
  }

  #ts-site .ts-headline3 strong {
    color: var(--app-primary-color);
    font-weight: inherit;
  }

  #ts-site .ts-headline4 {
    color: var(--app-primary-text-color);
    font-size: 24px;
    font-weight: 400;
    letter-spacing: 0;
    line-height: 30px;
    margin: 28px 0 0 0;
    padding-right: 0px;
  }

  #ts-site .ts-headline4 strong {
    color: var(--app-primary-color);
    font-weight: inherit;
  }

  #ts-site .ts-headline4 .ts-superscript {
    font-size: 10px;
    line-height: 1;
  }

  #ts-site .ts-quote-text {
    font-size: 20px;
    font-weight: 400;
    letter-spacing: 0;
    line-height: 30px;
  }

  #ts-site .ts-quote-text strong {
    color: var(--app-primary-color);
    font-weight: inherit;
  }

  #ts-site .ts-eyebrow {
    color: var(--app-primary-text-thin-color);
    font-size: 14px;
    font-weight: 400;
    letter-spacing: 1.5px;
    line-height: 22px;
    overflow: visible;
    text-transform: uppercase;
  }

  #ts-site .ts-eyebrow strong {
    color: var(--app-primary-color);
    font-weight: inherit;
  }

  #ts-site .ts-eyebrow--large {
    font-family: Roboto Mono, monospace;
    font-size: 16px;
    font-weight: 400;
    letter-spacing: 1.5px;
    line-height: 1;
    margin: 0;
    overflow: visible;
    text-transform: uppercase;
  }

  #ts-site .ts-eyebrow--large strong {
    color: var(--app-primary-color);
    font-weight: inherit;
  }

  #ts-site .ts-subhead {
    font-size: 16px;
    font-weight: 400;
    letter-spacing: 0;
    line-height: 26px;
  }

  #ts-site .ts-subhead strong {
    color: var(--app-primary-color);
    font-weight: inherit;
  }
  .ts-superscript {
    color: var(--app-primary-text-thin-color);
    font-size: 13px;
    font-weight: 400;
    letter-spacing: 1px;
    line-height: 1.5;
    margin: 0;
    overflow: visible;
    text-transform: uppercase;
    left: 2px;
    top: 0;
    vertical-align: text-top;
  }
  .ts-body-text__large {
    font-size: 18px;
    font-weight: 400;
    line-height: 32px;
  }
  .ts-body-text__large .ts-superscript {
    font-size: 10px;
    line-height: 1;
  }
  .ts-body-text__title {
    font-size: 16px;
    font-weight: 400;
    line-height: 24px;
  }
  .ts-body-text__title .ts-superscript {
    font-size: 10px;
    line-height: 1;
  }
  .ts-body-text,
  p {
    font-size: 17px;
    font-weight: 400;
    line-height: 185%;
  }
  .ts-superscript,
  p .ts-superscript {
    font-size: 10px;
    line-height: 1;
  }
  .ts-body-text__small {
    font-size: 14px;
    font-weight: 400;
    line-height: 185%;
  }
  .ts-body-text__small .ts-superscript {
    font-size: 10px;
    line-height: 1;
  }
  .ts-footnotes {
    font-size: 12px;
    font-weight: 400;
    letter-spacing: 0.35px;
    line-height: 18px;
  }
  .ts-link {
    color: var(--app-primary-color);
    text-decoration: none;
  }
  .ts-link:visited {
    color: var(--app-primary-color);
  }
  .ts-link:focus,
  .ts-link:hover {
    text-decoration: underline;
  }
  .ts-link:hover {
    color: var(--app-primary-hover-color);
  }
  .ts-link:focus {
    background-color: var(--app-primary-text-color);
    color: var(--app-primary-hover-color);
    outline: 4px solid var(--app-primary-text-color);
  }
  .ts-link--reversed {
    color: var(--app-reverse-text-color);
    text-decoration: underline;
  }
  .ts-link--reversed:visited {
    color: var(--app-reverse-text-color);
  }
  .ts-link--reversed:focus,
  .ts-link--reversed:hover {
    background-color: var(--app-primary-text-color);
    color: var(--app-reverse-text-color);
    outline: 4px solid var(--app-primary-text-color);
  }

  /* Custom Font Weights */

  .paper-font-light {
    font-weight: 300;
  }

  .paper-font-medium {
    font-weight: 400;
  }

  .paper-font-semibold {
    font-weight: 500;
  }

  /* All screens larger than 460px */

  @media (min-width: 460px) {
    #ts-site .ts-display1 {
      font-size: 72px;
      letter-spacing: -0.5px;
      line-height: 84px;
    }
    #ts-site .ts-display2 {
      font-size: 64px;
      letter-spacing: -0.5px;
      line-height: 72px;
    }
    #ts-site .ts-display3 {
      font-size: 56px;
      letter-spacing: -0.5px;
      line-height: 66px;
    }
    #ts-site .ts-headline1 {
      font-size: 48px;
      font-weight: 500;
      letter-spacing: -0.5px;
      line-height: 58px;
    }
    #ts-site .ts-headline2 {
      font-size: 40px;
      letter-spacing: -0.5px;
      line-height: 52px;
    }
    #ts-site .ts-headline3 {
      font-size: 25px;
      line-height: 40px;
      margin: 24px 16px 0 0;
    }
    #ts-site .ts-headline4 {
      font-size: 22px;
    }
    #ts-site .ts-quote-text {
      color: #202124;
      font-size: 30px;
      line-height: 40px;
    }
    #ts-site .ts-subhead {
      font-size: 18px;
      line-height: 30px;
    }
    #ts-site h2.ts-headline4 {
      font-size: 24px;
      padding-right: 0px;
    }
  }
`;_exports.TsTypographyStyle=TsTypographyStyle;var tsStyleTypography={TsTypographyStyle:TsTypographyStyle};_exports.$tsStyleTypography=tsStyleTypography;const TsCard=css`
  .ts-section--reversed,
  .ts-card--reversed,
  #ts-site .ts-section--reversed .ts-section-header__eyebrow,
  #ts-site .ts-section--reversed .ts-section-header__heading,
  #ts-site .ts-card--reversed .ts-card__eyebrow,
  #ts-site .ts-card--reversed .ts-card__heading {
    color: #fff;
  }

  .ts-card__container {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    margin-bottom: -24px;
  }

  .ts-card__container .ts-card {
    flex: 0 1 100%;
    margin: 0 0 24px;
    max-width: 320px;
    min-height: 272px;
  }

  #ts-site .ts-card--four-columns .ts-card__container {
    flex-wrap: initial;
  }

  #ts-site .ts-card--four-columns .ts-headline1 {
    font-size: 22px;
    line-height: 30px;
  }

  #ts-site .ts-card--four-columns .ts-headline3 {
    font-size: 28px;
    line-height: 34px;
  }

  #ts-site .ts-card--four-columns .ts-headline4 {
    font-size: 22px;
    text-transform: uppercase;
  }

  #ts-site .ts-card--four-columns .highlight-price {
    color: #202124;
    font-size: 30px;
    font-weight: 500;
  }

  .ts-card__container--left-aligned {
    justify-content: left;
  }

  .ts-card__container--3up {
    margin-left: auto;
    margin-right: auto;
    max-width: 1038px;
  }

  .ts-card {
    background-color: #fff;
    background-position: center center;
    background-size: auto 100%;
    border: 1px solid #dadce0;
    border-radius: 8px;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    min-width: 236px;
    overflow: hidden;
    padding-bottom: 24px;
    position: relative;
    transition: box-shadow 0.3s ease-out, background-size 0.3s ease-out;
  }

  .ts-card__arrow {
     margin-top: 0;
  }

  .ts-card:hover {
    background-size: auto 103%;
    box-shadow: 0 8px 8px 0 rgba(0, 0, 0, 0.2);
  }

  .ts-card__icon {
    align-items: center;
    box-sizing: content-box;
    display: flex;
    height: 32px;
    padding-top: 32px;
    width: 32px;
  }

  .ts-card__icon svg {
    fill: currentColor;
    height: 100%;
    width: 100%;
  }

  .ts-card__icon svg path {
    fill: currentColor;
  }

  .ts-card__logo {
    display: flex;
    justify-content: center;
    padding: 32px 8px 0;
  }

  .ts-card__logo.ts-card__logo--bg {
    align-items: center;
    background-repeat: no-repeat;
    background-size: cover;
    height: 160px;
    padding: 0;
  }

  .ts-card__media {
    display: flex;
    height: 170px;
    justify-content: center;
    overflow: hidden;
    position: relative;
  }

  .ts-card__media--image {
    height: auto;
    object-fit: cover;
  }

  .ts-card__media--logo {
    align-self: center;
    position: absolute;
    width: 140px;
  }

  .ts-card__top {
    padding: 32px 24px 0;
  }

  .ts-card__content {
    padding: 32px 24px;
  }

  .ts-card__content .ts-headline4 {
    color: var(--app-primary-color);
    padding-bottom: 16px;
  }

  .ts-card__content p {
    margin: 0;
  }

  .ts-card__content--featured {
    color: var(--app-primary-color);
    margin-bottom: 24px;
    margin-top: 24px;
  }

  .ts-card__content__quote-text {
    padding-left: 25px;
  }

  .ts-card__footer {
    align-self: end;
    margin-right: auto;
    margin-top: auto;
    padding: 0 24px;
  }

  .ts-card .ts-button {
    display: flex;
    justify-content: flex-start;
  }

  .ts-card .ts-button + .ts-button {
    margin: 25px 0 0;
  }

  .ts-card--extra-large .ts-card__content,
  .ts-card--extra-large .ts-card__footer,
  .ts-card--extra-large .ts-card__top,
  .ts-card--large .ts-card__content,
  .ts-card--large .ts-card__footer,
  .ts-card--large .ts-card__top {
    padding-left: 32px;
    padding-right: 32px;
  }

  .ts-card--extra-large .ts-card__media,
  .ts-card--large .ts-card__media {
    height: 200px;
  }

  .ts-card--no-hover {
    transition: none;
  }

  .ts-card--no-hover:hover {
    background-size: auto;
    box-shadow: none;
  }

  .ts-card__fab {
    position: absolute;
    right: 25px;
    top: 132px;
  }

  #ts-site .ts-card--four-columns {
    padding: 0;
  }

  @media all and (min-width: 600px) {
    .ts-card__container .ts-card {
      flex: 0 1 calc(50% - 24px);
      margin-left: 12px;
      margin-right: 12px;
    }
    .ts-card__container .ts-card--large {
      max-width: 408px;
    }
    .ts-card__container .ts-card--extra-large {
      max-width: 496px;
    }
    .ts-card__container--left-aligned {
      margin-left: -12px;
      margin-right: -12px;
    }
    .ts-card__container--left-aligned.ts-card__container--3up {
      margin-left: -12px;
      margin-right: -12px;
    }
    .ts-section-body,
    .ts-card__body {
      font-size: 16px;
      line-height: 24px;
    }
  }

  @media all and (min-width: 1024px) {
    .ts-card__container .ts-card {
      flex-basis: calc(25% - 24px);
    }
    .ts-card__container .ts-card--large {
      flex-basis: calc(33.3% - 24px);
    }
    .ts-card__container .ts-card--extra-large {
      flex-basis: calc(50% - 24px);
    }
    .ts-card__container--3up .ts-card {
      flex-basis: calc(33.3% - 24px);
    }
    .ts-card__logo.ts-card__logo--bg {
      height: 170px;
    }
    .ts-card__fab {
      top: 142px;
    }

    #ts-site .ts-card--four-columns {
      flex-basis: calc(50% - 36px);
      margin: 0 18px 36px;
    }

    .ts-card--contact {
      background-color: #34a853; /* $green-500 */
      background-image: url("/images/home/contact-bg.svg");
      background-position: 50% 50%;
      background-size: cover;
    }

    .ts-card--industry {
      background-color: #fbbc04;
      background-image: url("/images/home/industry-bg.svg");
      background-position: 50% 50%;
      background-size: cover;
    }

    .ts-card--solution {
      border: 1px solid #eee;
      border-radius: 0;
      height: 100%;
      padding: 26px;
      margin: 0 -1px -1px 0;
    }

    .ts-card--solution .ts-card__icon {
      height: 62px;
      margin-bottom: 21px;
      margin-left: -4px;
      padding-top: 28px;
      width: 72px;
    }

    .ts-card--solution .ts-card__link {
      text-decoration: none;
    }

    .ts-card--solution .ts-card__link:hover {
      text-decoration: none;
    }

    .ts-card--solution .ts-card__link:hover .ts-card__heading {
      color: #202124;
    }

    .ts-card--solution .ts-card__body {
      flex-grow: 1;
    }

    .ts-card--solution .ts-card__link {
      margin-top: 24px;
    }

    .ts-hero::before,
    .ts-hero::after {
      height: 650px;
    }

    .ts-hero__card {
      padding: 40px 48px;
    }

    .ts-hero__card .ts-button__set .ts-button {
      margin-right: 24px;
    }

    .ts-card--tall {
      min-height: 560px;
    }

    .ts-card--product .ts-card__icon {
      padding-top: 24px;
    }

    .ts-hero__card--gcp {
      background-size: 60%;
    }

    .ts-card--product,
    .ts-card--product.ts-card--solution {
      padding: 32px 56px 72px;
    }

    .ts-card--product .ts-card__heading, .ts-card__arrow{
      padding-top: 24px;
    }
  }

  @media all and (min-width: 1440px) {
    #ts-site .ts-card--four-columns {
      flex-basis: calc(25% - 24px);
      margin: 0 12px 24px;
    }
  }
`;_exports.TsCard=TsCard;var tsStyleCard={TsCard:TsCard};_exports.$tsStyleCard=tsStyleCard;const TsElevationStyle=css`
  /* Material Design Elevation */

  .mdc-elevation--z0 {
    box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z1 {
    box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z2 {
    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z3 {
    box-shadow: 0px 3px 3px -2px rgba(0, 0, 0, 0.2), 0px 3px 4px 0px rgba(0, 0, 0, 0.14), 0px 1px 8px 0px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z4 {
    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z5 {
    box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 5px 8px 0px rgba(0, 0, 0, 0.14), 0px 1px 14px 0px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z6 {
    box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z7 {
    box-shadow: 0px 4px 5px -2px rgba(0, 0, 0, 0.2), 0px 7px 10px 1px rgba(0, 0, 0, 0.14), 0px 2px 16px 1px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z8 {
    box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z9 {
    box-shadow: 0px 5px 6px -3px rgba(0, 0, 0, 0.2), 0px 9px 12px 1px rgba(0, 0, 0, 0.14), 0px 3px 16px 2px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z10 {
    box-shadow: 0px 6px 6px -3px rgba(0, 0, 0, 0.2), 0px 10px 14px 1px rgba(0, 0, 0, 0.14), 0px 4px 18px 3px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z11 {
    box-shadow: 0px 6px 7px -4px rgba(0, 0, 0, 0.2), 0px 11px 15px 1px rgba(0, 0, 0, 0.14), 0px 4px 20px 3px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z12 {
    box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z13 {
    box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 13px 19px 2px rgba(0, 0, 0, 0.14), 0px 5px 24px 4px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z14 {
    box-shadow: 0px 7px 9px -4px rgba(0, 0, 0, 0.2), 0px 14px 21px 2px rgba(0, 0, 0, 0.14), 0px 5px 26px 4px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z15 {
    box-shadow: 0px 8px 9px -5px rgba(0, 0, 0, 0.2), 0px 15px 22px 2px rgba(0, 0, 0, 0.14), 0px 6px 28px 5px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z16 {
    box-shadow: 0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z17 {
    box-shadow: 0px 8px 11px -5px rgba(0, 0, 0, 0.2), 0px 17px 26px 2px rgba(0, 0, 0, 0.14), 0px 6px 32px 5px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z18 {
    box-shadow: 0px 9px 11px -5px rgba(0, 0, 0, 0.2), 0px 18px 28px 2px rgba(0, 0, 0, 0.14), 0px 7px 34px 6px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z19 {
    box-shadow: 0px 9px 12px -6px rgba(0, 0, 0, 0.2), 0px 19px 29px 2px rgba(0, 0, 0, 0.14), 0px 7px 36px 6px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z20 {
    box-shadow: 0px 10px 13px -6px rgba(0, 0, 0, 0.2), 0px 20px 31px 3px rgba(0, 0, 0, 0.14), 0px 8px 38px 7px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z21 {
    box-shadow: 0px 10px 13px -6px rgba(0, 0, 0, 0.2), 0px 21px 33px 3px rgba(0, 0, 0, 0.14), 0px 8px 40px 7px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z22 {
    box-shadow: 0px 10px 14px -6px rgba(0, 0, 0, 0.2), 0px 22px 35px 3px rgba(0, 0, 0, 0.14), 0px 8px 42px 7px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z23 {
    box-shadow: 0px 11px 14px -7px rgba(0, 0, 0, 0.2), 0px 23px 36px 3px rgba(0, 0, 0, 0.14), 0px 9px 44px 8px rgba(0, 0, 0, 0.12); }

  .mdc-elevation--z24 {
    box-shadow: 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12); }

  .mdc-elevation-transition {
    transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
    will-change: box-shadow; }

  .mdc-button--raised {
      box-shadow: 0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12);
      transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1); }

  .mdc-button--raised, .mdc-button--unelevated {
      padding: 0 16px 0 16px; }

  .mdc-button--raised:hover, .mdc-button--raised:focus {
      box-shadow: 0px 2px 4px -1px rgba(0,0,0,0.2), 0px 4px 5px 0px rgba(0,0,0,0.14), 0px 1px 10px 0px rgba(0,0,0,0.12); }

  .mdc-button--raised.mdc-ripple-upgraded, .mdc-button--unelevated.mdc-ripple-upgraded {
      --mdc-ripple-fg-opacity: .32; }
`;_exports.TsElevationStyle=TsElevationStyle;var tsStyleElevation={TsElevationStyle:TsElevationStyle};_exports.$tsStyleElevation=tsStyleElevation;const SharedStyles=css`

/* All screens smaller than 460px wide */

  :host {
    display:none;
  }

  /* Box model */
  *,
  *:after,
  *:before {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
  }

  /* Base Styles */

  body #ts-site {
    color: #202124;
  }

  h1, h2, h3, h4, h5, h6 {
    color: var(--app-primary-text-color); 
  }

  h1, h2, h3, h4, h5, h6, p {
    margin: 0 0 10px 0; }

  h1, h2, h3, h4, h5, h6, a {
    text-rendering: optimizeLegibility; }

  a { 
    background-color: transparent;
    color: var(--app-primary-color);
    text-decoration: none; 
    font-weight: 400;
    margin-bottom: 5px;
    border-bottom: 2px solid var(--app-primary-color);
    will-change: background-color
  }

  a:hover {
    outline: 0; 
    border-bottom: 0px;
    transition: background-color .3s ease-out;
    -webkit-transition: background-color .3s ease-out;
    -o-transition: background-color .3s ease-out;
  }

  p {
    margin: 16px 0;
    padding: 0;
  }

  article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary, img {
    display: block; }

  .entry .entry-content .wp-block-image {
    max-width: 100%;
  }

  section {
    margin: 24px 0 0 0; 
  }

  th {
    font-weight:500;
  }

  figure.img-right {
      float:none;
      margin: 0;
  }
  figure.img-right img {
    float:none;
    margin: auto auto;
    max-width: 80%;
    margin-top: 28px;
    margin-bottom: 28px;
  }

  img, embed, object, video {
    height: auto;
    /* Make sure images are scaled correctly. */
    max-width: 100%;
    /* Adhere to container width. */
    width: 100%
  }

  .fade-in {
    opacity: 0;
    animation: fadeIn 0.5s forwards;
  }
  .delayed-fade-in {
    opacity: 0;
    animation: fadeIn 1.4s forwards;
  }
  @keyframes fadeIn {
    0% {
      opacity: 0;
      transform: translateY(50px);
    }
    30% {
      opacity: 0;
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Base Classes */

  .nav {
    display: inline; }

  .sticky {
    display: none; } 

  .hero-section p {
    margin: 0 0 25px 0;
    font-size: 18px;
    font-weight: 300;
    line-height: 26px; }

  .text-uppercase {
    border-top: 1px solid var(--app-primary-border-color);
    display: block;
    text-align: left; }

  .entry-content .alignfull {
    margin-left  : calc( -100vw / 2 + 100% / 2 );
    margin-right : calc( -100vw / 2 + 100% / 2 );
    max-width    : 100vw;
  }

  .entry-content .alignwide {
    margin-left  : -100px;
    margin-right : -100px;
    max-width    : 1024px;
  }

  .sidebar {
    background: var(--app-secondary-background-color); }

  .sidebar a, .sidebar a:hover {
    border-bottom: none;
    font-weight: normal;
    transition: background-color .3s ease-out;
    -webkit-transition: background-color .3s ease-out;
    -o-transition: background-color .3s ease-out;
  }

  .sidebar-selected {
    background: var(--app-primary-navigation-background);
    color: var(--app-primary-color);
    text-decoration:none; 
    border-bottom: none; }

  /* Classes - Section Layout */

  .ts-section {
      padding: 42px 0;
  }
  .ts-section--border {
      border-top: 1px solid #dadce0;
  }
  .ts-section--no-padding-bottom {
      padding-bottom: 0;
  }
  .ts-section--no-padding-top {
      padding-top: 0;
  }
  .ts-section__header, .ts-section__spacer {
      margin-bottom: 56px;
  }

  .background-servers {
    background: linear-gradient(#253238, #3A464B);
    background-color: #253238;
    color: var(--app-reverse-text-color); }

  .ts-max-width-standard {
    box-sizing: border-box;
    margin-left: auto;
    margin-right: auto;
    max-width: 1024px; }

  .ts-full-bleed-section, 
  #ts-social-footer.ts-full-bleed-section, 
  .ts-max-width-standard {
    margin-left: -10000px;
    margin-right: -10000px;
    padding-left: 10000px;
    padding-right: 10000px; }

  .background-grey {
    background: var(--app-secondary-background-color);
  }

  .ts-pad-bottom-12 {
    padding-bottom: 96px; }

  .ts-pad-top-6 {
    padding-top: 3px; }

  .ts-content-body {
    padding: 0px 34px 0 34px; }

  ul.right-side-nav {
    list-style: none;
    padding-left: 10px; }

  .nav li {
    border-bottom: 1px solid var(--app-primary-border-color);
    margin: 0;
    padding: 0; }

  li, li p {
    margin: 8px 0;
    padding: 0; 
    font-size: 16px; 
    font-weight: 300;
    letter-spacing: 0;
  }

  ul.body-checks {
    list-style: none;
    margin-left: 0px;
    padding: 0 4px 0 4px; 
  }

  ul.body-checks li {
    background-image: url('/images/icons/ts-check-purple-opt.svg');
    font-size: 17px;
    font-weight: 400;
    background-repeat: no-repeat;
    padding: 5px 0 0 36px;
    background-position: 0px 5px; }

  .ts-icon{
    fill: var(--app-primary-color);
  }

  .sidebar a, 
  .sidebar a:hover {
    border-bottom: none;
    font-weight: normal;
    transition: background-color .3s ease-out;
    -webkit-transition: background-color .3s ease-out;
    -o-transition: background-color .3s ease-out;
  }

  .sidebar-selected {
    background: var(--app-primary-navigation-background);
    color: var(--app-primary-color);
    text-decoration:none; 
    border-bottom: none; }

  .nav li h3 {
    font-size: 1.15rem;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    margin: 20px 0 16px;
    padding-bottom: 0; }

  .nav li a {
    color: var(--app-secondary-color);
    display: block;
    font-size: 0.95rem;
    line-height: 40px;
    margin: 0;
    overflow: hidden;
    padding: 0 16px;
    text-align: left;
    text-overflow: ellipsis;
    white-space: nowrap; }

  .nav li a:hover{
    background: var(--app-secondary-background-color);
    color: var(--app-primary-color);
    text-decoration: none; 
    transition: background-color .3s ease-out;
    -webkit-transition: background-color .3s ease-out;
    -o-transition: background-color .3s ease-out;}

  .ts-hero .content-set {
    margin: 50px 0 40px 0;
    padding-bottom: 26px;
  }

  .ts-section--border {
    margin-top: 32px;
  }

  .ts-section__header, .ts-section__spacer {
    margin-bottom: 26px;
  }

  .ts-content-grid-image,
  .ts-content-grid-image-lower {
    padding-bottom: 34px;
    padding-top: 36px;
  }

  .ts-products-and-solutions 
  .card-cta-image 
  .ts-button__set {
    margin-bottom: 24px;
  }

  .ts-element-align {
    text-align: center;
  }
  .ts-element-display {
    display: block;
  }

  /* All screens larger than 460px */

  @media (min-width: 460px) {

    figure.img-right {
      float:right;
      margin-right: 60px;
    }

    figure.img-right img {
      max-width: 100%;
      margin-top: 28px;
      margin-bottom: 20px;
    }

    ul.body-checks {
      padding: 0 5px; 
    }

    .ts-hero .content-set {
      margin: 80px 14px 40px 14px;
    }

    .ts-grid-wrapper-standard {
      margin: auto auto;
      max-width: 1024px; }
    
    .ts-left {
      float: none;
      margin: 0;
      text-align: center;
    }
    .ts-right {
      float: right;
      margin: 24px 30px 5px; }

    .columns {
      display: flex;
      flex-wrap: wrap;
      flex: 1; }  

    section {
      margin: 62px 0 0 0; 
    }

    .ts-section {
      padding: 40px 0;
    }
    .ts-element-align {
      text-align: left;
    }
    .ts-element-display {
      display: block;
    }
    .ts-content-grid-image,
    .ts-content-grid-image-lower {
      padding-bottom: 34px;
      padding-top: 56px;
    }
  }

  @media (min-width: 1024px) {
    .article-image--full, .article-image--full-aspect {
      width: 100%;
    }
    .article-module {
      margin: 35px 0 0 0 !important;
    }
  }


`;_exports.SharedStyles=SharedStyles;var tsStyleShared={SharedStyles:SharedStyles};_exports.$tsStyleShared=tsStyleShared;const TsHomePageStyle=css`
  /* Material Design Typography */

  .ts-home-sections {
    margin-bottom: 100px;
  }

  .ts-section--reversed {
    padding: 72px 0 60px;
  }

  .ts-section--centered {
    text-align: center;
  }

  #ts-site .ts-section--centered .ts-section-header__heading {
    margin: 0 auto;
    max-width: 524px;
  }

  .ts-card {
    display: flex;
    flex-direction: column;
    position: relative;
  }

  .ts-card:hover {
    z-index: 1;
  }

  .ts-card--center {
    text-align: center;
  }

  .ts-card--tall {
    min-height: 480px;
  }

  .ts-card--center .ts-card__body {
    margin-left: auto;
    margin-right: auto;
  }

  .ts-card--center .ts-card__footer {
    align-self: center;
    margin-top: 0;
  }

  #ts-site .ts-card--center .ts-card__heading {
    margin: 0 auto;
  }

  .ts-card__heading {
    max-width: 360px;
    padding: 0;
  }

  .ts-card__arrow {
    margin-top: 8px;
  }

  .ts-card__link {
    position: static;
  }

  .ts-card__link::after {
    content: '';
    display: block;
    height: 100%;
    left: 0;
    overflow: visible;
    position: absolute;
    top: 0;
    width: 100%;
  }

  .ts-card__link--text {
    color: unset;
  }

  .ts-home-sections .ts-section-events {
    margin-top: 40px;
  }

  .ts-section-events {
    position: relative;
  }

  .ts-section-events.next::before,
  .ts-section-events.next::after {
    background-repeat: no-repeat;
    background-size: 36%;
    content: '';
    display: block;
    position: absolute;
    top: -40px;
    z-index: -1;
  }

  .ts-home-sections .ts-section-customers__container {
    background-color: var(--app-secondary-background-color);
  }

  #ts-site .ts-section-customers__container .ts-section-header {
    margin-bottom: 20px;
    padding-bottom: 0;
  }

  .ts-section-customers__logos {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    margin: 24px auto 36px;
    padding: 0;
  }

  .ts-section-customers__logos li {
    align-items: center;
    display: flex;
    justify-content: center;
    list-style-type: none;
    padding: 8px 18px;
  }

  .ts-section-customers__logos .ts-section-customers__logos__logo--no-padding {
    padding-left: 0;
    padding-right: 0;
  }

  .ts-section-customers__logos img {
    max-width: none;
  }

  .ts-card--contact {
    background-color: #34A853; /* $green-500 */
    background-image: url('/images/home/contact-bg.svg');
    background-position: 50% 50%;
    background-size: cover;
  }

  .ts-section-header.ts-section-header--solutions {
    padding: 0 36px 36px 0;
  }

  .ts-card--solution {
    border: 1px solid #eee;
    border-radius: 0;
    height: 100%;
    padding: 36px;
    margin: 0 -1px -1px 0;
  }

  .ts-card--solution.ts-card--product {
    padding: 24px 36px 40px;
  }

  .ts-card--industry {
    background-color: #FBBC04;
    background-image: url('/images/home/industry-bg.svg');
    background-position: 50% 50%;
    background-size: cover;
  }

  .ts-card--solution .ts-card__eyebrow {
    padding-bottom: 20px;
  }

  .ts-card--solution .ts-card__icon {
    height: 72px;
    margin-bottom: 16px;
    margin-left: 0px;
    padding-top: 0;
    width: 72px;
  }

  .ts-card--solution .ts-card__link:hover {
    text-decoration: none;
  }

  .ts-card--solution .ts-card__link:hover .ts-card__heading {
    color: #202124;
  }

  .ts-card--solution .ts-card__body {
    flex-grow: 1;
  }

  .ts-card--solution .ts-card__link {
    margin-top: 24px;
  }
`;_exports.TsHomePageStyle=TsHomePageStyle;var tsStyleHomepage={TsHomePageStyle:TsHomePageStyle};_exports.$tsStyleHomepage=tsStyleHomepage;const displayType=css`block`;class TSHome extends PageViewElement{static get styles(){return[TsButtonStyle,TsGridStyle,TsTypographyStyle,TsLayoutStyle,TsCard,TsElevationStyle,SharedStyles,TsHomePageStyle,css`
      :host {
        display: ${displayType};
        padding: 0px;
      }
      /* Smaller than 460 */

      .wordpress-animated-bg {
        display: none;
      }

      .ts-grid--alternate {
          grid-column-gap: 15px;
          grid-template-columns: repeat(1, 1fr);
      }

      svg.ts-section-right-image {
        width: 100%;
      }

      .ts-card .ts-section-right-image {
        width: 100%;
        height: auto;
      }

      #ts-site .ts-headline3 {
        margin-top: 24px;
      }

      .ts-link .ts-headline4 {
        margin-right: 14px;
      }

      .ts-section-elevated-padding {
          padding: 34px 24px 24px 24px;
      }

      .ts-grid__col--horizontal-center {
        justify-self: inherit;
      }

      path {
        stroke-width: 2;
      }

      .wp-line {
        animation: wp-draw 6s ease-in infinite;
      }

      .purple-line {
        stroke-dasharray: 1200 30;
        stroke-dashoffset: 2700;
        animation: draw 4s linear infinite;
        animation-direction: alternate;
      }

      .green-line {
        stroke-dasharray: 1200 30;
        stroke-dashoffset: 2700;
        animation: draw 7s linear infinite;
        animation-direction: alternate;
      }

      .yellow-line {
        stroke-dasharray: 1200 30;
        stroke-dashoffset: 2700;
        animation: draw 5s linear infinite;
        animation-direction: alternate;
      }

      .orange-line {
        stroke-dasharray: 1200 30;
        stroke-dashoffset: 2700;
        animation: draw 6s linear infinite;
        animation-direction: alternate;
      }

      @keyframes draw {
        from {
          stroke-dashoffset: 0
        }
      }
      @keyframes wp-draw {
        0% {
          stroke: #600066;
          opacity: 1;
        }
        25% {
          stroke: #f4b400;
        }
        50% {
          stroke: #008c3a;
        }
        75% {
          stroke: #ff3102;
        }
        100% {
          stroke: #600066;
        }
        0% {
          stroke: #600066;
          opacity: 0.9;
        }
      }
      @keyframes FadeIn { 
        0% {
          opacity: 0;
          transform: scale(.1);
        }

        85% {
          opacity: 1;
          transform: scale(1.05);
        }
        100% {
          transform: scale(1);
        }
      }

      @media (min-width: 460px) {

        .wordpress-animated-bg {
          display: inline-block;
          position: relative;
          top: 28px;
          right: 0px;
          min-width: auto;
          min-height: 500px;
        }

        .ts-grid__col--horizontal-center {
          justify-self: center;
        }

        section.ts-copy {
          margin: 0;
        }

        .ts-grid-row-start {
          grid-row-start: 1;
        }

        .ts-content-grid-image {
          padding: 44px 0 24px 0;
        }

        .ts-card .ts-link .ts-headline4 {
          margin-right: 14px;
        }
      }

      @media only screen and (min-width: 800px) {
        .ts-grid--alternate.ts-grid--vertical-center, 
        .ts-grid.ts-grid--vertical-center {
            align-items: center;
        }

        .ts-grid--alternate {
          grid-column-gap: 15px;
          grid-template-columns: repeat(12, 1fr);
        }
      }

      @media only screen and (min-width: 1024px) {
        .wordpress-animated-bg {
          display: inline-block;
          position: relative;
          top: 68px;
          right: 0px;
          min-width: auto;
          min-height: 500px;
        }

        .ts-section-right-image {
          width: 370px;
          height: auto;
          margin-left: 34px;
          object-fit:var(--lazy-image-fit);
          position: relative;
        }

        .ts-promo-box-light p {
          padding-right: 34px;
        }

        .ts-section-elevated-padding {
          padding: 24px 0 24px 0;
        }

        .ts-hero::before {
          height: 454px;
          width: 680px;
          content: " ";
          background: url('/images/header/homepage-bg-left.svg') no-repeat;
          position: absolute;
          left: -112px;
          top: 64px;
          z-index: 0;
        }
      }

    `]}render(){updateMetadata({title:"High Availability Hosting and Managed Services for WordPres - Logical Phase",description:"Home page"});return html$1`
    <div class="hypersite-main-content clearfix">
      <article id="ts-site" class="ts-home">
        <header class="ts-hero hero">
          <div class="ts-grid">
            <div class="ts-grid__column is-7 is-6__large is-1__large--offset">
              <header class="ts-grid__column is-7 is-6__large is-1__large--offset">
                <div class="content-set">
                  <h1 class="ts-section-header__eyebrow ts-eyebrow">We make WordPress better</h1>
                  <h2 class="ts-display3">High Availability Hosting and Managed Services for WordPress</h2>
                  <p class="ts-headline4 ts-why-google__intro-text">Hyperfast. Technically superior. Fiercely defended.</p>
                  <div class="ts-section-header__link">
                      <a 
                        href="/contact/" 
                        class="ts-button ts-button--primary" 
                        track-type="navigateTo" 
                        track-name="home"
                        track-metadata-position="banner">Contact a WordPress pro</a>
                  </div>
                </div>
              </header>
            </div>
            <div class="cloud-grid__col is-5">
              <svg viewBox="0 0 740 740" class="wordpress-animated-bg">
                <defs>
                  <path d="M516.98 160.73L525.85 161.63L534.62 162.88L543.27 164.47L551.8 166.39L560.2 168.65L568.47 171.22L576.59 174.1L584.56 177.29L592.38 180.78L600.03 184.56L607.51 188.62L614.82 192.97L621.93 197.58L628.86 202.45L635.59 207.58L642.1 212.96L648.41 218.59L654.5 224.44L660.35 230.53L665.97 236.83L671.35 243.35L676.49 250.08L681.36 257L685.97 264.12L690.31 271.42L694.38 278.91L698.16 286.56L701.65 294.37L704.84 302.35L707.72 310.47L710.29 318.74L712.54 327.14L714.47 335.67L716.06 344.32L717.31 353.09L718.21 361.96L718.75 370.93L718.94 380L718.75 389.07L718.21 398.05L717.31 406.92L716.06 415.69L714.47 424.34L712.54 432.87L710.29 441.28L707.72 449.54L704.84 457.67L701.65 465.64L698.16 473.46L694.38 481.11L690.31 488.59L685.97 495.89L681.36 503.01L676.49 509.93L671.36 516.66L665.98 523.18L660.35 529.48L654.5 535.57L648.41 541.43L642.11 547.05L635.59 552.43L628.86 557.56L621.94 562.43L614.82 567.04L607.52 571.38L600.03 575.45L592.38 579.23L584.57 582.71L576.59 585.9L568.47 588.79L560.2 591.36L551.8 593.61L543.27 595.53L534.62 597.12L525.85 598.37L516.98 599.27L508.01 599.82L498.94 600L489.87 599.82L480.89 599.27L472.02 598.37L463.25 597.12L454.6 595.53L446.07 593.61L437.66 591.36L429.4 588.79L421.27 585.9L413.3 582.71L405.48 579.23L397.83 575.45L390.35 571.38L383.05 567.04L375.93 562.43L369 557.56L362.28 552.43L355.76 547.05L349.45 541.42L343.37 535.57L337.51 529.48L331.89 523.18L326.51 516.66L321.38 509.93L316.51 503.01L311.9 495.89L307.56 488.59L303.49 481.11L299.71 473.46L296.23 465.64L293.04 457.67L290.15 449.54L287.58 441.28L285.33 432.87L283.41 424.34L281.82 415.69L280.57 406.92L279.67 398.05L279.12 389.07L278.94 380L279.12 370.93L279.67 361.96L280.57 353.09L281.82 344.32L283.41 335.67L285.33 327.14L287.58 318.74L290.15 310.47L293.04 302.35L296.23 294.37L299.71 286.56L303.49 278.91L307.56 271.42L311.9 264.12L316.51 257L321.38 250.08L326.51 243.35L331.89 236.83L337.51 230.53L343.37 224.44L349.45 218.59L355.76 212.96L362.28 207.58L369 202.45L375.93 197.58L383.05 192.97L390.35 188.62L397.83 184.56L405.48 180.78L413.3 177.29L421.27 174.1L429.4 171.22L437.66 168.65L446.07 166.39L454.6 164.47L463.25 162.88L472.02 161.63L480.89 160.73L489.87 160.18L498.94 160L508.01 160.18L516.98 160.73ZM442.94 575.19L444.31 575.58L445.68 575.96L447.06 576.33L448.44 576.68L449.83 577.03L451.22 577.37L452.61 577.71L454.01 578.03L455.41 578.34L456.81 578.64L458.22 578.93L459.63 579.22L461.04 579.49L462.46 579.75L463.88 580.01L465.31 580.25L466.74 580.48L468.17 580.71L469.6 580.92L471.04 581.13L472.48 581.32L473.93 581.5L475.37 581.68L476.82 581.84L478.28 582L479.74 582.14L481.2 582.27L482.66 582.39L484.13 582.51L485.59 582.61L487.07 582.7L488.54 582.78L490.02 582.85L491.5 582.91L492.98 582.96L494.47 582.99L495.95 583.02L497.44 583.04L498.94 583.04L500.71 583.03L502.48 583.01L504.24 582.97L506 582.92L507.75 582.85L509.51 582.77L511.25 582.67L513 582.56L514.74 582.43L516.47 582.29L518.21 582.13L519.93 581.96L521.66 581.78L523.38 581.58L525.09 581.36L526.8 581.13L528.51 580.89L530.21 580.63L531.91 580.36L533.6 580.08L535.29 579.78L536.97 579.46L538.65 579.14L540.32 578.8L541.99 578.44L543.65 578.07L545.31 577.69L546.96 577.3L548.6 576.89L550.25 576.47L551.88 576.03L553.51 575.58L555.14 575.12L556.76 574.64L558.37 574.16L559.98 573.65L561.58 573.14L563.18 572.61L564.77 572.07L566.35 571.52L566.31 571.46L566.27 571.39L566.23 571.33L566.19 571.26L566.16 571.2L566.12 571.13L566.08 571.07L566.04 571L566 570.94L565.96 570.87L565.92 570.8L565.89 570.74L565.85 570.67L565.81 570.6L565.77 570.54L565.74 570.47L565.7 570.4L565.66 570.33L565.63 570.26L565.59 570.2L565.55 570.13L565.52 570.06L565.48 569.99L565.45 569.92L565.41 569.85L565.38 569.78L565.34 569.71L565.31 569.64L565.27 569.57L565.24 569.5L565.21 569.42L565.17 569.35L565.14 569.28L565.11 569.2L565.08 569.13L565.04 569.06L565.01 568.98L564.98 568.91L564.95 568.83L564.92 568.76L502.51 397.79L441.57 574.8L442.94 575.19ZM311.83 301.17L311.03 303.09L310.25 305.02L309.49 306.96L308.75 308.91L308.03 310.87L307.33 312.83L306.65 314.81L305.98 316.8L305.34 318.79L304.72 320.79L304.11 322.8L303.53 324.82L302.97 326.85L302.43 328.89L301.91 330.93L301.41 332.99L300.92 335.05L300.47 337.12L300.03 339.2L299.61 341.28L299.22 343.37L298.84 345.47L298.49 347.58L298.16 349.69L297.85 351.82L297.56 353.94L297.3 356.08L297.06 358.22L296.84 360.37L296.64 362.53L296.47 364.69L296.31 366.86L296.19 369.03L296.08 371.22L296 373.4L295.94 375.6L295.9 377.8L295.89 380L295.98 386.01L296.24 391.97L296.67 397.89L297.27 403.76L298.03 409.58L298.96 415.34L300.05 421.05L301.29 426.71L302.69 432.3L304.25 437.83L305.96 443.3L307.81 448.69L309.81 454.02L311.96 459.28L314.24 464.46L316.67 469.57L319.23 474.59L321.93 479.54L324.76 484.4L327.72 489.17L330.8 493.85L334.01 498.45L337.34 502.94L340.79 507.35L344.36 511.65L348.04 515.85L351.84 519.95L355.75 523.94L359.76 527.83L363.88 531.6L368.1 535.26L372.42 538.81L376.84 542.24L381.36 545.54L385.97 548.73L390.67 551.79L395.46 554.72L400.33 557.52L405.29 560.19L410.33 562.72L313.48 297.36L312.64 299.26L311.83 301.17ZM677.22 283.56L677.28 284.05L677.34 284.54L677.41 285.04L677.46 285.53L677.52 286.03L677.58 286.53L677.63 287.03L677.69 287.53L677.74 288.03L677.79 288.54L677.84 289.05L677.88 289.56L677.93 290.07L677.97 290.58L678.01 291.1L678.05 291.62L678.09 292.13L678.13 292.66L678.16 293.18L678.19 293.7L678.23 294.23L678.26 294.76L678.28 295.29L678.31 295.82L678.33 296.35L678.36 296.89L678.38 297.43L678.4 297.97L678.41 298.51L678.43 299.05L678.44 299.6L678.46 300.15L678.47 300.7L678.47 301.25L678.48 301.8L678.49 302.36L678.49 302.92L678.49 303.48L678.48 304.52L678.45 305.61L678.4 306.74L678.33 307.91L678.25 309.12L678.14 310.36L678.02 311.65L677.87 312.97L677.71 314.34L677.52 315.74L677.32 317.19L677.1 318.67L676.86 320.19L676.6 321.75L676.32 323.35L676.02 324.99L675.7 326.67L675.36 328.39L675 330.15L674.62 331.95L674.23 333.79L673.81 335.67L673.38 337.58L672.92 339.54L672.45 341.53L671.96 343.57L671.45 345.64L670.91 347.76L670.36 349.91L669.79 352.1L669.2 354.33L668.6 356.6L667.97 358.91L667.32 361.26L666.65 363.65L665.97 366.08L665.26 368.55L664.54 371.06L663.79 373.61L663.03 376.19L601.02 555.48L605.51 552.79L609.92 549.98L614.26 547.07L618.51 544.05L622.69 540.92L626.77 537.69L630.78 534.35L634.69 530.92L638.52 527.39L642.25 523.76L645.89 520.04L649.44 516.23L652.88 512.32L656.23 508.33L659.48 504.26L662.62 500.1L665.66 495.85L668.59 491.53L671.41 487.13L674.12 482.65L676.71 478.09L679.19 473.47L681.56 468.77L683.8 464.01L685.93 459.18L687.93 454.28L689.81 449.32L691.56 444.3L693.18 439.22L694.67 434.08L696.03 428.89L697.25 423.65L698.33 418.35L699.28 413L700.09 407.61L700.75 402.17L701.28 396.69L701.65 391.17L701.88 385.61L701.95 380.01L701.93 377.36L701.88 374.72L701.8 372.1L701.68 369.48L701.53 366.87L701.35 364.27L701.13 361.67L700.89 359.09L700.61 356.52L700.3 353.95L699.95 351.4L699.58 348.86L699.17 346.33L698.73 343.8L698.26 341.29L697.76 338.79L697.23 336.3L696.67 333.82L696.08 331.36L695.46 328.9L694.81 326.46L694.13 324.03L693.42 321.61L692.69 319.21L691.92 316.81L691.12 314.43L690.3 312.07L689.45 309.71L688.57 307.37L687.66 305.05L686.72 302.74L685.76 300.44L684.77 298.15L683.75 295.89L682.71 293.63L681.63 291.39L680.54 289.17L679.41 286.96L678.26 284.76L677.09 282.59L677.15 283.07L677.22 283.56ZM488.37 177.23L483.13 177.56L477.94 178.03L472.78 178.63L467.66 179.36L462.58 180.21L457.55 181.19L452.56 182.29L447.62 183.51L442.73 184.85L437.89 186.31L433.09 187.89L428.36 189.58L423.67 191.38L419.05 193.3L414.48 195.33L409.97 197.46L405.53 199.71L401.14 202.05L396.82 204.5L392.57 207.05L388.39 209.71L384.28 212.46L380.23 215.3L376.26 218.25L372.37 221.28L368.55 224.41L364.81 227.63L361.15 230.93L357.57 234.32L354.08 237.8L350.67 241.36L347.34 245.01L344.11 248.73L340.96 252.53L337.9 256.41L334.94 260.36L332.07 264.39L329.3 268.49L329.66 268.5L330.01 268.51L330.37 268.52L330.72 268.53L331.07 268.54L331.42 268.55L331.77 268.56L332.12 268.57L332.47 268.57L332.81 268.58L333.16 268.59L333.5 268.6L333.84 268.61L334.18 268.62L334.52 268.62L334.86 268.63L335.19 268.64L335.52 268.64L335.86 268.65L336.19 268.66L336.51 268.66L336.84 268.67L337.16 268.68L337.48 268.68L337.8 268.69L338.12 268.69L338.44 268.7L338.75 268.7L339.06 268.7L339.37 268.71L339.68 268.71L339.99 268.71L340.29 268.72L340.59 268.72L340.89 268.72L341.19 268.72L341.48 268.72L341.77 268.72L342.06 268.72L342.35 268.72L343.96 268.72L345.62 268.71L347.31 268.68L349.03 268.65L350.78 268.61L352.55 268.57L354.34 268.51L356.14 268.45L357.95 268.39L359.77 268.32L361.59 268.24L363.41 268.16L365.23 268.08L367.03 267.99L368.82 267.9L370.58 267.81L372.33 267.72L374.05 267.62L375.73 267.52L377.38 267.43L378.99 267.33L380.56 267.23L382.08 267.14L383.55 267.04L384.95 266.95L386.3 266.86L387.59 266.77L388.8 266.69L389.94 266.61L391.01 266.53L391.99 266.46L392.89 266.4L393.7 266.34L394.41 266.29L395.02 266.24L395.54 266.2L395.94 266.17L396.24 266.15L396.42 266.13L396.48 266.13L397.28 266.11L398.04 266.16L398.77 266.26L399.46 266.42L400.11 266.62L400.73 266.87L401.31 267.17L401.85 267.51L402.36 267.89L402.82 268.31L403.25 268.76L403.64 269.23L403.99 269.74L404.3 270.27L404.57 270.82L404.8 271.39L404.99 271.97L405.15 272.57L405.26 273.18L405.33 273.79L405.35 274.41L405.34 275.02L405.29 275.64L405.19 276.25L405.06 276.85L404.88 277.44L404.65 278.01L404.39 278.57L404.08 279.11L403.73 279.63L403.33 280.12L402.9 280.58L402.41 281.01L401.89 281.4L401.31 281.76L400.7 282.07L400.04 282.35L399.33 282.57L398.58 282.75L397.78 282.88L397.76 282.88L397.7 282.88L397.6 282.9L397.46 282.91L397.28 282.93L397.07 282.96L396.82 282.98L396.54 283.01L396.22 283.05L395.87 283.08L395.48 283.13L395.07 283.17L394.62 283.21L394.15 283.26L393.65 283.31L393.12 283.37L392.56 283.42L391.98 283.48L391.37 283.54L390.74 283.6L390.09 283.66L389.41 283.72L388.72 283.78L388 283.84L387.26 283.91L386.51 283.97L385.73 284.04L384.95 284.1L384.14 284.17L383.32 284.23L382.49 284.29L381.64 284.36L380.78 284.42L379.92 284.48L379.04 284.54L378.15 284.6L377.25 284.65L376.35 284.71L375.44 284.76L374.52 284.81L448.48 504.72L492.9 371.49L461.29 284.81L460.47 284.76L459.66 284.71L458.84 284.65L458.04 284.6L457.23 284.54L456.44 284.48L455.65 284.42L454.87 284.36L454.1 284.29L453.34 284.23L452.6 284.17L451.86 284.1L451.14 284.04L450.43 283.97L449.74 283.91L449.06 283.84L448.4 283.78L447.76 283.72L447.13 283.66L446.53 283.6L445.94 283.54L445.38 283.48L444.84 283.42L444.32 283.37L443.83 283.31L443.36 283.26L442.92 283.21L442.51 283.17L442.12 283.13L441.76 283.08L441.43 283.05L441.14 283.01L440.87 282.98L440.64 282.96L440.44 282.93L440.27 282.91L440.14 282.9L440.05 282.88L439.99 282.88L439.97 282.88L439.17 282.8L438.42 282.66L437.72 282.48L437.06 282.24L436.44 281.95L435.87 281.62L435.34 281.24L434.86 280.83L434.42 280.39L434.03 279.91L433.68 279.4L433.37 278.86L433.1 278.31L432.88 277.73L432.7 277.14L432.56 276.53L432.46 275.92L432.41 275.29L432.39 274.67L432.42 274.04L432.49 273.41L432.6 272.79L432.75 272.18L432.94 271.58L433.17 270.99L433.44 270.43L433.75 269.88L434.1 269.36L434.49 268.87L434.91 268.4L435.38 267.97L435.88 267.58L436.42 267.22L437.01 266.91L437.62 266.65L438.28 266.43L438.97 266.27L439.7 266.16L440.47 266.11L441.27 266.13L441.33 266.13L441.52 266.15L441.82 266.17L442.23 266.2L442.75 266.24L443.37 266.29L444.1 266.34L444.91 266.4L445.82 266.46L446.82 266.53L447.89 266.61L449.05 266.69L450.27 266.77L451.57 266.86L452.92 266.95L454.34 267.04L455.81 267.14L457.34 267.23L458.91 267.33L460.52 267.43L462.17 267.52L463.85 267.62L465.56 267.72L467.29 267.81L469.05 267.9L470.82 267.99L472.6 268.08L474.39 268.16L476.17 268.24L477.96 268.32L479.74 268.39L481.51 268.45L483.26 268.51L485 268.57L486.71 268.61L488.39 268.65L490.04 268.68L491.65 268.71L493.21 268.72L494.73 268.72L496.35 268.72L498 268.71L499.69 268.68L501.41 268.65L503.16 268.61L504.92 268.57L506.71 268.51L508.52 268.45L510.33 268.39L512.15 268.32L513.97 268.24L515.79 268.16L517.6 268.08L519.4 267.99L521.19 267.9L522.96 267.81L524.7 267.72L526.42 267.62L528.11 267.52L529.76 267.43L531.37 267.33L532.94 267.23L534.46 267.14L535.92 267.04L537.33 266.95L538.68 266.86L539.97 266.77L541.18 266.69L542.33 266.61L543.39 266.53L544.37 266.46L545.27 266.4L546.08 266.34L546.79 266.29L547.41 266.24L547.92 266.2L548.33 266.17L548.62 266.15L548.8 266.13L548.86 266.13L549.66 266.11L550.43 266.16L551.15 266.26L551.85 266.42L552.5 266.62L553.12 266.87L553.69 267.17L554.24 267.51L554.74 267.89L555.2 268.31L555.63 268.76L556.02 269.23L556.37 269.74L556.68 270.27L556.95 270.82L557.18 271.39L557.37 271.97L557.52 272.57L557.63 273.18L557.7 273.79L557.72 274.41L557.71 275.02L557.65 275.64L557.56 276.25L557.42 276.85L557.24 277.44L557.02 278.01L556.75 278.57L556.44 279.11L556.09 279.63L555.69 280.12L555.25 280.58L554.77 281.01L554.24 281.4L553.67 281.76L553.06 282.07L552.39 282.35L551.69 282.57L550.94 282.75L550.14 282.88L550.12 282.88L550.06 282.88L549.96 282.9L549.82 282.91L549.64 282.93L549.43 282.96L549.18 282.98L548.9 283.01L548.58 283.05L548.23 283.08L547.85 283.13L547.44 283.17L546.99 283.21L546.52 283.26L546.02 283.31L545.49 283.37L544.93 283.42L544.35 283.48L543.75 283.54L543.12 283.6L542.46 283.66L541.79 283.72L541.09 283.78L540.38 283.84L539.64 283.91L538.89 283.97L538.12 284.04L537.33 284.1L536.52 284.17L535.7 284.23L534.87 284.29L534.03 284.36L533.17 284.42L532.3 284.48L531.42 284.54L530.53 284.6L529.64 284.65L528.73 284.71L527.82 284.76L526.91 284.81L600.29 503.04L620.55 435.4L621.31 433.43L622.05 431.48L622.78 429.54L623.48 427.62L624.17 425.71L624.83 423.83L625.48 421.96L626.11 420.1L626.71 418.27L627.3 416.45L627.87 414.65L628.42 412.86L628.95 411.1L629.47 409.35L629.96 407.61L630.43 405.9L630.89 404.2L631.32 402.51L631.74 400.85L632.13 399.2L632.51 397.56L632.87 395.95L633.21 394.35L633.53 392.77L633.82 391.2L634.11 389.66L634.37 388.13L634.61 386.61L634.83 385.11L635.03 383.63L635.22 382.17L635.38 380.72L635.53 379.29L635.65 377.88L635.76 376.48L635.85 375.1L635.92 373.74L635.96 372.39L635.99 371.06L636 369.75L635.99 367.88L635.94 366.04L635.86 364.23L635.74 362.45L635.6 360.69L635.43 358.96L635.23 357.26L635 355.59L634.75 353.94L634.47 352.31L634.17 350.71L633.84 349.14L633.49 347.59L633.12 346.07L632.73 344.57L632.33 343.09L631.9 341.63L631.45 340.2L630.99 338.79L630.52 337.41L630.03 336.04L629.52 334.7L629 333.38L628.48 332.07L627.94 330.79L627.39 329.53L626.83 328.29L626.27 327.06L625.7 325.86L625.12 324.67L624.54 323.51L623.95 322.36L623.36 321.22L622.77 320.11L622.18 319.01L621.59 317.93L621 316.86L620.41 315.81L619.83 314.77L619.25 313.75L618.48 312.5L617.71 311.26L616.95 310.03L616.19 308.81L615.44 307.59L614.7 306.39L613.96 305.18L613.23 303.99L612.51 302.8L611.8 301.62L611.1 300.44L610.41 299.26L609.74 298.09L609.08 296.92L608.43 295.76L607.8 294.59L607.18 293.43L606.58 292.27L606 291.11L605.43 289.96L604.89 288.8L604.36 287.64L603.86 286.48L603.38 285.32L602.92 284.15L602.48 282.99L602.07 281.82L601.69 280.65L601.33 279.47L600.99 278.29L600.69 277.1L600.41 275.91L600.16 274.72L599.95 273.51L599.76 272.3L599.6 271.08L599.48 269.86L599.4 268.63L599.34 267.38L599.32 266.13L599.35 264.74L599.43 263.35L599.56 261.96L599.74 260.59L599.97 259.23L600.25 257.88L600.58 256.54L600.95 255.22L601.37 253.92L601.84 252.63L602.36 251.37L602.91 250.13L603.51 248.9L604.16 247.71L604.84 246.54L605.57 245.39L606.34 244.28L607.15 243.2L608 242.15L608.88 241.13L609.8 240.14L610.76 239.2L611.76 238.29L612.79 237.42L613.85 236.59L614.95 235.81L616.09 235.06L617.25 234.37L618.44 233.72L619.67 233.12L620.92 232.57L622.21 232.07L623.52 231.62L624.86 231.23L626.23 230.9L627.62 230.62L629.04 230.4L630.48 230.24L631.94 230.15L633.43 230.11L633.5 230.11L633.56 230.12L633.63 230.12L633.69 230.12L633.76 230.12L633.82 230.12L633.89 230.12L633.95 230.13L634.02 230.13L634.08 230.13L634.15 230.14L634.21 230.14L634.28 230.14L634.34 230.15L634.41 230.15L634.47 230.16L634.54 230.16L634.6 230.16L634.67 230.17L634.74 230.17L634.8 230.18L634.87 230.19L634.93 230.19L635 230.2L635.06 230.2L635.13 230.21L635.19 230.21L635.26 230.22L635.32 230.23L635.45 230.24L635.52 230.24L635.58 230.25L635.65 230.25L635.71 230.26L635.78 230.27L635.84 230.27L635.91 230.28L635.97 230.28L636.04 230.29L633.31 227.83L630.53 225.42L627.71 223.06L624.85 220.75L621.95 218.49L619 216.28L616.02 214.13L612.99 212.03L609.92 209.98L606.82 207.99L603.67 206.05L600.49 204.17L597.27 202.34L594.02 200.57L590.73 198.86L587.4 197.21L584.05 195.62L580.65 194.09L577.23 192.62L573.77 191.21L570.28 189.86L566.76 188.57L563.21 187.35L559.63 186.19L556.03 185.1L552.39 184.07L548.73 183.11L545.04 182.22L541.32 181.39L537.58 180.63L533.82 179.95L530.03 179.33L526.22 178.78L522.38 178.3L518.53 177.89L514.65 177.56L510.75 177.3L506.83 177.11L502.89 177L498.94 176.96L493.64 177.03L488.37 177.23Z" id="a"></path>
                  <path d="M239.06 63c20.27 0 36.71 18.01 36.71 40.22 0 .84-.02 1.67-.07 2.49 14.64 3.38 25.41 14.69 25.41 28.13 0 16.1-15.46 29.16-34.53 29.16h-86.61c-19.07 0-34.53-13.06-34.53-29.16 0-14.04 11.75-25.76 27.39-28.53 1.41-15.22 13.13-27.1 27.4-27.1 3.13 0 6.14.57 8.95 1.63C215.84 69.64 226.74 63 239.06 63z" id="b"/>
                  <path d="M301.44 270.38c0 2.75-2.24 5-5 5s-5-2.25-5-5c0-2.76 2.24-5 5-5s5 2.24 5 5z" id="c"/>
                  <path d="M294.44 270.38h-67V121" id="d"/>
                  <path d="M232.44 121c0 2.76-2.24 5-5 5s-5-2.24-5-5 2.24-5 5-5 5 2.24 5 5z" id="e"/>
                  <path d="M519.25 22.38v-.13l.01-.13.01-.13.02-.12.03-.12.03-.13.03-.11.04-.12.05-.12.05-.11.05-.11.06-.11.06-.11.07-.1.07-.1.07-.1.08-.1.09-.09.08-.09.09-.08.1-.09.09-.08.1-.07.11-.08.1-.07.11-.06.11-.06.12-.06.12-.05.12-.05.12-.05.13-.04.12-.04.13-.03.13-.03.14-.02.13-.02.14-.01.14-.01h13.82l.13.01.14.01.14.02.13.02.13.03.13.03.13.04.12.04.12.05.12.05.12.05.12.06.11.06.11.06.11.07.1.08.1.07.1.08.09.09.09.08.09.09.08.09.08.1.07.1.07.1.07.1.06.11.06.11.06.11.04.11.05.12.04.12.03.11.03.13.03.12.02.12.01.13.01.13V55.19l13.54 14.06h-13.54V113h-30.14V82.36l-.01-.13-.01-.14-.02-.14-.03-.13-.03-.13-.04-.13-.04-.12-.04-.13-.05-.12-.06-.12-.06-.12-.06-.11-.07-.11-.08-.11-.07-.11-.08-.1-.09-.1-.09-.1-.09-.09-.1-.09-.1-.09-.1-.08-.11-.08-.11-.07-.11-.08-.12-.06-.12-.06-.12-.06-.12-.06-.13-.04-.13-.05-.13-.04-.13-.03-.14-.03-.14-.03-.14-.02-.14-.01-.14-.01H491.81l-.15.01-.14.01-.14.02-.13.03-.14.03-.13.03-.14.04-.12.05-.13.04-.12.06-.13.06-.12.06-.11.06-.11.08-.11.07-.11.08-.1.08-.1.09-.1.09-.09.09-.09.1-.09.1-.08.1-.08.11-.07.11-.07.11-.07.11-.06.12-.05.12-.05.12-.05.13-.04.12-.03.13-.03.13-.03.13-.02.14-.01.14-.01.13-.01.14v30.35l.01.14v.01h-30.15V69.25h-13.54L498.94 13l20.31 21.09V22.38z" id="f"/>
                  <path d="M503.94 63c0 2.76-2.24 5-5 5s-5-2.24-5-5 2.24-5 5-5 5 2.24 5 5z" id="g"/>
                  <path d="M503.94 149.94c0 2.76-2.24 5-5 5s-5-2.24-5-5 2.24-5 5-5 5 2.24 5 5z" id="h"/>
                  <path d="M498.94 149.94V63" id="i"/>
                  <path d="M31.9 665V535h132v130h-132zm16.5-16.25l24.75-24.37 16.5 8.12L114.4 600l33 43.33v-92.08h-99v97.5zm30.06-79.17l.58.06.58.08.57.1.56.12.55.15.54.17.53.18.53.21.51.22.5.25.49.26.48.28.47.3.45.31.44.34.43.34.42.37.4.38.38.39.37.41.35.42.34.43.32.45.3.46.29.47.26.49.25.49.23.51.21.51.19.53.17.53.14.54.13.55.11.56.08.57.06.57.03.58.01.59-.01.59-.03.58-.06.57-.08.57-.11.56-.13.55-.14.54-.17.53-.19.53-.21.51-.23.51-.25.49-.26.49-.29.47-.3.46-.32.45-.34.43-.35.42-.37.41-.38.39-.4.38-.42.37-.43.34-.44.34-.45.31-.47.3-.48.28-.49.26-.5.25-.51.22-.53.21-.53.18-.54.17-.55.15-.56.12-.57.1-.58.08-.58.06-.59.04-.59.01-.6-.01-.59-.04-.58-.06-.57-.08-.57-.1-.56-.12-.55-.15-.55-.17-.53-.18-.52-.21-.52-.22-.5-.25-.49-.26-.48-.28-.47-.3-.45-.31-.44-.34-.43-.34-.41-.37-.4-.38-.39-.39-.37-.41-.35-.42-.33-.43-.32-.45-.31-.46-.28-.47-.27-.49-.25-.49-.23-.51-.21-.51-.18-.53-.17-.53-.15-.54-.13-.55-.1-.56-.08-.57-.06-.57-.04-.58-.01-.59.01-.59.04-.58.06-.57.08-.57.1-.56.13-.55.15-.54.17-.53.18-.53.21-.51.23-.51.25-.49.27-.49.28-.47.31-.46.32-.45.33-.43.35-.42.37-.41.39-.39.4-.38.41-.37.43-.34.44-.34.45-.31.47-.3.48-.28.49-.26.5-.25.52-.22.52-.21.53-.18.55-.17.55-.15.56-.12.57-.1.57-.08.58-.06.59-.04.6-.01.59.01.59.04z" id="j"/>
                  <path d="M103.4 595c0 2.76-2.24 5-5 5s-5-2.24-5-5 2.24-5 5-5 5 2.24 5 5z" id="k"/>
                  <path d="M420.18 595c0 2.76-2.24 5-5 5s-5-2.24-5-5 2.24-5 5-5 5 2.24 5 5z" id="l"/>
                  <path d="M415.18 595H97.9" id="m"/>
                  <path d="M46.99 330.01l.16.02.16.02.15.03.15.03.15.04.14.04.13.05.13.05.13.06.13.07.12.07.11.07.12.08.11.08.11.09.1.09.1.1.1.1.1.1.09.11.09.11.09.11.09.12.08.12.08.12.09.13.08.13.07.13.08.14.08.14.07.14.08.14.07.15.07.14.08.15.07.15.07.16.07.15 2.24 5.93h75.19l.16.01.15.02.16.02.15.04.15.04.14.04.15.06.14.06.14.06.14.07.13.08.13.08.13.09.12.1.12.1.12.1.12.11.11.12.1.12.1.12.1.13.1.14.09.14.08.14.08.14.08.15.07.16.06.15.07.17.05.16.05.17.05.17.04.17.03.17.03.18.02.18.02.18v.19l.01.18v81.3l-.01.19v.18l-.02.19-.02.18-.03.17-.03.18-.04.17-.05.17-.05.17-.05.16-.07.16-.06.16-.07.15-.08.15-.08.15-.08.14-.09.14-.1.13-.1.13-.1.13-.1.12-.11.11-.12.11-.12.11-.12.1-.12.09-.13.09-.13.09-.13.07-.14.07-.14.07-.14.06-.15.05-.14.05-.15.04-.15.03-.16.03-.15.02-.16.01H12.69l-.15-.01-.16-.02-.15-.03-.15-.03-.15-.04-.15-.05-.14-.05-.14-.06-.14-.07-.14-.07-.13-.07-.13-.09-.13-.09-.13-.09-.12-.1-.12-.11-.11-.11-.11-.11-.11-.12-.1-.13-.1-.13-.09-.13-.09-.14-.09-.14-.08-.15-.07-.15-.07-.15-.07-.16-.06-.16-.06-.16-.05-.17-.04-.17-.04-.17-.03-.18-.03-.17-.02-.18-.02-.19-.01-.18V344l.01-.19.02-.18.02-.18.03-.18.03-.17.04-.17.04-.17.05-.17.06-.16.06-.17.07-.15.07-.16.07-.15.08-.14.09-.14.09-.14.09-.14.1-.13.1-.12.11-.12.11-.12.11-.11.12-.1.12-.1.13-.1.13-.09.13-.08.13-.08.14-.07.14-.06.14-.06.14-.06.15-.04.15-.04.15-.04.15-.02.16-.02.15-.01H14.7l2.24-5.93.05-.15.06-.16.05-.15.06-.15.06-.14.07-.15.06-.14.07-.14.07-.14.07-.14.08-.13.07-.13.09-.13.08-.12.09-.12.08-.12.1-.11.09-.11.1-.11.1-.1.1-.1.11-.1.11-.09.12-.09.11-.08.12-.08.13-.07.12-.07.13-.07.14-.06.14-.05.14-.05.15-.04.14-.04.16-.03.16-.03.16-.02.16-.02.17-.01H46.82l.17.01z" id="n"/>
                  <path d="M76.68 385c0 2.76-2.24 5-5 5s-5-2.24-5-5 2.24-5 5-5 5 2.24 5 5z" id="o"/>
                  <path d="M273.96 385c0 2.76-2.24 5-5 5s-5-2.24-5-5 2.24-5 5-5 5 2.24 5 5z" id="p"/>
                  <path d="M270.05 385H71.68" id="q"/>
                </defs>
                <use xlink:href="#a" fill-opacity="0" stroke="#0273d4" class="wp-line"/>
                <use xlink:href="#b" fill="#964456" fill-opacity="0"/>
                <use xlink:href="#b" fill-opacity="0" stroke="#600060" stroke-width="2"/>
                <use xlink:href="#c" fill="#600060"/>
                <use xlink:href="#d" fill-opacity="0" stroke="#600060" class="purple-line"/>
                <use xlink:href="#e" fill="#600060"/>
                <use xlink:href="#f" fill-opacity="0" stroke="#008c3a" stroke-width="2"/>
                <use xlink:href="#g" fill="#008c3a"/>
                <use xlink:href="#h" fill="#008c3a"/>
                <use xlink:href="#i" fill-opacity="0" stroke="#008c3a" class="green-line"/>
                <use xlink:href="#j" fill-opacity="0" stroke="#ff3102" stroke-width="2" />
                <use xlink:href="#k" fill="#ff3102" />
                <use xlink:href="#l" fill="#ff3102"/>
                <use xlink:href="#m" fill-opacity="0" stroke="#ff3102" class="orange-line"/>
                <use xlink:href="#n" fill-opacity="0" stroke="#f4b400" stroke-width="2"/>
                <use xlink:href="#o" fill="#f4b400"/>
                <use xlink:href="#p" fill="#f4b400"/>
                <g>
                  <use xlink:href="#q" fill-opacity="0" stroke="#f4b400" class="yellow-line"/>
                </g>
              </svg>
            </div>
          </div>
        </header>
        <div class="ts-section ts-section--border">
          <div class="ts-section__spacer">
            <section class="ts-copy">
              <div class="ts-grid--alternate ts-copy__inner ts-copy--60-40 ts-grid--vertical-center mdc-elevation--z20 ts-section-elevated-padding">
                <div class="ts-grid__col ts-copy--flipped ts-grid__col--horizontal-center ts-copy__img is-4 is-8--offset is-7__large--offset ts-grid-row-start">
                  <svg slot="placeholder" class="ts-section-right-image" version="1.1" viewBox="2 122.3 637.26 349.3" xmlns="http://www.w3.org/2000/svg" xlink:href="#placeholder-svg">
                    <defs>
                      <path id="aHIf0e791" d="m164.42 134.68v-0.42c0-5.83-4.95-10.6-10.99-10.6h-25.44c-6.04 0-10.98 4.77-10.98 10.6v11.03 24.04 23.15c0 5.83 4.94 10.6 10.98 10.6h86.83c6.04 0 10.98-4.77 10.98-10.6v-47.19c0-5.83-4.94-10.61-10.98-10.61h-50.4z"/>
                      <path id="aebH7nnDc" d="m317.32 134.68v-0.42c0-5.83-4.94-10.6-10.98-10.6h-25.44c-6.04 0-10.98 4.77-10.98 10.6v11.03 24.04 23.15c0 5.83 4.94 10.6 10.98 10.6h86.82c6.04 0 10.99-4.77 10.99-10.6v-47.19c0-5.83-4.95-10.61-10.99-10.61h-50.4z"/>
                      <path id="d1deglR8f3" d="m470.97 134.33v-0.42c0-5.84-4.94-10.61-10.98-10.61h-25.44c-6.04 0-10.99 4.77-10.99 10.61v11.02 24.05 23.14c0 5.83 4.95 10.61 10.99 10.61h86.82c6.04 0 10.98-4.78 10.98-10.61v-47.19c0-5.83-4.94-10.6-10.98-10.6h-50.4z"/>
                      <path id="f3pTna63Hq" d="m33.52 438.46v-126.27c0-3.89 3.3-7.08 7.34-7.08h195.4c4.04 0 7.34 3.19 7.34 7.08v126.27h-210.08z"/>
                      <path id="e2xrknzxtr" d="m5.74 462.6c-1.51 0-2.74 0.69-2.74 1.52v2.96c0 0.83 1.23 1.52 2.74 1.52h267.02c1.5 0 2.73-0.69 2.73-1.52v-2.96c0-0.83-1.23-1.52-2.73-1.52h-267.02z"/>
                      <path id="d2zIsGwE5p" d="m394.29 438.46v-126.27c0-3.89 3.3-7.08 7.34-7.08h195.4c4.04 0 7.34 3.19 7.34 7.08v126.27h-210.08z"/>
                      <path id="a5lG4suEpl" d="m511.16 355.62v-0.07l0.01-0.07v-0.07l0.01-0.06 0.02-0.07 0.01-0.06 0.02-0.07 0.04-0.12 0.12-0.24 0.03-0.05 0.04-0.06 0.16-0.2 0.05-0.05 0.2-0.16 0.06-0.04 0.05-0.03 0.06-0.04 0.12-0.06 0.06-0.02 0.06-0.03 0.07-0.02 0.06-0.02 0.07-0.02 0.07-0.01 0.06-0.01 0.14-0.02h0.07l0.07-0.01h6.93l0.08 0.01h0.07l0.14 0.02 0.06 0.01 0.07 0.01 0.07 0.02 0.06 0.02 0.07 0.02 0.06 0.03 0.06 0.02 0.12 0.06 0.06 0.04 0.05 0.03 0.06 0.04 0.2 0.16 0.05 0.05 0.16 0.2 0.04 0.06 0.03 0.05 0.12 0.24 0.04 0.12 0.02 0.07 0.01 0.06 0.01 0.07 0.01 0.06 0.02 0.14v0.07 17.56l6.93 7.53h-6.93v23.42h-15.43v-0.01-0.07-16.25-0.07-0.08l-0.03-0.21-0.06-0.21-0.02-0.06-0.03-0.07-0.03-0.06-0.03-0.07-0.03-0.06-0.04-0.06-0.03-0.06-0.04-0.05-0.04-0.06-0.05-0.05-0.04-0.05-0.15-0.15-0.06-0.04-0.05-0.04-0.06-0.04-0.05-0.04-0.06-0.04-0.06-0.03-0.07-0.03-0.12-0.06-0.28-0.08-0.21-0.03h-0.07-0.08-7.15-0.07-0.08l-0.21 0.03-0.14 0.04-0.06 0.02-0.07 0.02-0.07 0.03-0.18 0.09-0.18 0.12-0.1 0.08-0.2 0.2-0.04 0.05-0.04 0.06-0.04 0.05-0.04 0.06-0.03 0.06-0.04 0.06-0.03 0.07-0.03 0.06-0.02 0.07-0.03 0.06-0.04 0.14-0.04 0.28-0.01 0.08v0.07 16.25 0.07 0.01h-15.42v-23.42h-6.93l27.72-30.11 10.39 11.29v-6.27z"/>
                      <path id="aj6LbcupC" d="m366.5 462.6c-1.5 0-2.73 0.69-2.73 1.52v2.96c0 0.83 1.23 1.52 2.73 1.52h267.02c1.51 0 2.74-0.69 2.74-1.52v-2.96c0-0.83-1.23-1.52-2.74-1.52h-267.02z"/>
                      <path id="jOHMth2jB" d="m135.4 350.72 1.3 0.15 1.29 0.21 1.27 0.27 1.25 0.32 1.22 0.37 1.2 0.43 1.17 0.48 1.14 0.53 1.11 0.57 1.08 0.62 1.05 0.67 1.02 0.71 0.98 0.76 0.94 0.79 0.91 0.84 0.86 0.87 0.83 0.91 0.78 0.95 0.73 0.98 0.7 1.01 0.64 1.05 0.6 1.07 0.54 1.1 0.5 1.13 0.44 1.16 0.39 1.18 0.33 1.2 0.28 1.23 0.21 1.24 0.16 1.27 0.09 1.28 0.04 1.29-0.04 1.3-0.09 1.28-0.16 1.27-0.21 1.24-0.28 1.22-0.33 1.21-0.39 1.18-0.44 1.15-0.5 1.13-0.54 1.11-0.6 1.07-0.64 1.05-0.7 1.01-0.73 0.98-0.78 0.95-0.83 0.91-0.86 0.87-0.91 0.84-0.94 0.79-0.98 0.76-1.02 0.71-1.05 0.66-1.08 0.63-1.11 0.57-1.14 0.53-1.17 0.48-1.2 0.43-1.22 0.37-1.25 0.32-1.27 0.27-1.29 0.21-1.3 0.15-1.33 0.09-1.34 0.03-1.35-0.03-1.32-0.09-1.31-0.15-1.29-0.21-1.27-0.27-1.25-0.32-1.22-0.37-1.2-0.43-1.17-0.48-1.14-0.53-1.11-0.57-1.08-0.63-1.05-0.66-1.02-0.71-0.98-0.76-0.94-0.79-0.9-0.84-0.87-0.87-0.82-0.91-0.78-0.95-0.74-0.98-0.69-1.01-0.65-1.05-0.59-1.07-0.55-1.11-0.5-1.13-0.44-1.15-0.39-1.18-0.33-1.21-0.27-1.22-0.22-1.24-0.16-1.27-0.09-1.28-0.03-1.3 0.03-1.29 0.09-1.28 0.16-1.27 0.22-1.24 0.27-1.23 0.33-1.2 0.39-1.18 0.44-1.16 0.5-1.13 0.55-1.1 0.59-1.07 0.65-1.05 0.69-1.01 0.74-0.98 0.78-0.95 0.82-0.91 0.87-0.87 0.9-0.84 0.94-0.79 0.98-0.76 1.02-0.71 1.05-0.67 1.08-0.62 1.11-0.57 1.14-0.53 1.17-0.48 1.2-0.43 1.22-0.37 1.25-0.32 1.27-0.27 1.29-0.21 1.31-0.15 1.32-0.09 1.35-0.03 1.34 0.03 1.33 0.09zm-9.33 50.5 0.59 0.14 0.58 0.13 0.59 0.12 0.6 0.11 0.6 0.09 0.61 0.08 0.61 0.06 0.61 0.05 0.62 0.04 0.62 0.02 0.63 0.01 0.74-0.01 0.73-0.04 0.74-0.05 0.72-0.07 0.72-0.09 0.71-0.11 0.71-0.12 0.7-0.15 0.69-0.16 0.69-0.19 0.67-0.2 0.67-0.22-0.02-0.02-0.01-0.03-0.02-0.03-0.01-0.02-0.04-0.06-0.01-0.03-0.02-0.02-0.02-0.06-0.02-0.03-0.01-0.03-7.86-20.8-7.68 21.53 0.57 0.16zm-17.28-32.57-0.26 0.68-0.23 0.69-0.21 0.7-0.2 0.71-0.17 0.72-0.15 0.72-0.13 0.73-0.11 0.74-0.08 0.75-0.06 0.75-0.03 0.76-0.02 0.76 0.09 2.08 0.26 2.02 0.43 1.98 0.59 1.91 0.74 1.84 0.88 1.77 1.02 1.69 1.15 1.59 1.28 1.51 1.39 1.4 1.5 1.29 1.61 1.18 1.7 1.05 1.78 0.92-12.2-32.28-0.3 0.66-0.27 0.68zm46.43-2.8 0.02 0.18 0.02 0.17 0.01 0.18 0.02 0.18 0.01 0.18 0.02 0.18 0.01 0.18v0.19l0.02 0.38v0.19 0.19l-0.01 0.38-0.03 0.42-0.05 0.45-0.07 0.5-0.09 0.53-0.11 0.58-0.13 0.61-0.15 0.65-0.17 0.69-0.18 0.73-0.21 0.77-0.23 0.81-0.25 0.84-0.27 0.89-7.81 21.81 1.59-0.97 1.51-1.08 1.42-1.18 1.32-1.28 1.23-1.36 1.13-1.46 1.01-1.53 0.89-1.6 0.78-1.68 0.64-1.74 0.52-1.79 0.37-1.85 0.23-1.89 0.08-1.94-0.02-0.91-0.05-0.91-0.09-0.9-0.12-0.89-0.15-0.88-0.18-0.87-0.21-0.85-0.25-0.85-0.27-0.83-0.3-0.82-0.34-0.81-0.36-0.79-0.38-0.78-0.42-0.76 0.03 0.17 0.02 0.17zm-23.83-13.16-0.66 0.05-0.65 0.05-0.65 0.08-0.64 0.08-0.64 0.11-0.64 0.12-0.63 0.13-0.62 0.15-0.62 0.16-0.61 0.18-0.6 0.19-0.6 0.21-0.59 0.22-0.58 0.23-0.58 0.25-0.56 0.26-0.56 0.27-0.56 0.28-0.54 0.3-0.54 0.31-1.04 0.66-0.51 0.35-0.5 0.35-0.49 0.37-0.48 0.38-0.47 0.4-0.46 0.4-0.46 0.41-0.44 0.42-0.43 0.44-0.41 0.44-0.41 0.45-0.4 0.47-0.38 0.47-0.38 0.48-0.36 0.49-0.35 0.5h0.05 0.04 0.05 0.04 0.05 0.04l0.04 0.01h0.05 0.09 0.04 0.04 0.09 0.04 0.04l0.04 0.01h0.05 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04l0.04 0.01h0.04 0.03 0.04 0.04 0.03 0.04 0.04 0.2l0.21-0.01h0.21 0.22l0.22-0.01h0.22l0.23-0.01 0.22-0.01h0.23l1.15-0.05 0.22-0.01 0.22-0.02 0.44-0.02 0.42-0.02 0.2-0.01 0.2-0.02 0.38-0.02 0.51-0.03 0.15-0.01 0.28-0.02 0.12-0.01 0.11-0.01h0.11l0.09-0.01 0.07-0.01h0.07 0.05l0.04-0.01h0.03 0.1 0.09l0.1 0.02 0.16 0.04 0.08 0.03 0.08 0.04 0.06 0.04 0.07 0.04 0.11 0.11 0.05 0.06 0.08 0.12 0.04 0.07 0.03 0.07 0.04 0.14 0.01 0.08 0.01 0.07 0.01 0.08-0.01 0.07v0.08l-0.02 0.07-0.01 0.07-0.03 0.08-0.02 0.07-0.04 0.06-0.04 0.07-0.04 0.06-0.1 0.12-0.07 0.05-0.06 0.05-0.07 0.04-0.08 0.04-0.09 0.03-0.08 0.03-0.2 0.04h-0.04-0.02l-0.06 0.01h-0.04l-0.04 0.01h-0.04l-0.05 0.01h-0.05l-0.06 0.01h-0.06l-0.06 0.01-0.07 0.01h-0.07l-0.07 0.01-0.16 0.02h-0.08l-0.08 0.01-0.18 0.02h-0.09l-0.3 0.03h-0.1l-0.1 0.01-0.11 0.01-0.1 0.01-0.11 0.01h-0.11l-0.22 0.02h-0.12l-0.22 0.02h-0.12l9.32 26.76 5.6-16.21-3.99-10.55h-0.1l-0.1-0.01-0.11-0.01h-0.1l-0.2-0.02h-0.1l-0.1-0.01-0.09-0.01-0.1-0.01-0.09-0.01h-0.1l-0.18-0.02-0.08-0.01h-0.09l-0.24-0.03h-0.08l-0.21-0.03h-0.07l-0.12-0.02h-0.05l-0.05-0.01h-0.05l-0.05-0.01h-0.04l-0.04-0.01h-0.03-0.03l-0.02-0.01h-0.04-0.02l-0.1-0.01-0.1-0.02-0.09-0.02-0.08-0.03-0.08-0.04-0.14-0.08-0.06-0.05-0.05-0.06-0.05-0.05-0.05-0.07-0.04-0.06-0.06-0.14-0.04-0.14-0.01-0.08-0.01-0.07v-0.08l0.01-0.08v-0.07l0.02-0.08 0.02-0.07 0.02-0.08 0.06-0.14 0.04-0.06 0.05-0.07 0.05-0.06 0.11-0.11 0.06-0.04 0.07-0.05 0.07-0.03 0.08-0.04 0.08-0.02 0.18-0.04h0.1 0.1l0.07 0.01h0.05 0.07l0.08 0.01 0.09 0.01h0.1l0.11 0.01 0.26 0.02 0.3 0.02 0.34 0.02 0.36 0.02 0.19 0.01 0.2 0.02 0.21 0.01 0.2 0.01 0.22 0.01 0.21 0.01 0.22 0.01 0.22 0.02 0.22 0.01 0.23 0.01 0.22 0.01 0.23 0.01 0.22 0.01 0.23 0.01h0.22l0.44 0.02h0.22l0.21 0.01h0.2 0.21l0.19 0.01h0.2 0.2l0.21-0.01h0.21 0.22l0.22-0.01h0.22l0.23-0.01 0.22-0.01h0.23l0.92-0.04 0.22-0.01 0.23-0.01 0.22-0.02 0.44-0.02 0.42-0.02 0.2-0.01 0.2-0.02 0.38-0.02 0.51-0.03 0.15-0.01 0.28-0.02 0.12-0.01 0.11-0.01h0.11l0.09-0.01 0.07-0.01h0.07 0.05l0.04-0.01h0.03 0.1 0.09l0.1 0.02 0.16 0.04 0.08 0.03 0.08 0.04 0.06 0.04 0.07 0.04 0.11 0.11 0.05 0.06 0.08 0.12 0.04 0.07 0.02 0.07 0.03 0.07 0.02 0.07 0.01 0.08 0.01 0.07v0.08 0.07l-0.01 0.08-0.01 0.07-0.02 0.07-0.02 0.08-0.03 0.07-0.03 0.06-0.04 0.07-0.04 0.06-0.05 0.06-0.06 0.06-0.06 0.05-0.07 0.05-0.07 0.04-0.08 0.04-0.08 0.03-0.09 0.03-0.09 0.02-0.1 0.02h-0.04-0.03l-0.02 0.01h-0.03-0.04l-0.04 0.01h-0.04l-0.05 0.01h-0.05l-0.06 0.01h-0.06l-0.06 0.01-0.07 0.01h-0.07l-0.07 0.01-0.16 0.02h-0.08l-0.08 0.01-0.18 0.02h-0.1l-0.09 0.01-0.2 0.02h-0.1l-0.1 0.01-0.11 0.01-0.1 0.01-0.11 0.01h-0.11l-0.22 0.02h-0.12l-0.22 0.02h-0.12l9.25 26.55 2.55-8.23 0.09-0.24 0.1-0.23 0.09-0.24 0.09-0.23 0.08-0.23 0.09-0.23 0.16-0.46 0.08-0.22 0.21-0.66 0.07-0.21 0.06-0.22 0.12-0.42 0.06-0.2 0.06-0.21 0.15-0.6 0.04-0.2 0.16-0.76 0.03-0.19 0.06-0.36 0.02-0.18 0.03-0.18 0.02-0.18 0.02-0.17 0.01-0.17 0.02-0.17 0.02-0.34v-0.16-0.16l0.01-0.16-0.01-0.23v-0.22l-0.01-0.22-0.02-0.22-0.01-0.22-0.03-0.21-0.02-0.2-0.03-0.21-0.03-0.2-0.04-0.19-0.04-0.2-0.08-0.38-0.05-0.18-0.05-0.19-0.05-0.18-0.05-0.17-0.06-0.18-0.12-0.34-0.06-0.16-0.06-0.17-0.07-0.16-0.06-0.16-0.07-0.15-0.07-0.16-0.14-0.3-0.07-0.14-0.08-0.15-0.14-0.28-0.08-0.14-0.07-0.13-0.08-0.14-0.14-0.26-0.08-0.13-0.07-0.12-0.07-0.13-0.2-0.3-0.09-0.15-0.1-0.15-0.09-0.15-0.1-0.14-0.09-0.15-0.09-0.14-0.09-0.15-0.09-0.14-0.09-0.15-0.09-0.14-0.08-0.14-0.09-0.14-0.08-0.15-0.16-0.28-0.14-0.28-0.08-0.14-0.06-0.14-0.07-0.14-0.06-0.14-0.06-0.15-0.12-0.28-0.1-0.28-0.04-0.15-0.05-0.14-0.03-0.14-0.04-0.15-0.03-0.15-0.03-0.14-0.06-0.45-0.01-0.15v-0.15l-0.01-0.15 0.03-0.51 0.03-0.16 0.03-0.17 0.03-0.16 0.04-0.17 0.1-0.32 0.06-0.15 0.07-0.16 0.14-0.3 0.08-0.14 0.18-0.28 0.1-0.14 0.1-0.13 0.11-0.13 0.11-0.12 0.24-0.24 0.12-0.11 0.13-0.1 0.14-0.1 0.13-0.1 0.15-0.09 0.14-0.08 0.15-0.08 0.16-0.08 0.48-0.18 0.17-0.05 0.17-0.04 0.36-0.06 0.18-0.02 0.18-0.01h0.19 0.01 0.02 0.02 0.01 0.02 0.01 0.02 0.02l0.03 0.01h0.03 0.03l0.06 0.01h0.03 0.02l-0.34-0.3-0.35-0.29-0.36-0.29-0.72-0.56-0.38-0.26-0.37-0.27-0.38-0.25-0.39-0.25-0.39-0.24-0.4-0.24-0.4-0.23-0.4-0.22-0.41-0.22-1.26-0.6-0.86-0.36-0.44-0.17-0.43-0.17-0.9-0.3-0.9-0.28-0.92-0.24-0.47-0.11-0.46-0.1-0.47-0.09-0.96-0.16-0.48-0.07-0.48-0.06-0.49-0.04-0.48-0.05-0.5-0.03-0.49-0.02-0.5-0.01-0.49-0.01-0.67 0.01-0.67 0.02z"/>
                      <path id="c3jNa1REb" d="m298.04 183.76v-33.67h44.35v33.67h-44.35zm5.54-4.2 8.32-6.32 5.54 2.11 8.31-8.42 11.09 11.22v-23.85h-33.26v25.26zm10.1-20.51 0.19 0.01 0.2 0.03 0.19 0.02 0.19 0.03 0.18 0.04 0.18 0.05 0.18 0.04 0.18 0.06 0.34 0.12 0.17 0.07 0.16 0.07 0.15 0.08 0.16 0.08 0.14 0.08 0.15 0.09 0.14 0.1 0.26 0.2 0.12 0.1 0.12 0.11 0.12 0.12 0.1 0.11 0.11 0.12 0.09 0.12 0.09 0.13 0.16 0.26 0.07 0.13 0.06 0.14 0.06 0.13 0.05 0.15 0.08 0.28 0.03 0.15 0.02 0.15 0.01 0.15v0.15 0.15l-0.01 0.15-0.02 0.15-0.03 0.15-0.04 0.14-0.04 0.15-0.05 0.14-0.06 0.13-0.06 0.14-0.07 0.13-0.16 0.26-0.09 0.13-0.09 0.12-0.11 0.12-0.1 0.12-0.24 0.22-0.12 0.1-0.26 0.2-0.14 0.1-0.15 0.09-0.14 0.08-0.16 0.08-0.15 0.08-0.16 0.07-0.17 0.07-0.34 0.12-0.18 0.06-0.18 0.05-0.36 0.08-0.19 0.03-0.19 0.02-0.2 0.03-0.19 0.01-0.2 0.01h-0.2-0.2l-0.2-0.01-0.19-0.01-0.2-0.03-0.19-0.02-0.18-0.03-0.19-0.04-0.18-0.04-0.18-0.05-0.18-0.06-0.34-0.12-0.32-0.14-0.16-0.08-0.3-0.16-0.15-0.09-0.13-0.1-0.14-0.1-0.13-0.1-0.12-0.1-0.12-0.11-0.11-0.11-0.11-0.12-0.2-0.24-0.09-0.13-0.16-0.26-0.07-0.13-0.06-0.14-0.06-0.13-0.05-0.14-0.04-0.15-0.04-0.14-0.06-0.45v-0.15-0.15l0.06-0.45 0.08-0.28 0.05-0.15 0.06-0.13 0.06-0.14 0.07-0.13 0.16-0.26 0.09-0.13 0.2-0.24 0.11-0.11 0.11-0.12 0.12-0.11 0.12-0.1 0.13-0.1 0.14-0.1 0.13-0.1 0.15-0.09 0.3-0.16 0.16-0.08 0.32-0.14 0.34-0.12 0.18-0.06 0.18-0.04 0.18-0.05 0.19-0.04 0.18-0.03 0.19-0.02 0.2-0.03 0.19-0.01 0.2-0.01h0.2 0.2l0.2 0.01z"/>
                      <path id="h2Q0j2aKii" d="m170.98 153.28h-14.09v27.6h24.5v-20.17h3.68v23.35h-31.86v-33.97h17.77v3.19zm2.45 5.58v-8.77l11.64 8.77h-11.64z"/>
                      <path id="e1so2YuQoS" d="m493.52 150.09c3.02 0 5.47 2.45 5.47 5.47v0c0 3.02-2.45 5.46-5.47 5.46h-23.65c-3.02 0-5.47-2.44-5.47-5.46v0c0-3.02 2.45-5.47 5.47-5.47h23.65z"/>
                      <path id="dxqpMBjzs" d="m493.54 160c3.01 0 5.46 2.45 5.46 5.46v0c0 3.02-2.45 5.47-5.46 5.47h-23.66c-3.02 0-5.46-2.45-5.46-5.47v0c0-3.01 2.44-5.46 5.46-5.46h23.66z"/>
                      <path id="bvDmRvhnd" d="m493.52 171.95c3.02 0 5.47 2.45 5.47 5.47v0c0 3.02-2.45 5.46-5.47 5.46h-23.65c-3.02 0-5.47-2.44-5.47-5.46v0c0-3.02 2.45-5.47 5.47-5.47h23.65z"/>
                      <path id="aMAV3Si2q" d="m394.71 377.36h-150.16"/>
                    </defs>
                    <use fill-opacity="0" stroke="#4285f4" stroke-width="2" xlink:href="#aHIf0e791"/>
                    <use fill="#000000" fill-opacity="0" xlink:href="#aebH7nnDc"/>
                    <use fill-opacity="0" stroke="#a434b7" stroke-width="2" xlink:href="#aebH7nnDc"/>
                    <use fill-opacity="0" stroke="#77c800" stroke-width="2" xlink:href="#d1deglR8f3"/>
                    <use fill-opacity="0" stroke="#a434b7" stroke-width="2" xlink:href="#f3pTna63Hq"/>
                    <use fill="#a434b7" xlink:href="#e2xrknzxtr"/>
                    <use fill-opacity="0" stroke="#a334b7" stroke-opacity="0" xlink:href="#e2xrknzxtr"/>
                    <use fill-opacity="0" stroke="#a434b7" stroke-width="2" xlink:href="#d2zIsGwE5p"/>
                    <use fill="#a434b7" xlink:href="#a5lG4suEpl"/>
                    <use fill="#a434b7" xlink:href="#aj6LbcupC"/>
                    <use fill-opacity="0" stroke="#a334b7" stroke-opacity="0" xlink:href="#aj6LbcupC"/>
                    <use fill="#a434b7" xlink:href="#jOHMth2jB"/>
                    <use fill="#a434b7" xlink:href="#c3jNa1REb"/>
                    <use fill="#4285f4" xlink:href="#h2Q0j2aKii"/>
                    <use fill-opacity="0" stroke="#77c800" stroke-width="2" xlink:href="#e1so2YuQoS"/>
                    <use fill-opacity="0" stroke="#77c800" stroke-width="2" xlink:href="#dxqpMBjzs"/>
                    <use fill-opacity="0" stroke="#77c800" stroke-width="2" xlink:href="#bvDmRvhnd"/>
                    <use fill-opacity="0" stroke="#a434b7" stroke-width="2" xlink:href="#aMAV3Si2q" class="purple-section-line"/>
                  </svg>
                </div>
                <div class="ts-grid__col is-1__large--offset ts-copy__text is-7 is-6__large ts-grid-row-start ts-promo-box-light">
                  <h3 class="ts-headline3" id="engaging-experiences-regardless-screen-size">Focus on content, we deliver it. Focus on audience, we help you grow it.</h3>
                  <p>You've invested a lot of time and energy into creating amazing content, services, and products for your customers. We provide managed WordPress hosting and professional services worthy of your efforts. Logical Phase leverages what's best about WordPress, and makes it so much better.</p>
                </div>
              </div>
            </section>
          </div>
        </div>
        <div class="ts-home-sections ts-home-v">
          <section>
            <iron-selector selected="[[page]]" attr-for-selected="name" class="main-navigation" role="navigation">
              <div class="ts-grid ts-grid__no-gap">
                <header class="ts-grid__col is-6 is-4__large ts-section-header ts-section-header--solutions">
                  <h1 class="ts-section-header__eyebrow ts-eyebrow">The Logical Phase difference</h1>
                  <h2 class="ts-section-header__heading ts-headline3" id="wordpress-you-need-solutions-you-deserve">Smarter, faster, superior WordPress.</h2>
                  <div class="ts-section-header__link">
                    <a 
                      href="/contact/" 
                      class="ts-button ts-button--primary" 
                      track-type="navigateTo" 
                      track-name="home"
                      track-metadata-position="banner">Contact a Logical Phase expert</a>
                  </div>
                </header>
                <div class="ts-grid__col is-6 is-4__large">
                  <section class="ts-card ts-card--solution">
                    <header>
                      <h1 class="ts-card__eyebrow ts-eyebrow">Powered by Google Cloud</h1>
                      <img class="ts-card__icon" src="/images/icons/ts-icon-pwa-62x-62.svg" alt="Pagespeed optimization service">
                      <a class="ts-link ts-card__link ts-card__link-text" href="${HP_HOST}hosting/" track-type="navigateTo" track-name="solution" track-metadata-eventdetail="workloadMigration" track-metadata-position="body">
                        <h2 class="ts-card__heading ts-headline4" id="pagespeed-optimization">Hyper Optimized Hosting</h2>
                      </a>
                    </header>
                    <p class="ts-card__body">Supercharged fully managed WordPress hosting globally delivered to any screen.</p>
                      <div class="ts-card__arrow">
                        <svg width="18px" height="18px" viewBox="0 0 18 18">
                          <title>Arrow</title>
                          <polyline points="1,9 17,9" stroke="var(--app-primary-ts-icon-color)" stroke-width="2" fill="none"></polyline>
                          <polyline points="9,1 17,9 9,17" stroke="var(--app-primary-ts-icon-color)" stroke-width="2" fill="none"></polyline>
                        </svg>
                      </div>
                  </section>
                </div>
                <div class="ts-grid__col is-6 is-4__large">
                  <section class="ts-card ts-card--solution">
                    <header>
                      <h1 class="ts-card__eyebrow ts-eyebrow">WordPress Performance</h1>
                      <img class="ts-card__icon" src="/images/icons/ts-icon-pagespeed-62x62.svg" alt="Progressive web application design">
                      <a class="ts-link ts-card__link ts-card__link-text" href="pagespeed/" track-type="navigateTo" track-name="solution" track-metadata-eventdetail="progressiveWebDesign" track-metadata-position="body">
                        <h2 class="ts-card__heading ts-headline4" id="pwa">PageSpeed Optimizations</h2>
                      </a>
                    </header>
                    <p class="ts-card__body">We make slow loading WordPress sites lightning fast and Google search rank friendly.</p>
                      <div class="ts-card__arrow">
                        <svg width="18px" height="18px" viewBox="0 0 18 18">
                          <title>Arrow</title>
                          <polyline points="1,9 17,9" stroke="var(--app-primary-ts-icon-color)" stroke-width="2" fill="none"></polyline>
                          <polyline points="9,1 17,9 9,17" stroke="var(--app-primary-ts-icon-color)" stroke-width="2" fill="none"></polyline>
                        </svg>
                      </div>
                  </section>
                </div>
                <div class="ts-grid__col is-6 is-4__large">
                  <section class="ts-card ts-card--solution">
                    <header>
                      <h1 class="ts-card__eyebrow ts-eyebrow">PWA Designed Frontend</h1>
                      <img class="ts-card__icon" src="/images/icons/ts-icon-pagespeed-62x62.svg" alt="Progressive web application design">
                      <a class="ts-link ts-card__link ts-card__link-text" href="design/" track-type="navigateTo" track-name="solution" track-metadata-eventdetail="progressiveWebDesign" track-metadata-position="body">
                        <h2 class="ts-card__heading ts-headline4" id="progressive-web-frontend">Inviting and Engaging</h2>
                      </a>
                    </header>
                    <p class="ts-card__body">We transform WordPress into responsive, fast, accessible, progressive web application.</p>
                      <div class="ts-card__arrow">
                        <svg width="18px" height="18px" viewBox="0 0 18 18">
                          <title>Arrow</title>
                          <polyline points="1,9 17,9" stroke="var(--app-primary-ts-icon-color)" stroke-width="2" fill="none"></polyline>
                          <polyline points="9,1 17,9 9,17" stroke="var(--app-primary-ts-icon-color)" stroke-width="2" fill="none"></polyline>
                        </svg>
                      </div>
                  </section>
                </div>
                <div class="ts-grid__col is-6 is-4__large">
                  <section class="ts-card ts-card--solution">
                    <header>
                      <h1 class="ts-card__eyebrow ts-eyebrow">WordPress Repairs</h1>
                      <img class="ts-card__icon" src="/images/icons/ts-icon-stethescope-62x62-opt.svg" alt="Monitored and maintained"/>
                      <a class="ts-link ts-card__link ts-card__link-text" href="${HP_HOST}emergency/" track-type="navigateTo" track-name="solution" track-metadata-eventdetail="emergencyResponse" track-metadata-position="body">
                        <h2 class="ts-card__heading ts-headline4" id="repairs-restoration">Emergency Response</h2>
                      </a>
                    </header>
                    <p class="ts-card__body">Site emergency? Our Site Emergency Response Team (SERT) will have you back up and running in no time.</p>
                      <div class="ts-card__arrow">
                        <svg width="18px" height="18px" viewBox="0 0 18 18">
                          <title>Arrow</title>
                          <polyline points="1,9 17,9" stroke="var(--app-primary-ts-icon-color)" stroke-width="2" fill="none"></polyline>
                          <polyline points="9,1 17,9 9,17" stroke="var(--app-primary-ts-icon-color)" stroke-width="2" fill="none"></polyline>
                        </svg>
                      </div>
                  </section>
                </div>
                <div class="ts-grid__col is-6 is-4__large">
                  <section class="ts-card ts-card--solution">
                    <header>
                      <h1 class="ts-card__eyebrow ts-eyebrow">WordPress Security</h1>
                      <img class="ts-card__icon" src="/images/icons/ts-icon-security-62x62.svg" alt="In depth security program">
                      <a class="ts-link ts-card__link ts-card__link-text" href="${HP_HOST}security/" track-type="navigateTo" track-name="solution" track-metadata-eventdetail="securityResponse" track-metadata-position="body">
                        <h2 class="ts-card__heading ts-headline4" id="security-response">Security Services</h2>
                      </a>
                    </header>
                    <p class="ts-card__body">We investigate, audit, and restore compromised sites that mitigate loss and prevent future attacks.</p>
                      <div class="ts-card__arrow">
                        <svg width="18px" height="18px" viewBox="0 0 18 18">
                          <title>Arrow</title>
                          <polyline points="1,9 17,9" stroke="var(--app-primary-ts-icon-color)" stroke-width="2" fill="none"></polyline>
                          <polyline points="9,1 17,9 9,17" stroke="var(--app-primary-ts-icon-color)" stroke-width="2" fill="none"></polyline>
                        </svg>
                      </div>
                  </section>
                </div>
                <div class="ts-grid__col is-6 is-4__large">
                  <section class="ts-card ts-card--solution">
                    <header>
                      <h1 class="ts-card__eyebrow ts-eyebrow">Precisely Maintained</h1>
                      <img class="ts-card__icon" src="/images/icons/ts-icon-stethescope-62x62-opt.svg" alt="WordPress Preventive Care">
                      <a class="ts-link ts-card__link ts-card__link-text" href="${HP_HOST}care/" track-type="navigateTo" track-name="solution" track-metadata-eventdetail="wordpressRelocation" track-metadata-position="body">
                        <h2 class="ts-card__heading ts-headline4" id="wordpress-relocation">Annual Preventive Care</h2>
                      </a>
                    </header>
                    <p class="ts-card__body">Focus on creating, leave the maintaining to us. 24-7 monitoring, updates, backups and more.</p>
                    <div class="ts-card__arrow">
                      <svg width="18px" height="18px" viewBox="0 0 18 18">
                        <title>Arrow</title>
                        <polyline points="1,9 17,9" stroke="var(--app-primary-ts-icon-color)" stroke-width="2" fill="none"></polyline>
                        <polyline points="9,1 17,9 9,17" stroke="var(--app-primary-ts-icon-color)" stroke-width="2" fill="none"></polyline>
                      </svg>
                    </div>
                  </section>
                </div>
                <div class="ts-grid__col is-6 is-4__large">
                  <section class="ts-card ts-card--solution">
                    <header>
                      <h1 class="ts-card__eyebrow ts-eyebrow">Migration Services</h1>
                      <img class="ts-card__icon" src="/images/icons/ts-icon-migrations-62x62.svg" alt="WordPress migration">
                      <a class="ts-link ts-card__link ts-card__link-text" href="${HP_HOST}migrations/" track-type="navigateTo" track-name="solution" track-metadata-eventdetail="wordpressRelocation" track-metadata-position="body">
                        <h2 class="ts-card__heading ts-headline4" id="migration">WordPress Relocation</h2>
                      </a>
                    </header>
                    <p class="ts-card__body">Existing WordPress site? No problem. We'll safely move your site to it's new home without interruption.</p>
                    <div class="ts-card__arrow">
                      <svg width="18px" height="18px" viewBox="0 0 18 18">
                        <title>Arrow</title>
                        <polyline points="1,9 17,9" stroke="var(--app-primary-ts-icon-color)" stroke-width="2" fill="none"></polyline>
                        <polyline points="9,1 17,9 9,17" stroke="var(--app-primary-ts-icon-color)" stroke-width="2" fill="none"></polyline>
                      </svg>
                    </div>
                  </section>
                </div>
              </div>
            </iron-selector>
          </section>
        </div>
        <div class="ts-section ts-section--border">
          <div class="ts-section__header ts-text-center ts-grid">
            <div class="ts-grid__col is-12 is-10__large is-1__large--offset">
              <h2 class="ts-headline3" id="features">Logical Phase Features</h2>
            </div>
          </div>
          <section class="ts-copy">
            <div class="ts-grid--alternate ts-copy__inner ts-copy--two-column">
              <div class="ts-grid__col is-1__large--offset ts-copy__text is-6 is-5__large">
                <h4 class="ts-headline4">WordPress Gutenberg goodness</h4>
                <p>The latest WordPress backend dashboard streamlined for productive editing and publishing. Focus on great writing using familiar writing and content management tools.</p>
              </div>
              <div class="ts-grid__col ts-copy__text is-6 is-5__large">
                <h4 class="ts-headline4">Control your content</h4>
                <p>Logical Phase doesn't capitalize on your content like other services. We don't use paywalls or advertisements&#8212;that's for you to decide. Moving your content is as easy as moving any other self-hosted WordPress site.</p>
              </div>
              <div class="ts-grid__col is-1__large--offset ts-copy__text is-6 is-5__large">
                <h4 class="ts-headline4">Progressive Web Application</h4>
                <p>No more theme mess. Just our beautiful PWA frontend, built with Google LitElement, Material Design, and web components fully decoupled from WordPress.</p>
              </div>
              <div class="ts-grid__col ts-copy__text is-6 is-5__large">
                <h4 class="ts-headline4">Smooth and natural</h4>
                <p>Quick smooth transitions and animations are baked right in to make for a more natural, pleasing application look and feel. No more janking, confusing view changes </p>
              </div>
              <div class="ts-grid__col is-1__large--offset ts-copy__text is-6 is-5__large">
                <h4 class="ts-headline4">Installable and always up-to-date</h4>
                <p>Users can optionally install your Logical Phase PWA just like any native application. Best of all, PWAs don't take up any storage memory and they're updated to the latest version without any user effort.</p>
              </div>
              <div class="ts-grid__col ts-copy__text is-6 is-5__large">
                <h4 class="ts-headline4">Fast loading and reliable</h4>
                <p>Logical Phase PWAs load instantly even in spotty internet conditions. Your readers can continue to read your posts offline uninterrupted.</p>
              </div>
            </div>
          </section>
        </div>
      </article>
    </div>
  `}}window.customElements.define("ts-home",TSHome);const menuIcon=html$1`<svg aria-labelledby="title" height="24" width="24" viewBox="0 0 24 24"><title id="title" lang="en">Menu</title><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"></path></svg>`;_exports.menuIcon=menuIcon;const backIcon=html$1`<svg width="24" height="24" viewBox="0 0 24 24"><g><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"/></g></svg>`;_exports.backIcon=backIcon;const addToCartIcon=html$1`<svg aria-labelledby="title" height="24" width="24" viewBox="0 0 24 24"><title id="title" lang="en">Add to cart</title><path d="M0 0h24v24H0zm18.31 6l-2.76 5z" fill="none"/><path d="M11 9h2V6h3V4h-3V1h-2v3H8v2h3v3zm-4 9c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2zm10 0c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2zm-9.83-3.25l.03-.12.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.86-7.01L19.42 4h-.01l-1.1 2-2.76 5H8.53l-.13-.27L6.16 6l-.95-2-.94-2H1v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.13 0-.25-.11-.25-.25z"/></svg>`;_exports.addToCartIcon=addToCartIcon;const Calendar=html$1`<svg aria-labelledby="title" height="18" width="18" viewBox="0 0 24 24"><title id="title" lang="en">Calendar</title><path d="M19,19V8H5V19H19M16,1H18V3H19A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5C3.89,21 3,20.1 3,19V5C3,3.89 3.89,3 5,3H6V1H8V3H16V1M7,10H9V12H7V10M15,10H17V12H15V10M11,14H13V16H11V14M15,14H17V16H15V14Z" /></svg>`;_exports.Calendar=Calendar;const removeFromCartIcon=html$1`<svg aria-labelledby="title" height="24" width="24" viewBox="0 0 24 24"><title id="title" lang="en">Remove from cart</title><path d="M22.73 22.73L2.77 2.77 2 2l-.73-.73L0 2.54l4.39 4.39 2.21 4.66-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h7.46l1.38 1.38c-.5.36-.83.95-.83 1.62 0 1.1.89 2 1.99 2 .67 0 1.26-.33 1.62-.84L21.46 24l1.27-1.27zM7.42 15c-.14 0-.25-.11-.25-.25l.03-.12.9-1.63h2.36l2 2H7.42zm8.13-2c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.08-.14.12-.31.12-.48 0-.55-.45-1-1-1H6.54l9.01 9zM7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2z"/><path d="M0 0h24v24H0z" fill="none"/></svg>`;_exports.removeFromCartIcon=removeFromCartIcon;const minusIcon=html$1`<svg aria-labelledby="title" height="24" width="24" viewBox="0 0 24 24"><title id="title" lang="en">Minus sign</title><path d="M0 0h24v24H0z" fill="none"/><path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/></svg>`;_exports.minusIcon=minusIcon;const plusIcon=html$1`<svg aria-labelledby="title" height="24" width="24" viewBox="0 0 24 24"><title id="title" lang="en">Plus sign</title><path d="M0 0h24v24H0z" fill="none"/><path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/></svg>`;_exports.plusIcon=plusIcon;const magnifyIcon=html$1`<svg aria-labelledby="title" height="24" width="24" viewBox="0 0 24 24"><title id="title" lang="en">Magnify</title><path d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" /></svg>`;_exports.magnifyIcon=magnifyIcon;const GooglePlus=html$1`<svg aria-labelledby="title" height="22" width="23" viewBox="0 0 24 22"><title id="title" lang="en">Google+</title><path d="M7.635 10.909v2.619h4.335c-.173 1.125-1.31 3.295-4.331 3.295-2.604 0-4.731-2.16-4.731-4.823 0-2.662 2.122-4.822 4.728-4.822 1.485 0 2.479.633 3.045 1.178l2.073-1.994c-1.33-1.245-3.056-1.995-5.115-1.995C3.412 4.365 0 7.785 0 12s3.414 7.635 7.635 7.635c4.41 0 7.332-3.098 7.332-7.461 0-.501-.054-.885-.12-1.265H7.635zm16.365 0h-2.183V8.726h-2.183v2.183h-2.182v2.181h2.184v2.184h2.189V13.09H24"/></svg>`;_exports.GooglePlus=GooglePlus;const Twitter=html$1`<svg aria-labelledby="title" height="21" width="21" viewBox="0 0 24 24"><title id="title" lang="en">Twitter</title><path d="M22.46,6C21.69,6.35 20.86,6.58 20,6.69C20.88,6.16 21.56,5.32 21.88,4.31C21.05,4.81 20.13,5.16 19.16,5.36C18.37,4.5 17.26,4 16,4C13.65,4 11.73,5.92 11.73,8.29C11.73,8.63 11.77,8.96 11.84,9.27C8.28,9.09 5.11,7.38 3,4.79C2.63,5.42 2.42,6.16 2.42,6.94C2.42,8.43 3.17,9.75 4.33,10.5C3.62,10.5 2.96,10.3 2.38,10C2.38,10 2.38,10 2.38,10.03C2.38,12.11 3.86,13.85 5.82,14.24C5.46,14.34 5.08,14.39 4.69,14.39C4.42,14.39 4.15,14.36 3.89,14.31C4.43,16 6,17.26 7.89,17.29C6.43,18.45 4.58,19.13 2.56,19.13C2.22,19.13 1.88,19.11 1.54,19.07C3.44,20.29 5.7,21 8.12,21C16,21 20.33,14.46 20.33,8.79C20.33,8.6 20.33,8.42 20.32,8.23C21.16,7.63 21.88,6.87 22.46,6Z" /></svg>`;_exports.Twitter=Twitter;const Facebook=html$1`<svg aria-labelledby="title" height="22"  width="22" viewBox="0 0 24 24"><title id="title" lang="en">Facebook</title><path d="M17,2V2H17V6H15C14.31,6 14,6.81 14,7.5V10H14L17,10V14H14V22H10V14H7V10H10V6A4,4 0 0,1 14,2H17Z" /></svg>`;_exports.Facebook=Facebook;const Linkedin=html$1`<svg aria-labelledby="title" height="22"  width="22" viewBox="0 0 24 24"><title id="title" lang="en">Linkedin</title><path d="M21,21H17V14.25C17,13.19 15.81,12.31 14.75,12.31C13.69,12.31 13,13.19 13,14.25V21H9V9H13V11C13.66,9.93 15.36,9.24 16.5,9.24C19,9.24 21,11.28 21,13.75V21M7,21H3V9H7V21M5,3A2,2 0 0,1 7,5A2,2 0 0,1 5,7A2,2 0 0,1 3,5A2,2 0 0,1 5,3Z" /></svg>`;_exports.Linkedin=Linkedin;const ArrowDown=html$1`<svg aria-labelledby="title" height="22"  width="22" viewBox="0 0 24 24"><title id="title" lang="en">Down arrow</title><path d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z" /></svg>`;_exports.ArrowDown=ArrowDown;const Share=html$1`<svg aria-labelledby="title" height="24"  width="24" viewBox="0 0 24 24"><title id="title" lang="en">Share</title><path d="M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z" /></svg>`;_exports.Share=Share;const SearchIcon=html$1`<svg focusable="false" viewBox="0 0 24 24"><path d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"></path></svg>`;_exports.SearchIcon=SearchIcon;const OpensInNewTabIcon=html$1`<svg viewBox="0 0 24 24"><path d="M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z"></path></svg>`;_exports.OpensInNewTabIcon=OpensInNewTabIcon;const CheckMarkIcon=html$1`<svg preserveAspectRatio="xMidYMid meet" viewBox="0 0 20 15" width="20" height="15"><title id="title" lang="en">Check</title><path d="M19 1.5L8.07 13.5L1 8.56" id="cbQxUSBor"></path></svg>`;_exports.CheckMarkIcon=CheckMarkIcon;const SubTitleIcon=html$1`<svg width="18" height="18" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M20 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 14H4V6h16v12zM6 10h2v2H6zm0 4h8v2H6zm10 0h2v2h-2zm-6-4h8v2h-8z"></svg>`;_exports.SubTitleIcon=SubTitleIcon;var tsIcons={menuIcon:menuIcon,backIcon:backIcon,addToCartIcon:addToCartIcon,Calendar:Calendar,removeFromCartIcon:removeFromCartIcon,minusIcon:minusIcon,plusIcon:plusIcon,magnifyIcon:magnifyIcon,GooglePlus:GooglePlus,Twitter:Twitter,Facebook:Facebook,Linkedin:Linkedin,ArrowDown:ArrowDown,Share:Share,SearchIcon:SearchIcon,OpensInNewTabIcon:OpensInNewTabIcon,CheckMarkIcon:CheckMarkIcon,SubTitleIcon:SubTitleIcon};_exports.$tsIcons=tsIcons;const app$1=(state={drawerOpened:!1},action)=>{switch(action.type){case UPDATE_PAGE:const p=action.page;return _objectSpread({},state,{page:p,lastVisitedListPage:"blog"===p?p:state.lastVisitedListPage});case CLEAR_ANNOUNCER_LABEL:return _objectSpread({},state,{announcerLabel:""});case SET_ANNOUNCER_LABEL:return _objectSpread({},state,{announcerLabel:action.label});case CLOSE_MODAL:return _objectSpread({},state,{cartModalOpened:!1});case UPDATE_OFFLINE:return _objectSpread({},state,{offline:action.offline});case UPDATE_DRAWER_STATE:return _objectSpread({},state,{drawerOpened:action.opened});case OPEN_SNACKBAR:return _objectSpread({},state,{snackbarOpened:!0});case CLOSE_SNACKBAR:return _objectSpread({},state,{snackbarOpened:!1});default:return state;}};_exports.$appDefault=app$1;var app$2={default:app$1};// See https://github.com/zalmoxisus/redux-devtools-extension for more information.
// @ts-ignore
_exports.$app$1=app$2;const compose$1=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||compose,store=createStore((state,action)=>state,compose$1(lazyReducerEnhancer(combineReducers),applyMiddleware(thunk)));// Initializes the Redux store with a lazyReducerEnhancer (so that you can
// lazily add reducers after the store has been created) and redux-thunk (so
// that you can dispatch async actions). See the "Redux and state management"
// section of the wiki for more details:
// https://github.com/Polymer/pwa-starter-kit/wiki/4.-Redux-and-state-management
_exports.store=store;// Initially loaded reducers.
store.addReducers({app:app$1});var store$1={store:store};_exports.$store=store$1;const TsTheme=css`
:host {
  display: block;
   
  /* Theme Colors */
  --app-primary-color: #600060;
  --app-primary-hover-color: #8d008d;
  --app-secondary-color: #000000;

  --app-primary-text-color: #212121;
  --app-reverse-text-color: #ffffff;
  --app-primary-border-color: #e0e0e0;
  
  --app-primary-background-color: #ffffff;
  --app-secondary-background-color: #f7f7f7;
  --app-primary-navigation-background: #edf0f2;
  --app-primary-text-thin-color: rgb(95, 99, 104);

  /* Link and Accent */
  --app-primary-icon-color: #3c4043;
  --app-accent-color: var(--app-primary-color);
  --app-primary-link-color: var(--app-primary-color);
  --app-primary-ts-icon-color: var(--app-primary-color);
  
  /* Drawer */
  --app-drawer-width: 326px;
  --app-drawer-background-color: var(--app-reverse-text-color);
  --app-drawer-text-color: var(--app-secondary-color);
  --app-drawer-selected-color: var(--app-primary-color);

  /* App Header */
  --app-header-background-color: var(--app-reverse-text-color);
  --app-header-text-color: var(--app-primary-text-color);
  --app-header-selected-color: var(--app-primary-color);

  /* App Footer */
  --app-footer-primary-background-color: var(--app-primary-icon-color);
  --app-footer-secondary-background-color: #5f6368;
  --app-footer-text-color: var(--app-reverse-text-color);

  /* App Section Background Colors */
  --app-primary-section-background-color: #f5f5f5;
  --app-secondary-section-background-color: var(--app-reverse-text-color);
  
  /* Form Colors */
  --app-form-border-color: #cccccc; 
  --app-form-text-color: #999999;
  --app-form-field-background-color: #ededed;

  /* Buttons */
  --app-button-disabled-background-color: #dadce0;
  --app-button-primary-reversed: rgba(255, 255, 255, 0.7);
  --app-button-secondary-border: var(--app-button-secondary-border);
  --app-button-secondary-background-color: #d8e7fb;
  --app-button-flat-background-color: #f1f3f4;
  --app-button-fab-red: #d93025;
  --app-button-fab-red-hover: #a50e0e;
}
`;_exports.TsTheme=TsTheme;var tsStyleTheme={TsTheme:TsTheme};_exports.$tsStyleTheme=tsStyleTheme;class TSApp extends connect(store)(LitElement){static get styles(){return[TsTheme,css`

      /*--------------------------------------------------------------
      # Accessibility
      --------------------------------------------------------------*/
      /* Text meant only for screen readers. */
      .screen-reader-text {
        clip: rect(1px, 1px, 1px, 1px);
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        word-wrap: normal !important;
        /* Many screen reader and browser combinations announce broken words as they would appear visually. */
      }

      .screen-reader-text:focus {
        background-color: #f1f1f1;
        border-radius: 3px;
        box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.6);
        clip: auto !important;
        color: #21759b;
        display: block;
        font-size: 14px;
        font-size: 0.875rem;
        font-weight: bold;
        height: auto;
        left: 5px;
        line-height: normal;
        padding: 15px 23px 14px;
        text-decoration: none;
        top: 5px;
        width: auto;
        z-index: 100000;
        /* Above WP toolbar. */
      }

      /* Do not show the outline on the skip link target. */
      #primary[tabindex="-1"]:focus {
        outline: 0;
      }
      
      [hidden] {
        display: none !important;
      }

      app-header {
        position: fixed;
        top: 0;
        left: 0;
        z-index: 200;
        width: 100%;
        text-align: left;
        background-color: var(--app-header-background-color);
        color: var(--app-header-text-color);
        border-bottom: 1px solid var(--app-primary-border-color);
      }

      nav {
        height: 46px;
      }

      .masthead {
        background-color: var(--app-primary-background-color);
        padding: 12px 8px;
        height: inherit;
        align-items: center;
      }

      .ts-title {
        margin-left: 0px;
        font-weight: 300;
        color: var(--app-secondary-color);
      }

      .paper-font-body2 {
        font-size: 14px;
        transform: uppercase;
      }

      .desktop-menu {
        height: 46px;
        background-color: var(--app-secondary-background-color);
        border-bottom: 1px solid var(--app-primary-border-color);
      }

      .main-navigation a {
        display: inline-block;
        margin: 0 20px;
        padding-top: 14px;
        height: 65%;
        font-weight: 400;
      }

      .main-navigation a,
      .main-navigation a:visited {
        text-decoration: none;
        font-size: 14px;
        color: rgba(0, 0, 0, 0.54);
      }

      .main-navigation a:hover {
        color: var(--app-primary-color);
      }

      .main-navigation a[selected] {
        color: rgba(0, 0, 0, 0.87);
        font-weight: 500;
        border-bottom: 2px solid var(--app-primary-color);
      }

      .cta-header {
        font-size: 14px;
        margin-right: 24px;
      }

      .toolbar-top {
        background-color: var(--app-header-background-color);
      }

      [main-title] {
        font-family: "Roboto";
        text-transform: lowercase;
        font-size: 24px;
        /* 
          In the narrow layout, the toolbar is offset by the width of the
          drawer button, and the text looks not centered. Add a padding to
          match that button 
        */
        padding-right: 44px;
      }

      .sub-tagline {
        margin-left: 5px;
      }

      .toolbar-list {
        display: none;
      }

      .toolbar-list > a {
        display: inline-block;
        color: var(--app-header-text-color);
        text-decoration: none;
        line-height: 30px;
        padding: 0px 18px;
      }

      .toolbar-list > a[selected] {
        color: var(--app-header-selected-color);
        border-bottom: 4px solid var(--app-header-selected-color);
      }

      .menu-btn {
        background: none;
        border: none;
        cursor: pointer;
        width: 44px;
        padding-top: 6px;
        margin-left: auto;
      }

      .search-btn {
        background: none;
        border: none;
        fill: var(--app-header-text-color);
        cursor: pointer;
        width: 44px;
        margin-left: -20px;
        margin-right: 10px;
      }

      /* 
        We need to make sure when drawer is open
        it covers our app header. Otherwise there's
        menu button that is disabled 
      */
      #drawer {
        z-index: 200;
      }

      #drawer app-toolbar {
        border-bottom: 1px solid var(--app-primary-border-color);
        margin-bottom: 5px;
        background-color: var(--app-primary-color);
        color: var(--app-reverse-text-color);
      }

      .drawer-list {
        box-sizing: border-box;
        width: 100%;
        height: 100%;
        padding: 10px 24px;
        background: var(--app-drawer-background-color);
        position: relative;
        text-align: left;
        overflow-y: auto;
      }

      .drawer-list > a {
        display: block;
        text-decoration: none;
        font: 400 16px/24px Roboto, sans-serif;
        color: var(--app-drawer-text-color);
        letter-spacing: 0.25px;
        padding: 0.6rem 8px 0.6rem 0px;
      }

      .drawer-list > a[selected] {
        color: var(--app-drawer-selected-color);
      }

      .main-content {
        padding-top: 59px;
        min-height: 100vh;
      }

      .page {
        display: none;
      }

      .page[active] {
        display: block;
      }

      .hypersite-footer-linkboxes-all-backup,
      .hypersite-footer-linkbox-cloud {
        background-color: var(--app-footer-primary-background-color);
      }
      .hypersite-footer-linkboxes-all-backup {
        background: var(--app-footer-primary-background-color);
      }

      .hypersite-footer-linkboxes > nav::before {
        background: var(--app-footer-primary-background-color);
        border-bottom: solid 1px var(--app-form-border-color);
        color: var(--app-footer-primary-background-color);
        content: "Logical Phase";
        display: block;
        height: 73px;
        margin: 0 24px;
      }

      *,
      *:before,
      *:after {
        -webkit-box-sizing: inherit;
        box-sizing: inherit;
      }
      .hypersite-nav {
        font-size: 13px;
      }

      .hypersite-site-name {
          display: none;
      }

      .hypersite-utility-footer-nav {
        color: var(--app-reverse-text-color);
        overflow: auto;
        padding: 10px 24px;
      }

      .hypersite-full-site-width,
      .hypersite-toast-fill {
        margin: 0 auto;
        max-width: 1400px;
        color: var(--app-footer-text-color);
      }

      .hypersite-footer-linkboxes-all-backup,
      .hypersite-footer-linkbox-cloud {
        background-color: var(--app-footer-primary-background-color) !important;
      }

      .hypersite-footer-linkboxes-all-backup {
        background: var(--app-footer-primary-background-color);
      }

      .hypersite-footer-linkboxes {
        background: #263238;
        font: 14px/16px Roboto, sans-serif;
      }

      .hypersite-utility-footer {
        background: var(--app-footer-secondary-background-color);
        color: var(--app-footer-text-color);
        text-align: center;
      }

      .hypersite-utility-footer-nav-left {
        float: left;
      }

      .hypersite-utility-footer-link+.hypersite-utility-footer-link::before {
        content: "|";
        padding-left: 6px;
        padding-right: 8px;
      }
      footer nav {
        height: inherit;
      }

      .hypersite-utility-footer-link {
        color: var(--app-reverse-text-color);
        font-size: 14px;
        font-weight: 400;
        text-decoration: none;
      }

      .hypersite-utility-footer-links,
      .hypersite-utility-footer-newsletter-signup-text {
        font-weight: 500;
        margin-right: 16px;
      }

      input[type=search] {
        outline: none;
      }

      input[type=search] {
        box-sizing: content-box;
        -moz-box-sizing: content-box;
        -webkit-appearance: textfield;
        -webkit-box-sizing: content-box;
        font-family: inherit;
        font-size: 1.0rem;
      }

      input::-webkit-search-decoration,
      input::-webkit-search-cancel-button {
        display: none; 
      }

      .search-icon {
        fill: var(--app-primary-icon-color);
      }

      input[type=search] {
        background: var(--app-secondary-background-color) url('/images/bg/icon-search.svg') no-repeat 9px 8px;
        border: solid 1px var(--app-form-border-color);
        padding: 7px 10px 7px 38px;
        width: 230px;
        margin-top: 6px;
        margin-bottom: 14px;
        -webkit-border-radius: 10em;
        -moz-border-radius: 10em;
        border-radius: 10em;
      }

      input[type=search]:focus {
        width: 230px;
        background-color: var(--app-reverse-text-color);
        border-color: var(--app-primary-color);
        -webkit-box-shadow: 0 0 5px rgba(164,52,183,.5);
        -moz-box-shadow: 0 0 5px rgba(164,52,183,.5);
        box-shadow: 0 0 5px rgba(164,52,183,.5);
      }

      input:-moz-placeholder,
      input::-webkit-input-placeholder {
        color: var(--app-footer-secondary-background-color);
      }
      
      input:-moz-placeholder:focus,
      input::-webkit-input-placeholder:focus {
        color: var(--app-form-text-color);
      }

      .ts-brand-site-logo {
        display: block;
        height: auto;
        width: 141px;
        text-align: left;
        margin-left: 12px;
      }

      img {
        border: 0;
        max-width: 100%;
      }

      /* 
        Wide layout: when the viewport width is bigger than 460px, layout
        changes to a wide layout. 
      */
      @media (min-width: 460px) {
        .toolbar-list {
          display: block;
        }

        input[type=search] {
          background: var(--app-secondary-background-color) url('/images/bg/icon-search.svg') no-repeat 9px 8px;
          border: solid 1px var(--app-form-border-color);
          padding: 5px 10px 5px 32px;
          width: 140px;
          margin-top: 0;
          margin-bottom: 0;
          -webkit-border-radius: 10em;
          -moz-border-radius: 10em;
          border-radius: 10em;
          -webkit-transition: all .5s;
          -moz-transition: all .5s;
          transition: all .5s;
        }
        input[type=search]:focus {
          width: 330px;
        }

        .masthead {
          padding: 5px 8px 5px 36px;
        }

        .ts-brand-site-logo {
          display: block;
          height: auto;
          width: 161px;
          margin-left: 0px;
        }

        .menu-btn {
          display: none;
        }

        .toolbar-list > a {
          padding: 0px 18px;
        }

        .main-content {
          padding-top: 96px;
        }


      /* The drawer button isn't shown in the wide layout, so we don't
      need to offset the title */
        [main-title] {
          padding-right: 0px;
        }
      }
    `]}render(){const{appTitle,_page,_offline,_drawerOpened,_snackbarOpened}=this;return html$1`
      <!-- Header -->
      <app-header-layout id="ts-appheaderlayout" has-scrolling-region>
        <app-header slot="header" condenses reveals effects="waterfall">
          <app-toolbar class="masthead">
            <a href="/" alt="${appTitle} home">
              <img rel="dns-prefetch" class="ts-brand-site-logo" src="/images/hyperpress-logo-254x46.png" alt="${appTitle}">  
            </a>           
            <div class="ts-title" main-title>
              <span class="hypersite-site-name">${appTitle}</span>
            </div>
            <div class="cta-header toolbar-list">
              <form style="float:right">
	              <input type="search" aria-label="Search box" placeholder="Search">
              </form>
            </div>
            <button class="menu-btn" title="Menu" @click="${()=>store.dispatch(updateDrawerState(!0))}">${menuIcon}</button>
          </app-toolbar>
          <app-toolbar class="desktop-menu toolbar-list" sticky>
            <nav class="main-navigation" role="navigation">
              <a ?selected="${"home"===_page}" href="/">Home</a>
              <a ?selected="${"hosting"===_page}" href="/hosting">Hosting</a>
              <a ?selected="${"blog"===_page}" href="/blog">Blog</a>
              <a ?selected="${"contact"===_page}" href="/contact">Contact</a>
              <a ?selected="${"support"===_page}" href="/support" style="float:right">Support</a>
            </nav>
          </app-toolbar>
        </app-header>
      </app-header-layout>

      <!-- Drawer content -->
      <app-drawer id="drawer" .opened="${_drawerOpened}"  
          @opened-changed="${e=>store.dispatch(updateDrawerState(e.target.opened))}" swipe-open>
        <app-toolbar>
          ${appTitle}
        </app-toolbar>
        <nav class="drawer-list">
          <form>
	          <input type="search" tabindex="-1" placeholder="Search">
          </form>
          <a ?selected="${"home"===_page}" href="/">Home</a>
          <a class="submenu" ?selected="${"design"===_page}" href="/design">Progressive Web Design</a>
          <a class="submenu" ?selected="${"hosting"===_page}" href="/hosting">Managed Hosting</a>
          <a class="submenu" ?selected="${"pagespeed"===_page}" href="/pagespeed">PageSpeed Optimization</a>
          <a class="submenu" ?selected="${"emergency"===_page}" href="/emergency">WordPress 911</a>
          <a class="submenu" ?selected="${"security"===_page}" href="/security">Security Services</a>
          <a class="submenu" ?selected="${"care"===_page}" href="/care">Preventive Care</a>
          <a class="submenu" ?selected="${"migrations"===_page}" href="/migrations">WordPress Migrations</a>
          <a ?selected="${"blog"===_page}" href="/blog">Logical Phase Blog</a>
          <a ?selected="${"privacy"===_page}" href="/privacy">Privacy</a>
          <a ?selected="${"contact"===_page}" href="/contact">Contact</a>
        </nav>
      </app-drawer>
      <!-- Main content -->
      <main class="main-content">
        <ts-home class="page" ?active="${"home"===_page}"></ts-home>
        <ts-care class="page" ?active="${"care"===_page}"></ts-care>
        <ts-design class="page" ?active="${"design"===_page}"></ts-design>
        <ts-hosting class="page" ?active="${"hosting"===_page}"></ts-hosting>
        <ts-emergency class="page" ?active="${"emergency"===_page}"></ts-emergency>
        <ts-migrations class="page" ?active="${"migrations"===_page}"></ts-migrations>
        <ts-pagespeed  class="page" ?active="${"pagespeed"===_page}"></ts-pagespeed>
        <ts-privacy class="page" ?active="${"privacy"===_page}"></ts-privacy>
        <ts-security class="page" ?active="${"security"===_page}"></ts-security>
        <ts-blog class="page" ?active="${"blog"===_page}"></ts-blog>
        <ts-article class="page" ?active="${"article"===_page}"></ts-article>
        <ts-contact class="page" ?active="${"contact"===_page}"></ts-contact>
        <ts-view404 class="page" ?active="${"404"===_page}"></ts-view404>
      </main>

      <!-- Footer content -->
      <footer class="hypersite-footer-linkboxes nocontent hypersite-footer-linkboxes-all-backup">
        <nav class="hypersite-full-site-width"></nav>
      </footer>
      <footer class="hypersite-utility-footer">
        <nav class="hypersite-utility-footer-nav hypersite-nav hypersite-full-site-width">
          <div class="hypersite-utility-footer-nav-left">
            <span class="hypersite-footer-links">
              <a class="hypersite-utility-footer-link gc-analytics-event" href="/site-terms">Site Terms</a>
              <a class="hypersite-utility-footer-link gc-analytics-event" href="/privacy">Privacy</a>
            </span>
          </div>
        </nav>
      </footer>

      <snack-bar ?active="${_snackbarOpened}">
        You are currently ${_offline?"offline":"online"}.</snack-bar>
    `}static get properties(){return{appTitle:{type:String},_query:{type:String},_page:{type:String},_lazyResourcesLoaded:{type:Boolean},_lastVisitedListPage:{type:Boolean},_offline:{type:Boolean},_drawerOpened:{type:Boolean},_snackbarOpened:{type:Boolean},_updateOffline:{type:Boolean},_data:{type:Object},_item:{type:Object},_articleSlug:{type:String}}}constructor(){super();// To force all event listeners for gestures to be passive.
// See https://www.polymer-project.org/3.0/docs/devguide/settings#setting-passive-touch-gestures
setPassiveTouchGestures(!0)}firstUpdated(){installRouter(location=>store.dispatch(navigate(location)));installOfflineWatcher(offline=>store.dispatch(updateOffline(offline)));installMediaQueryWatcher(`(min-width: 648px) and (min-height: 648px)`,matches=>store.dispatch(updateLayout(matches)));this.removeAttribute("unresolved")}updated(changedProps){if(changedProps.has("_page")){const pageTitle=this.appTitle+" - "+this._page;updateMetadata({title:pageTitle,description:pageTitle// This object also takes an image property, that points to an img src.
});window.scrollTo(0,0)}}stateChanged(state){this.appTitle=state.app.appTitle;this._page=state.app.page;this._lastVisitedListPage=state.app.lastVisitedListPage;this._offline=state.app.offline;this._snackbarOpened=state.app.snackbarOpened;this._drawerOpened=state.app.drawerOpened;this._data=state.article&&state.article.data;this._item=state.article&&state.article.item;this._query=state.articles&&state.articles.query;this._articleSlug=state.article&&state.article.slug}}window.customElements.define("ts-app",TSApp);class TSOffline extends LitElement{static get styles(){return[SharedStyles,TsTypographyStyle,css`
      :host {
        padding: 16px;
        text-align: center;
        line-height: 1.5;
      }
      `]}render(){return html$1`
      <section>
        <h3>Uh oh! You are offline and the request resource is unavailable.</h3>
        <button class="article-button" @click="${()=>this._refresh()}">Try Again...</button>
      </section>
    `}_refresh(){this.dispatchEvent(new CustomEvent("refresh",{composed:!0}))}}window.customElements.define("ts-offline",TSOffline);class TSSideBarNav extends connect(store)(LitElement){static get styles(){return[SharedStyles,css`
      :host {
        display: block;
        padding: 0px;
      }

      .nav a {
        border-bottom: 0px;
        font-weight: normal;
      }

      .nav a[selected] {
        color:var(--app-primary-color);
        text-decoration:none;
      }

      @media (min-width: 460px) {

      }

      @media (max-width: 800px) {

      }    
    `]}render(){const{_page}=this;return html$1`
    <nav class="sidebar-nav nav">
      <div class="sticky">
        <ul class="right-side-nav l-space-bottom-5">
          <li>
            <h3 class="l-pad-right-2 l-pad-left-2 text-uppercase" id="more-about-serverless">Solutions Menu</h3>
          </li>
          <li>
            <a ?selected="${"pagespeed"===_page}" class="pagespeed" track-type="pagespeedOptimization" track-name="web-page" track-metadata-position="sidebar" href="/pagespeed">Pagespeed Optimization</a>
          </li>
          <li>
            <a ?selected="${"design"===_page}" class="design" track-type="detailResponse" track-name="web-page" track-metadata-position="sidebar" href="/design">Mobile First Design</a>
          </li>
          <li>
            <a ?selected="${"emergency"===_page}" class="emergency" track-type="emergencyResponse" track-name="web-page" track-metadata-position="sidebar" href="/emergency">Emergency Response</a>
          </li>
          <li>
            <a ?selected="${"security"===_page}" class="security" track-type="security" track-name="web-page" track-metadata-position="sidebar" href="/security">WordPress Security</a>
          </li>
          <li>
            <a ?selected="${"migrations"===_page}" class="migration" track-type="migrations" track-name="web-page" track-metadata-position="sidebar" href="/migrations">WordPress Migrations</a>
          </li>
          <li>
            <a ?selected="${"care"===_page}" lass="care" track-type="preventiveCare" track-name="web-page" track-metadata-position="sidebar" href="/care">Preventive Care</a>
          </li>
        </ul>
      </div>
    </nav>
  `}static get properties(){return{_page:{type:String}}}firstUpdated(){installRouter(location=>store.dispatch(navigate(location)))}stateChanged(state){this._page=state.app.page}}window.customElements.define("ts-sidebar-nav",TSSideBarNav);const TsTableStyles=css`
  .table {
    width: 100%;
    max-width: 100%;
    margin-bottom: 2rem;
    background-color: var(--app-reverse-text-color);
  }
  td, th {
    text-align: left;
    padding: .5rem;
    vertical-align: top;
    border-top: 0;
  }
  thead tr th {
    font-weight: 400;
    color: #222;
    vertical-align: bottom;
    border-bottom: 1px solid rgba(0,0,0,.12);
  }
  caption + thead,
  colgroup + thead,
  thead:first-child > tr:first-child th, td {
    border-top: 0;
  }
  tbody + tbody {
    border-top: 1px solid rgba(0,0,0,.12);
  }

  .table {
    background-color: var(--app-reverse-text-color);
  }

  .table-responsive-vertical {
    max-width: 100%
  }

  .no-border {
    border: 0;
  }

  .table-condensed thead, tbody, tfoot tr th, td {
    padding: .5rem;
  }

  .table-bordered {
    border: 0;
  }
  thead, tbody, tfoot tr th, td {
    border: 0;
    border-bottom: 1px solid var(--app-primary-border-color);
  }

  thead > tr  > th, > td {
    border-bottom-width: 2px;
  }
  .table-hover tbody > tr:hover {
    background-color: var(--app-secondary-background-color);
  }
`;_exports.TsTableStyles=TsTableStyles;var tsStyleTable={TsTableStyles:TsTableStyles};_exports.$tsStyleTable=tsStyleTable;const articles$1=(state={query:null},action)=>{switch(action.type){case REQUEST_ARTICLES:return _objectSpread({},state,{query:action.query,data:null,// reset data
failure:!1,isFetching:!0,loading:!0});case RECEIVE_ARTICLES:return _objectSpread({},state,{data:action.data.reduce((obj,data)=>{obj[data.slug]=data;return obj},{}),failure:!1,isFetching:!1,loading:!1});case FAIL_ARTICLES:return _objectSpread({},state,{data:null,failure:!0,isFetching:!1,loading:!1});default:return state;}};_exports.articles=articles$1;const itemsSelector=state=>state.articles&&state.articles.data;_exports.itemsSelector=itemsSelector;const itemListSelector=createSelector(itemsSelector,data=>{return data?Object.keys(data).map(key=>data[key]):[]});_exports.itemListSelector=itemListSelector;var articles$2={articles:articles$1,itemsSelector:itemsSelector,itemListSelector:itemListSelector};_exports.$articles$1=articles$2});